var jsonData = [{
    "t": "Service vs provider vs factory",
    "l": "http://stackoverflow.com/questions/15666048/service-vs-provider-vs-factory",
    "q": "\n\n<p>What are the differences between AngularJS module's <code>Service</code>, <code>Provider</code> and <code>Factory</code>?</p>\n    ",
    "a": "\n<p>From the AngularJS mailing list I got <a href=\"https://groups.google.com/forum/#!msg/angular/56sdORWEoqg/HuZsOsMvKv4J\">an amazing thread</a> that explains service vs factory vs provider and their injection usage. Compiling the answers:</p>\n\n<h1>Services</h1>\n\n<p>Syntax: <code>module.service( 'serviceName', function );</code> <br>\nResult: When declaring serviceName as an injectable argument <strong>you will be provided with an instance of the function. In other words</strong> <code>new FunctionYouPassedToService()</code>.</p>\n\n<h1>Factories</h1>\n\n<p>Syntax: <code>module.factory( 'factoryName', function );</code> <br>\nResult: When declaring factoryName as an injectable argument you will be provided with <strong>the value that is returned by invoking the function reference passed to module.factory</strong>.</p>\n\n<h1>Providers</h1>\n\n<p>Syntax: <code>module.provider( 'providerName', function );</code> <br>\nResult: When declaring providerName as an injectable argument <strong>you will be provided with</strong> <code>ProviderFunction().$get()</code>. The constructor function is instantiated before the $get method is called - ProviderFunction is  the function reference passed to module.provider.</p>\n\n<p>Providers have the advantage that they can be configured during the module configuration phase.</p>\n\n<p>See <a href=\"http://jsbin.com/ohamub/1/edit\">here</a> for the provided code.</p>\n\n<p>Here's a great further explanation by Misko:</p>\n\n<pre><code>provide.value('a', 123);\n\nfunction Controller(a) {\n  expect(a).toEqual(123);\n}\n</code></pre>\n\n<p>In this case the injector simply returns the value as is. But what if you want to compute the value? Then use a factory</p>\n\n<pre><code>provide.factory('b', function(a) {\n  return a*2;\n});\n\nfunction Controller(b) {\n  expect(b).toEqual(246);\n}\n</code></pre>\n\n<p>So <code>factory</code> is a function which is responsible for creating the value. Notice that the factory function can ask for other dependencies.</p>\n\n<p>But what if you want to be more OO and have a class called Greeter?</p>\n\n<pre><code>function Greeter(a) {\n  this.greet = function() {\n    return 'Hello ' + a;\n  }\n}\n</code></pre>\n\n<p>Then to instantiate you would have to write</p>\n\n<pre><code>provide.factory('greeter', function(a) {\n  return new Greeter(a);\n});\n</code></pre>\n\n<p>Then we could ask for 'greeter' in controller like this</p>\n\n<pre><code>function Controller(greeter) {\n  expect(greeter instanceof Greeter).toBe(true);\n  expect(greeter.greet()).toEqual('Hello 123');\n}\n</code></pre>\n\n<p>But that is way too wordy. A shorter way to write this would be <code>provider.service('greeter', Greeter);</code></p>\n\n<p>But what if we wanted to configure the <code>Greeter</code> class before the injection? Then we could write</p>\n\n<pre><code>provide.provider('greeter2', function() {\n  var salutation = 'Hello';\n  this.setSalutation = function(s) {\n    salutation = s;\n  }\n\n  function Greeter(a) {\n    this.greet = function() {\n      return salutation + ' ' + a;\n    }\n  }\n\n  this.$get = function(a) {\n    return new Greeter(a);\n  };\n});\n</code></pre>\n\n<p>We can then do this:</p>\n\n<pre><code>angular.module('abc', []).config(function(greeter2Provider) {\n  greeter2Provider.setSalutation('Halo');\n});\n\nfunction Controller(greeter2) {\n  expect(greeter2.greet()).toEqual('Halo 123');\n}\n</code></pre>\n\n<p>As a side note, <code>service</code>, <code>factory</code>, and <code>value</code> are all derived from provider.</p>\n\n<pre><code>provider.service = function(name, Class) {\n  provider.provide(name, function() {\n    this.$get = function($injector) {\n      return $injector.instantiate(Class);\n    };\n  });\n}\n\nprovider.factory = function(name, factory) {\n  provider.provide(name, function() {\n    this.$get = function($injector) {\n      return $injector.invoke(factory);\n    };\n  });\n}\n\nprovider.value = function(name, value) {\n  provider.factory(name, function() {\n    return value;\n  });\n};\n</code></pre>\n    "
}, {
    "t": "Databinding in AngularJS",
    "l": "http://stackoverflow.com/questions/9682092/databinding-in-angularjs",
    "q": "\n\n<p>How does databinding work in the AngularJS framework?</p>\n\n<p>I haven't found technical details on <a href=\"http://angularjs.org\">their site</a>. It's more or less clear how it works when data is propagated from view to model. But how does AngularJS track changes of model properties without setters and getters? I found that there are <a href=\"http://stackoverflow.com/questions/1029241/javascript-object-watch-for-all-browsers\">JavaScript watchers</a> that may do this work. But they are not supported in <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_6\">Internet&nbsp;Explorer&nbsp;6</a> and <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_7\">Internet&nbsp;Explorer&nbsp;7</a>. So how does AngularJS know that I changed for example:</p>\n\n<pre><code>myobject.myproperty=\"new value\";\n</code></pre>\n\n<p>and reflect this change on a view?</p>\n    ",
    "a": "\n<p>AngularJS remembers the value and compares it to previous value. This is basic dirty-checking. If there is a change in value, then it fires the change event. </p>\n\n<p>The <code>$apply()</code> method, which is what you call when you are transitioning from a non-AngularJS world into an AngularJS world, calls <code>$digest()</code>. A digest is just plain old dirty-checking. It works on all browsers and is totally predictable.</p>\n\n<p>To contrast dirty-checking (AngularJS) vs change listeners (<a href=\"http://en.wikipedia.org/wiki/KnockoutJS\">KnockoutJS</a> and <a href=\"https://en.wikipedia.org/wiki/Backbone.js\">Backbone.js</a>): While dirty-checking may seem simple, and even inefficient (I will address that later), it turns out that it is semantically correct all the time, while change listeners have lots of weird corner cases and need things like dependency tracking to make it more semantically correct. KnockoutJS dependency tracking is a clever feature for a problem which AngularJS does not have.</p>\n\n<h1>Issues with change listeners:</h1>\n\n<ul>\n<li>Syntax is atrocious, since browsers do not support it natively. Yes, there are proxies, but they are not semantically correct in all cases, and of course no proxies on old browsers. The bottom line is that dirty-checking allows you to do <a href=\"http://en.wikipedia.org/wiki/Plain_Old_Java_Object\">POJO</a>, whereas KnockoutJS and Backbone.js force you to inherit from their classes, and access your data through accessors.</li>\n<li>Change coalescence. Suppose you have an array of items. Say you want to add items into an array, as you are looping to add, each time you add you are firing events on change, which is rendering the UI. This is very bad for performance. What you want is to update the UI only once, at the end. The change events are too fine grained.</li>\n<li>Change listeners fire immediately on a setter, which is a problem, since the change listener can further change data, which fires more change events. This is bad since on your stack you may have several change events happening at once. Suppose you have two arrays which need to be kept in sync for whatever reason. You can only add to one or the other, but each time you add you fire a change event, which now has an inconsistent view of the world. This is a very similar problem to thread locking, which JavaScript avoids since each callback executes exclusively and to completion. Change events break this since setters can have far reaching consequences which are not intended and non obvious, which creates the thread problem all over again. It turns out that what you want to do is to delay the listener execution, and guarantee, that only one listener runs at a time, hence any code is free to change data, and it knows that no other code runs while it is doing so.</li>\n</ul>\n\n<h1>What about performance?</h1>\n\n<p>So it may seem that we are slow, since dirty-checking is inefficient. This is where we need to look at real numbers rather than just have theoretical arguments, but first let's define some constraints.</p>\n\n<p>Humans are:</p>\n\n<ul>\n<li><p><em>Slow</em> — Anything faster than 50&nbsp;ms is imperceptible to humans and thus can be considered as \"instant\".</p></li>\n<li><p><em>Limited</em> — You can't really show more than about 2000 pieces of information to a human on a single page. Anything more than that is really bad UI, and humans can't process this anyway.</p></li>\n</ul>\n\n<p>So the real question is this: How many comparisons can you do on a browser in 50&nbsp;ms? This is a hard question to answer as many factors come into play, but here is a test case: <a href=\"http://jsperf.com/angularjs-digest/6\">http://jsperf.com/angularjs-digest/6</a> which creates 10,000 watchers. On a modern browser this takes just under 6&nbsp;ms. On <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\">Internet&nbsp;Explorer&nbsp;8</a> it takes about 40&nbsp;ms. As you can see, this is not an issue even on slow browsers these days. There is a caveat: the comparisons need to be simple to fit into the time limit... Unfortunately it is way too easy to add a slow comparison into AngularJS, so it is easy to build slow applications when you don't know what you are doing. But we hope to have an answer by providing an instrumentation module, which would show you which are the slow comparisons.</p>\n\n<p>It turns out that video games and GPUs use the dirty-checking approach, specifically because it is consistent. As long as they get over the monitor refresh rate (typically 50-60 hz, or every 16.6-20 ms), any performance over that is a waste, so you're better off drawing more stuff, than getting FPS higher.</p>\n    "
}, {
    "t": "What is the best way to conditionally apply a class?",
    "l": "http://stackoverflow.com/questions/7792652/what-is-the-best-way-to-conditionally-apply-a-class",
    "q": "\n\n<p>Lets say you have an array that is rendered in a <code>ul</code> with an <code>li</code> for each element and a property on the controller called <code>selectedIndex</code>. What would be the best way to add a class to the <code>li</code> with the index <code>selectedIndex</code> in AngularJS?</p>\n\n<p>I am currently duplicating (by hand) the <code>li</code> code and adding the class to one of the <code>li</code> tags and using <code>ng-show</code> and <code>ng-hide</code> to show only one <code>li</code> per index.</p>\n    ",
    "a": "\n<p>If you don't want to put CSS class names into Controller like I do, here is an old trick that I use since pre-v1 days. We can write an expression that evaluates directly to a class name <em>selected</em>, no custom directives are necessary:</p>\n\n<pre><code>ng:class=\"{true:'selected', false:''}[$index==selectedIndex]\"\n</code></pre>\n\n<p><em>Please note the old syntax with colon.</em> </p>\n\n<p>There is also a new better way of applying classes conditionally, like:</p>\n\n<pre><code>ng-class=\"{selected: $index==selectedIndex}\"\n</code></pre>\n\n<p>Angular now supports expressions that returns an object. Each property (name) of this object is now considered as a class name and is applied depending on its value.</p>\n\n<p>However these ways are not functionally equal. Here is an example:</p>\n\n<pre><code>ng-class=\"{admin:'enabled', moderator:'disabled', '':'hidden'}[user.role]\"\n</code></pre>\n\n<p>We could therefore reuse existing CSS classes by basically mapping a model property to a class name and at the same time kept CSS classes out of Controller code.</p>\n    "
}, {
    "t": "angular.service vs angular.factory",
    "l": "http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory",
    "q": "\n\n<p>I have seen both <a href=\"http://docs.angularjs.org/guide/dev_guide.services.creating_services\">angular.factory()</a> and <a href=\"http://briantford.com/blog/huuuuuge-angular-apps.html\">angular.service()</a> used to declare services; however, I <a href=\"http://briantford.com/blog/huuuuuge-angular-apps.html\">cannot find</a> <code>angular.service</code> anywhere in official documentation.</p>\n\n<p>What is the difference between the two methods? Which should be used for what (assuming they do different things)?</p>\n    ",
    "a": "\n<pre><code>  angular.service('myService', myServiceFunction);\n  angular.factory('myFactory', myFactoryFunction);\n</code></pre>\n\n<hr>\n\n<p>I had trouble wrapping my head around this concept until I put it to myself this way:</p>\n\n<p><strong>Service</strong>: the <em>function</em> that you write will be <strong>new</strong>-ed:</p>\n\n<pre><code>  myInjectedService  &lt;----  new myServiceFunction()\n</code></pre>\n\n<p><strong>Factory</strong>: the <em>function</em> (constructor) that you write will be <strong>invoked</strong>:</p>\n\n<pre><code>  myInjectedFactory  &lt;---  myFactoryFunction()\n</code></pre>\n\n<p>What you do with that is up to you, but there are some useful patterns... </p>\n\n<h3>Such as writing a <em>service</em> function to expose a public API:</h3>\n\n<pre><code>function myServiceFunction() {\n  this.awesomeApi = function(optional) {\n    // calculate some stuff\n    return awesomeListOfValues;\n  }\n}\n---------------------------------------------------------------------------------\n// Injected in your controller\n$scope.awesome = myInjectedService.awesomeApi();\n</code></pre>\n\n<h3>Or using a <em>factory</em> function to expose a public API:</h3>\n\n<pre><code>function myFactoryFunction() {\n  var aPrivateVariable = \"yay\";\n\n  function hello() {\n    return \"hello mars \" + aPrivateVariable;\n  }\n\n  // expose a public API\n  return {\n    hello: hello\n  };\n}\n---------------------------------------------------------------------------------\n// Injected in your controller\n$scope.hello = myInjectedFactory.hello();\n</code></pre>\n\n<h3>Or using a <em>factory</em> function to return a constructor:</h3>\n\n<pre><code>function myFactoryFunction() {\n    return function() {\n        var a = 2;\n        this.a2 = function() {\n            return a*2;\n        };\n    };\n}\n---------------------------------------------------------------------------------\n// Injected in your controller\nvar myShinyNewObject = new myInjectedFactory();\n$scope.four = myShinyNewObject.a2();\n</code></pre>\n\n<hr>\n\n<h3>Which one to use?...</h3>\n\n<p>You can accomplish the same thing with both. However, in some cases the <em>factory</em> gives you a little bit more flexibility to create an injectable with a simpler syntax. That's because while myInjectedService must always be an object, myInjectedFactory can be an object, a function reference, or any value at all. For example, if you wrote a service to create a constructor (as in the last example above), it would have to be instantiated like so: </p>\n\n<pre><code>var myShinyNewObject = new myInjectedService.myFunction()\n</code></pre>\n\n<p>which is arguably less desirable than this:</p>\n\n<pre><code>var myShinyNewObject = new myInjectedFactory();\n</code></pre>\n\n<p>(But you should be wary about using this type of pattern in the first place because <em>new</em>-ing objects in your controllers creates hard-to-track dependencies that are difficult to mock for testing. Better to have a service manage a collection of objects for you than use <code>new()</code> wily-nilly.)</p>\n\n<hr>\n\n<h3>One more thing, they are all Singletons...</h3>\n\n<p>Also keep in mind that in both cases, angular is helping you manage a singleton. Regardless of where or how many times you inject your service or function, you will get the same reference to the same object or function. (With the exception of when a factory simply returns a value like a number or string. In that case, you will always get the same value, but not a reference.)</p>\n    "
}, {
    "t": "What are the nuances of scope prototypal / prototypical inheritance in AngularJS?",
    "l": "http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs",
    "q": "\n\n<p>The <a href=\"http://docs.angularjs.org/api/ng.%24rootScope.Scope\">API Reference Scope page</a> says:</p>\n\n<blockquote>\n  <p>A scope <em>can</em> inherit from a parent scope.</p>\n</blockquote>\n\n<p>The <a href=\"http://docs.angularjs.org/guide/scope\">Developer Guide Scope page</a> says:</p>\n\n<blockquote>\n  <p>A scope (prototypically) inherits properties from its parent scope.</p>\n</blockquote>\n\n<p>So, does a child scope always prototypically inherit from its parent scope?  Are there exceptions?  When it does inherit, is it always normal JavaScript prototypal inheritance?</p>\n    ",
    "a": "\n<p><strong>Quick answer</strong>: <br>\nA child scope normally prototypically inherits from its parent scope, but not always.  One exception to this rule is a directive with <code>scope: { ... }</code> -- this creates an \"isolate\" scope that does not prototypically inherit.  This construct is often used when creating a \"reusable component\" directive.</p>\n\n<p>As for the nuances, scope inheritance is normally straightfoward... until you need <strong>2-way data binding</strong> (i.e., form elements, ng-model) in the child scope.  Ng-repeat, ng-switch, and ng-include can trip you up if you try to bind to a <strong>primitive</strong> (e.g., number, string, boolean) in the parent scope from inside the child scope.  It doesn't work the way most people expect it should work.  The child scope gets its own property that hides/shadows the parent property of the same name.  Your workarounds are</p>\n\n<ol>\n<li>define objects in the parent for your model, then reference a property of that object  in the child:  parentObj.someProp</li>\n<li>use $parent.parentScopeProperty (not always possible, but easier than 1. where possible)</li>\n<li>define a function on the parent scope, and call it from the child (not always possible)</li>\n</ol>\n\n<p></p><hr>\n<strong>L-o-n-g answer</strong>:<p></p>\n\n<h2>JavaScript Prototypal Inheritance</h2>\n\n<p><strong>Also placed on the AngularJS wiki:</strong> <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Scopes\">https://github.com/angular/angular.js/wiki/Understanding-Scopes</a></p>\n\n<p>It is important to first have a solid understanding of prototypal inheritance, especially if you are coming from a server-side background and you are more failiar with class-ical inheritance.  So let's review that first.</p>\n\n<p>Suppose parentScope has properties aString, aNumber, anArray, anObject, and aFunction.  If childScope prototypically inherits from parentScope, we have:</p>\n\n<p><img src=\"http://i.stack.imgur.com/aTAGg.png\" alt=\"prototypal inheritance\"></p>\n\n<p>(Note that to save space, I show the <code>anArray</code> object as a single blue object with its three values, rather than an single blue object with three separate gray literals.)</p>\n\n<p>If we try to access a property defined on the parentScope from the child scope, JavaScript will first look in the child scope, not find the property, then look in the inherited scope, and find the property.  (If it didn't find the property in the parentScope, it would continue up the prototype chain... all the way up to the root scope). So, these are all true:</p>\n\n<pre><code>childScope.aString === 'parent string'\nchildScope.anArray[1] === 20\nchildScope.anObject.property1 === 'parent prop1'\nchildScope.aFunction() === 'parent output'\n</code></pre>\n\n<p>Suppose we then do this:</p>\n\n<pre><code>childScope.aString = 'child string'\n</code></pre>\n\n<p>The prototype chain is not consulted, and a new aString property is added to the childScope.  <strong>This new property hides/shadows the parentScope property with the same name.</strong>  This will become very important when we discuss ng-repeat and ng-include below.</p>\n\n<p><img src=\"http://i.stack.imgur.com/OyVPW.png\" alt=\"property hiding\"></p>\n\n<p>Suppose we then do this:</p>\n\n<pre><code>childScope.anArray[1] = '22'\nchildScope.anObject.property1 = 'child prop1'\n</code></pre>\n\n<p>The prototype chain is consulted because the objects (anArray and anObject) are not found in the childScope.  The objects are found in the parentScope, and the property values are updated on the original objects.  No new properties are added to the childScope;  no new objects are created.  (Note that in JavaScript arrays and functions are also objects.)</p>\n\n<p><img src=\"http://i.stack.imgur.com/2QceU.png\" alt=\"follow the prototype chain\"></p>\n\n<p>Suppose we then do this:</p>\n\n<pre><code>childScope.anArray = [100, 555]\nchildScope.anObject = { name: 'Mark', country: 'USA' }\n</code></pre>\n\n<p>The prototype chain is not consulted, and child scope gets two new object properties that hide/shadow the parentScope object properties with the same names.</p>\n\n<p><img src=\"http://i.stack.imgur.com/hKetH.png\" alt=\"more property hiding\"></p>\n\n<p>Takeaways:</p>\n\n<ul>\n<li>If we read childScope.propertyX, and childScope has propertyX, then the prototype chain is not consulted.</li>\n<li>If we set childScope.propertyX, the prototype chain is not consulted.</li>\n</ul>\n\n<p>One last scenario:</p>\n\n<pre><code>delete childScope.anArray\nchildScope.anArray[1] === 22  // true\n</code></pre>\n\n<p>We deleted the childScope property first, then when we try to access the property again, the prototype chain is consulted.</p>\n\n<p><img src=\"http://i.stack.imgur.com/56uoe.png\" alt=\"after removing a child property\"></p>\n\n<hr>\n\n<h2>Angular Scope Inheritance</h2>\n\n<p>The contenders:</p>\n\n<ul>\n<li>The following create new scopes, and inherit prototypically: ng-repeat, ng-include, ng-switch, ng-controller, directive with <code>scope: true</code>, directive with <code>transclude: true</code>.</li>\n<li>The following creates a new scope which does not inherit prototypically: directive with <code>scope: { ... }</code>.  This creates an \"isolate\" scope instead.</li>\n</ul>\n\n<p>Note, by default, directives do not create new scope -- i.e., the default is <code>scope: false</code>.</p>\n\n<h3>ng-include</h3>\n\n<p>Suppose we have in our controller:</p>\n\n<pre><code>$scope.myPrimitive = 50;\n$scope.myObject    = {aNumber: 11};\n</code></pre>\n\n<p>And in our HTML:</p>\n\n<pre><code>&lt;script type=\"text/ng-template\" id=\"/tpl1.html\"&gt;\n&lt;input ng-model=\"myPrimitive\"&gt;\n&lt;/script&gt;\n&lt;div ng-include src=\"'/tpl1.html'\"&gt;&lt;/div&gt;\n\n&lt;script type=\"text/ng-template\" id=\"/tpl2.html\"&gt;\n&lt;input ng-model=\"myObject.aNumber\"&gt;\n&lt;/script&gt;\n&lt;div ng-include src=\"'/tpl2.html'\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Each ng-include generates a new child scope, which prototypically inherits from the parent scope.</p>\n\n<p><img src=\"http://i.stack.imgur.com/ziDfx.png\" alt=\"ng-include child scopes\"></p>\n\n<p>Typing (say, \"77\") into the first input textbox causes the child scope to get a new <code>myPrimitive</code> scope property that hides/shadows the parent scope property of the same name.  This is probably not what you want/expect.</p>\n\n<p><img src=\"http://i.stack.imgur.com/7l8dg.png\" alt=\"ng-include with a primitive\"></p>\n\n<p>Typing (say, \"99\") into the second input textbox does not result in a new child property.  Because tpl2.html binds the model to an object property, prototypal inheritance kicks in when the ngModel looks for object myObject -- it finds it in the parent scope.</p>\n\n<p><img src=\"http://i.imgur.com/ZqqloMS.png\" alt=\"ng-include with an object\"></p>\n\n<p>We can rewrite the first template to use $parent, if we don't want to change our model from a primitive to an object:</p>\n\n<pre><code>&lt;input ng-model=\"$parent.myPrimitive\"&gt;\n</code></pre>\n\n<p>Typing (say, \"22\") into this input textbox does not result in a new child property.  The model is now bound to a property of the parent scope (because $parent is a child scope property that references the parent scope).</p>\n\n<p><img src=\"http://i.stack.imgur.com/kd8pj.png\" alt=\"ng-include with $parent\"></p>\n\n<p>For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via scope properties $parent, $$childHead and $$childTail.  I normally don't show these scope properties in the diagrams.</p>\n\n<p>For scenarios where form elements are not involved, another solution is to define a function on the parent scope to modify the primitive.  Then ensure the child always calls this function, which will be available to the child scope due to prototypal inheritance. E.g.,</p>\n\n<pre><code>// in the parent scope\n$scope.setMyPrimitive = function(value) {\n     $scope.myPrimitive = value;\n}\n</code></pre>\n\n<p>Here is a <a href=\"http://jsfiddle.net/mrajcok/jNxyE/\">sample fiddle</a> that uses this \"parent function\" approach.  (The fiddle was written as part of this answer: <a href=\"http://stackoverflow.com/a/14104318/215945\">http://stackoverflow.com/a/14104318/215945</a>.)</p>\n\n<p>See also <a href=\"http://stackoverflow.com/a/13782671/215945\">http://stackoverflow.com/a/13782671/215945</a> and <a href=\"https://github.com/angular/angular.js/issues/1267\">https://github.com/angular/angular.js/issues/1267</a>.</p>\n\n<h3>ng-switch</h3>\n\n<p>ng-switch scope inheritance works just like ng-include.  So if you need 2-way data binding to a primitive in the parent scope, use $parent, or change the model to be an object and then bind to a property of that object.  This will avoid child scope hiding/shadowing of parent scope properties.</p>\n\n<p>See also <a href=\"http://stackoverflow.com/questions/12405005/angularjs-bind-scope-of-a-switch-case/12414410\">AngularJS, bind scope of a switch-case?</a></p>\n\n<h3>ng-repeat</h3>\n\n<p>Ng-repeat works a little differently.  Suppose we have in our controller:</p>\n\n<pre><code>$scope.myArrayOfPrimitives = [ 11, 22 ];\n$scope.myArrayOfObjects    = [{num: 101}, {num: 202}]\n</code></pre>\n\n<p>And in our HTML:</p>\n\n<pre><code>&lt;ul&gt;&lt;li ng-repeat=\"num in myArrayOfPrimitives\"&gt;\n       &lt;input ng-model=\"num\"&gt;\n    &lt;/li&gt;\n&lt;ul&gt;\n&lt;ul&gt;&lt;li ng-repeat=\"obj in myArrayOfObjects\"&gt;\n       &lt;input ng-model=\"obj.num\"&gt;\n    &lt;/li&gt;\n&lt;ul&gt;\n</code></pre>\n\n<p>For each item/iteration, ng-repeat creates a new scope, which prototypically inherits from the parent scope, <strong>but it also assigns the item's value to a new property on the new child scope</strong>.  (The name of the new property is the loop variable's name.)  Here's what the Angular source code for ng-repeat actually is:</p>\n\n<pre><code>childScope = scope.$new();  // child scope prototypically inherits from parent scope\n...\nchildScope[valueIdent] = value;  // creates a new childScope property\n</code></pre>\n\n<p>If item is a primitive (as in myArrayOfPrimitives), essentially a copy of the value is assigned to the new child scope property.  Changing the child scope property's value (i.e., using ng-model, hence child scope <code>num</code>) does <strong>not</strong> change the array the parent scope references.  So in the first ng-repeat above, each child scope gets a <code>num</code> property that is independent of the myArrayOfPrimitives array:</p>\n\n<p><img src=\"http://i.stack.imgur.com/nLoiW.png\" alt=\"ng-repeat with primitives\"></p>\n\n<p>This ng-repeat will not work (like you want/expect it to).  Typing into the textboxes changes the values in the gray boxes, which are only visible in the child scopes.  What we want is for the inputs to affect the myArrayOfPrimitives array, not a child scope primitive property.  To accomplish this, we need to change the model to be an array of objects.</p>\n\n<p>So, if item is an object, a reference to the original object (not a copy) is assigned to the new child scope property.  Changing the child scope property's value (i.e., using ng-model, hence <code>obj.num</code>) <strong>does</strong> change the object the parent scope references.  So in the second ng-repeat above, we have:</p>\n\n<p><img src=\"http://i.stack.imgur.com/QSjTJ.png\" alt=\"ng-repeat with objects\"></p>\n\n<p>(I colored one line gray just so that it is clear where it is going.)</p>\n\n<p>This works as expected.  Typing into the textboxes changes the values in the gray boxes, which are visible to both the child and parent scopes.</p>\n\n<p>See also <a href=\"http://stackoverflow.com/questions/13714884/difficulty-with-ng-model-ng-repeat-and-inputs\">Difficulty with ng-model, ng-repeat, and inputs</a> and \n<a href=\"http://stackoverflow.com/a/13782671/215945\">http://stackoverflow.com/a/13782671/215945</a></p>\n\n<h3>ng-controller</h3>\n\n<p>Nesting controllers using ng-controller results in normal prototypal inheritance, just like ng-include and ng-switch, so the same techniques apply.\nHowever, \"it is considered bad form for two controllers to share information via $scope inheritance\" -- <a href=\"http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/\">http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/</a>\nA service should be used to share data between controllers instead.</p>\n\n<p>(If you really want to share data via controllers scope inheritance, there is nothing you need to do.  The child scope will have access to all of the parent scope properties.\nSee also <a href=\"http://stackoverflow.com/questions/13825419/controller-load-order-differs-when-loading-or-navigating/13843771#13843771\">Controller load order differs when loading or navigating</a>)</p>\n\n<h3>directives</h3>\n\n<ol>\n<li>default (<code>scope: false</code>) - the directive does not create a new scope, so there is no inheritance here.  This is easy, but also dangerous because, e.g., a directive might think it is creating a new property on the scope, when in fact it is clobbering an existing property.  This is not a good choice for writing directives that are intended as reusable components.</li>\n<li><code>scope: true</code> - the directive creates a new child scope that prototypically inherits from the parent scope.  If more than one directive (on the same DOM element) requests a new scope, only one new child scope is created.  Since we have \"normal\" prototypal inheritance, this is like ng-include and ng-switch, so be wary of 2-way data binding to parent scope primitives, and child scope hiding/shadowing of parent scope properties.</li>\n<li><code>scope: { ... }</code> - the directive creates a new isolate/isolated scope.  It does not prototypically inherit.  This is usually your best choice when creating reusable components, since the directive cannot accidentally read or modify the parent scope.  However, such directives often need access to a few parent scope properties.  The object hash is used to set up two-way binding (using '=') or one-way binding (using '@') between the parent scope and the isolate scope.  There is also '&amp;' to bind to parent scope expressions.  So, these all create local scope properties that are derived from the parent scope.\nNote that attributes are used to help set up the binding -- you can't just reference parent scope property names in the object hash, you have to use an attribute.  E.g., this won't work if you want to bind to parent property <code>parentProp</code> in the isolated scope: <code>&lt;div my-directive&gt;</code> and <code>scope: { localProp: '@parentProp' }</code>.  An attribute must be used to specify each parent property that the directive wants to bind to: <code>&lt;div my-directive the-Parent-Prop=parentProp&gt;</code> and <code>scope: { localProp: '@theParentProp' }</code>.\n<br>Isolate scope's <code>__proto__</code> references Object.\nIsolate scope's $parent references the parent scope, so although it is isolated and doesn't inherit prototypically from the parent scope, it is still a child scope.\n<br>For the picture below we have\n<br>  <code>&lt;my-directive interpolated=\"{{parentProp1}}\" twowayBinding=\"parentProp2\"&gt;</code> and\n<br>  <code>scope: { interpolatedProp: '@interpolated', twowayBindingProp: '=twowayBinding' }</code>\n<br>Also, assume the directive does this in its linking function: <code>scope.someIsolateProp = \"I'm isolated\"</code>\n<br> <img src=\"http://i.stack.imgur.com/MUxS4.png\" alt=\"isolated scope\">\n<br>For more information on isolate scopes see <a href=\"http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/\">http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/</a></li>\n<li><code>transclude: true</code> - the directive creates a new \"transcluded\" child scope, which prototypically inherits from the parent scope.  The transcluded and the isolated scope (if any) are siblings -- the $parent property of each scope references the same parent scope.  When a transcluded and an isolate scope both exist, isolate scope property $$nextSibling will reference the transcluded scope.  I'm not aware of any nuances with the transcluded scope.\n<br>For the picture below, assume the same directive as above with this addition: <code>transclude: true</code>\n<br><img src=\"http://i.stack.imgur.com/fkWHA.png\" alt=\"transcluded scope\"></li>\n</ol>\n\n<p>This <a href=\"http://jsfiddle.net/mrajcok/7g3QM/\">fiddle</a> has a <code>showScope()</code> function that can be used to examine an isolate and transcluded scope.  See the instructions in the comments in the fiddle.</p>\n\n<hr>\n\n<h2>Summary</h2>\n\n<p>There are four types of scopes:</p>\n\n<ol>\n<li>normal prototypal scope inheritance -- ng-include, ng-switch, ng-controller, directive with <code>scope: true</code></li>\n<li>normal prototypal scope inheritance with a copy/assignment -- ng-repeat.  Each iteration of ng-repeat creates a new child scope, and that new child scope always gets a new property.</li>\n<li>isolate scope -- directive with <code>scope: {...}</code>.  This one is not prototypal, but '=', '@', and '&amp;' provide a mechanism to access parent scope properties, via attributes.</li>\n<li>transcluded scope -- directive with <code>transclude: true</code>.  This one is also normal prototypal scope inheritance, but it is also a sibling of any isolate scope.</li>\n</ol>\n\n<p>For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via properties $parent and $$childHead and $$childTail.</p>\n\n<p>Diagrams were generated with <a href=\"/questions/tagged/graphviz\" class=\"post-tag\" title=\"show questions tagged 'graphviz'\" rel=\"tag\">graphviz</a> \"*.dot\" files, which are on <a href=\"https://github.com/mrajcok/angularjs-prototypal-inheritance-diagrams\">github</a>. Tim Caswell's \"<a href=\"http://howtonode.org/object-graphs\">Learning JavaScript with Object Graphs</a>\" was the inspiration for using GraphViz for the diagrams. </p>\n    "
}, {
    "t": "Working with $scope.$emit and .$on",
    "l": "http://stackoverflow.com/questions/14502006/working-with-scope-emit-and-on",
    "q": "\n\n<p>How can I send my <code>$scope</code> object from one controller to another using <code>.$emit</code> and <code>.$on</code> methods?</p>\n\n<pre><code>function firstCtrl($scope)\n{\n    $scope.$emit('someEvent', [1,2,3]);\n}\n\nfunction secondCtrl($scope)\n{\n    $scope.$on('someEvent', function(mass) { console.log(mass); });\n}\n</code></pre>\n\n<p>It doesn't work the way I think it should. How do <code>$emit</code> and <code>$on</code> work?</p>\n    ",
    "a": "\n<p>First of all, parent-child scope relation does matter. You have two possibilities to emit some event:</p>\n\n<ul>\n<li><code>$broadcast</code> -- dispatches the event downwards to all child scopes,</li>\n<li><code>$emit</code> -- dispatches the event upwards through the scope hierarchy.</li>\n</ul>\n\n<p>I don't know anything about your controllers (scopes) relation, but there are several options:</p>\n\n<ol>\n<li><p>If scope of <code>firstCtrl</code> is parent of the <code>secondCtrl</code> scope, your code should\nwork by replacing <code>$emit</code> by <code>$broadcast</code> in <code>firstCtrl</code>:</p>\n\n<pre><code>function firstCtrl($scope)\n{\n    $scope.$broadcast('someEvent', [1,2,3]);\n}\n\nfunction secondCtrl($scope)\n{\n    $scope.$on('someEvent', function(event, mass) { console.log(mass); });\n}\n</code></pre></li>\n<li><p>In case there is no parent-child relation between your scopes you\ncan inject <code>$rootScope</code> into the controller and broadcast the event\nto all child scopes (i.e. also <code>secondCtrl</code>).</p>\n\n<pre><code>function firstCtrl($rootScope)\n{\n    $rootScope.$broadcast('someEvent', [1,2,3]);\n}\n</code></pre></li>\n<li><p>Finally, when you need to dispatch the event from child controller\nto scopes upwards you can use <code>$scope.$emit</code>. If scope of <code>firstCtrl</code> is parent of the <code>secondCtrl</code> scope:</p>\n\n<pre><code>function firstCtrl($scope)\n{\n    $scope.$on('someEvent', function(event, data) { console.log(data); });\n}\n\nfunction secondCtrl($scope)\n{\n    $scope.$emit('someEvent', [1,2,3]);\n}\n</code></pre></li>\n</ol>\n    "
}, {
    "t": "How to access the angular $scope variable in browser's console?",
    "l": "http://stackoverflow.com/questions/13743058/how-to-access-the-angular-scope-variable-in-browsers-console",
    "q": "\n\n<p>I would like to access my <code>$scope</code> variable in Chrome's JS console. How do I do that? I can neither see <code>$scope</code> nor the name of my module <code>myapp</code> in the console as variables.</p>\n    ",
    "a": "\n<p>Pick an element in the HTML panel of the developer tools and type this in the console</p>\n\n<pre><code>angular.element($0).scope() \n</code></pre>\n\n<p>In webkit <code>$0</code> is a reference to the selected DOM node in the elements tab, so by doing this you get the selected DOM node scope printed out in the console</p>\n\n<p><strong>Addons/Extensions</strong></p>\n\n<p>There are some very useful Chrome Extensions that you might want to checkout:</p>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk\">Batarang</a>. This has been around for a while.</p></li>\n<li><p><a href=\"http://ng-inspector.org/\">ng-inspector</a>. This is the newest one, and as the name suggests, it allows you to inspect your application's scopes.</p></li>\n</ul>\n\n<p><strong>Playing with JS Fiddle</strong></p>\n\n<p>When working with jsfiddle you can open the fiddle in <em>show</em> mode by adding <code>/show</code> at the end of the url. When running like this you have access to the <code>angular</code> global. You can try it here</p>\n\n<p><a href=\"http://jsfiddle.net/jaimem/Yatbt/show\">http://jsfiddle.net/jaimem/Yatbt/show</a></p>\n\n<p><strong>jQuery Lite</strong></p>\n\n<p>If you load jQuery before angular, <code>angular.element</code> can be passed a jQuery selector. So you could inspect the scope of a controller with</p>\n\n<pre><code>angular.element('[ng-controller=ctrl]').scope()\n</code></pre>\n\n<p>Of a button</p>\n\n<pre><code> angular.element('button:eq(1)').scope()\n</code></pre>\n\n<p>... and so on.</p>\n\n<p>You might actually want to use a global function to make it easier</p>\n\n<pre><code>window.SC = function(selector){\n    return angular.element(selector).scope();\n};\n</code></pre>\n\n<p>Now you could do this</p>\n\n<pre><code>SC('button:eq(10)')\nSC('button:eq(10)').row   // -&gt; value of scope.row\n</code></pre>\n\n<p>check here: <a href=\"http://jsfiddle.net/jaimem/DvRaR/1/show/\">http://jsfiddle.net/jaimem/DvRaR/1/show/</a></p>\n    "
}, {
    "t": "Using scope.$watch and scope.$apply",
    "l": "http://stackoverflow.com/questions/15112584/using-scope-watch-and-scope-apply",
    "q": "\n\n<p>I don't understand how to use <code>scope.$watch</code> and <code>scope.$apply</code>. The official documentation isn't helpful.</p>\n\n<p>What I don't understand specifically:</p>\n\n<ul>\n<li>Are they connected to the DOM? </li>\n<li>How can I update DOM changes to the model?</li>\n<li>What is the connection point between them?</li>\n</ul>\n\n<p>I <a href=\"http://css.dzone.com/articles/drag-and-drop-angularjs-using\">tried this tutorial</a>  but it takes the understanding of <code>$watch</code> and <code>$apply</code> for granted.</p>\n\n<p>What do <code>$apply</code> and <code>$watch</code> do, and how do I use them appropriately?</p>\n    ",
    "a": "\n<p>You need to be aware about how Angular works in order to understand it. </p>\n\n<h2>Digest cycle and $scope</h2>\n\n<p>First and foremost, Angular defines a concept of a so called <strong>digest cycle</strong>. This cycle can be considered as a loop, during which Angular checks if there are any changes to all the variables <strong>watched</strong> by all the <code>$scopes</code>. So if you have <code>$scope.myVar</code> defined in your controller and this variable was <strong>marked for being watched</strong>, then you are implicitly telling Angular to monitor the changes on <code>myVar</code> in each iteration of the loop.</p>\n\n<p>A natural follow up question would be: is everything attached to <code>$scope</code> being watched?\nFortunately, no. If you would watch for changes to every object in your <code>$scope</code>, then quickly digest loop would take ages to evaluate and you would quickly run into performance issues. That is why Angular team gave us two ways of declaring some <code>$scope</code> variable as being watched (read below).</p>\n\n<h2>$watch helps to listen for $scope changes</h2>\n\n<p>There are two ways of declaring a <code>$scope</code> variable as being watched.</p>\n\n<ol>\n<li>By using it in your template via expression: <code>&lt;span&gt;{{myVar}}&lt;/span&gt;</code></li>\n<li>By adding it manually via <code>$watch</code> service</li>\n</ol>\n\n<p>Ad 1) \nThis is the most common scenario and I'm sure you've seen it before, but you didn't know that this has created a watch in the background. Yes it had! Using Angular directives (such as <code>ng-repeat</code>) can also create implicit watches.</p>\n\n<p>Ad 2) \nThis is how you create your own <strong>watches</strong>. <code>$watch</code> service helps you to run some code when some value attached to the <code>$scope</code> has changed. It is rarely used, but sometimes is helpful. For instance, if you want to run some code each time 'myVar' changes, you could do the following:</p>\n\n<pre><code>function MyController($scope) {\n\n   $scope.myVar = 1;\n\n   $scope.$watch('myVar', function() {\n       alert('hey, myVar has changed!');\n   });\n\n   $scope.buttonClicked = function() {\n      $scope.myVar = 2; // This will trigger $watch expression to kick in\n   };\n\n}\n</code></pre>\n\n<h2>$apply enables to integrate changes with the digest cycle</h2>\n\n<p>You can think of the <strong><code>$apply</code> function as of an integration mechanism</strong>. You see, each time you change some <strong>watched variable attached to the <code>$scope</code></strong> object directly, Angular will know that the change has happened. This is because Angular already knew to monitor those changes. So if it happens in code managed by the framework, the digest cycle will carry on.\nHowever, sometimes you want to <strong>change some value outside of the Angular world</strong> and see the changes propagate normally.\nConsider this - you have a <code>$scope.myVar</code> value which will be modified within a jQuery's <code>$.ajax()</code> handler. This will happen at some point in future. Angular can't wait for this to happen, since it hasn't been instructed to wait on jQuery. \nTo tackle this, <code>$apply</code> has been introduced. It lets you to start the digestion cycle explicitly. However, you should only use this to migrate some data to Angular (integration with other frameworks), but never use this method combined with regular Angular code, as Angular will throw an error then.</p>\n\n<h2>How all of this is related to DOM?</h2>\n\n<p>Well, you should really follow the tutorial again, now that you know all this. The digest cycle will make sure that the UI and the JS code stays synced, by evaluating every watcher attached to the all <code>$scope</code>s as long as nothing changes. If no more changes happen in the digest loop, then it's considered to be finished.\nYou can attach objects to the <code>$scope</code> object either explicitly in the Controller, or by declaring them in <code>{{expression}}</code> form directly in the view.</p>\n\n<p>Hope that helps to clarify some basic knowledge about all this.</p>\n\n<p>Further readings:</p>\n\n<ul>\n<li><a href=\"http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html\">http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html</a> (Awesome article!)</li>\n</ul>\n    "
}, {
    "t": "this vs $scope in AngularJS controllers",
    "l": "http://stackoverflow.com/questions/11605917/this-vs-scope-in-angularjs-controllers",
    "q": "\n\n<p>In the <a href=\"https://angularjs.org/#create-components\">\"Create Components\" section of AngularJS's homepage</a>, there is this example:</p>\n\n<pre><code>controller: function($scope, $element) {\n  var panes = $scope.panes = [];\n  $scope.select = function(pane) {\n    angular.forEach(panes, function(pane) {\n      pane.selected = false;\n    });\n    pane.selected = true;\n  }\n  this.addPane = function(pane) {\n    if (panes.length == 0) $scope.select(pane);\n    panes.push(pane);\n  }\n}\n</code></pre>\n\n<p>Notice how <code>select</code> method is added to <code>$scope</code>, but <code>addPane</code> method is added to <code>this</code>. If I change it to <code>$scope.addPane</code>, the code breaks.</p>\n\n<p>The docs say that there in fact is a difference but don't mention what the difference is:</p>\n\n<blockquote>\n  <p>Previous versions of Angular (pre 1.0 RC) allowed you to use <code>this</code> interchangeably with the <code>$scope</code> method, but this is no longer the case. Inside of methods defined on the scope <code>this</code> and <code>$scope</code> are interchangeable (angular sets <code>this</code> to <code>$scope</code>), but not otherwise inside your controller constructor.</p>\n</blockquote>\n\n<p>How does <code>this</code> and <code>$scope</code> work in AngularJS controllers?</p>\n    ",
    "a": "\n<blockquote>\n  <p>\"How does 'this' and $scope work in AngularJS controllers?\"</p>\n</blockquote>\n\n<p><strong>Short answer</strong>:</p>\n\n<ul>\n<li><code>this</code>\n<ul>\n<li>When the controller constructor function is called, <code>this</code> is the controller.</li>\n<li>When a function defined on a $scope object is called, <code>this</code> is the \"scope in effect when the function was called\".  This may (or may not!) be the $scope that the function is defined on.  So, inside the function, <code>this</code> and $scope may <strong>not</strong> be the same.</li>\n</ul></li>\n<li>$scope\n<ul>\n<li>Every controller has an associated $scope object.</li>\n<li>A controller (constructor) function is responsible for setting model properties and functions/behavior on its associated $scope.</li>\n<li>Only methods defined on this $scope object (and parent scope objects, if prototypical inheritance is in play) are accessible from the HTML/view.  E.g., from ng-click, filters, etc.</li>\n</ul></li>\n</ul>\n\n<p><strong>Long answer</strong>:</p>\n\n<p>A controller function is a JavaScript constructor function.  When the constructor function executes (e.g., when a view loads), <code>this</code> (i.e., the \"function context\") is set to the controller object. So in the \"tabs\" controller constructor function, when the addPane function is created</p>\n\n<pre><code>this.addPane = function(pane) { ... }\n</code></pre>\n\n<p>it is created on the controller object, not on $scope.  Views cannot see the addPane function -- they only have access to functions defined on $scope.  In other words, in the HTML, this won't work: <code>&lt;a ng-click=\"addPane(newPane)\"&gt;won't work&lt;/a&gt;</code>.</p>\n\n<p>After the \"tabs\" controller constructor function executes, we have the following:</p>\n\n<p><img src=\"http://i.stack.imgur.com/PUMuU.png\" alt=\"after tabs controller constructor function\"></p>\n\n<p>The dashed black line indicates prototypal inheritance -- an isolate scope prototypically inherits from <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope\">Scope</a>.  (It does not prototypically inherit from the scope in effect where the directive was encountered in the HTML.)</p>\n\n<p>Now, the pane directive's link function wants to communicate with the tabs directive (which really means it needs to affect the tabs isolate $scope in some way).  Events could be used, but another mechanism is to have the pane directive <code>require</code> the tabs controller.  (There appears to be no mechanism for the pane directive to <code>require</code> the tabs $scope.)</p>\n\n<p>So, this begs the question: if we only have access to the tabs controller, how do we get access to the tabs isolate $scope (which is what we really want)?</p>\n\n<p>Well, the red dotted line is the answer.  The addPane() function's \"scope\" (I'm referring to JavaScript's function scope/closures here) gives the function access to the tabs isolate $scope.  I.e., addPane() has access to the \"tabs IsolateScope\" in the diagram above because of a closure that was created when addPane() was defined.  (If we instead defined addPane() on the tabs $scope object, the pane directive would not have access to this function, and hence it would have no way to communicate with the tabs $scope.)</p>\n\n<p>To answer the other part of your question: <code>how does $scope work in controllers?</code>:</p>\n\n<p>Within functions defined on $scope, <code>this</code> is set to \"the $scope in effect where/when the function was called\".  Suppose we have the following HTML:</p>\n\n<pre><code>&lt;div ng-controller=\"ParentCtrl\"&gt;\n   &lt;a ng-click=\"logThisAndScope()\"&gt;log \"this\" and $scope&lt;/a&gt; - parent scope\n   &lt;div ng-controller=\"ChildCtrl\"&gt;\n      &lt;a ng-click=\"logThisAndScope()\"&gt;log \"this\" and $scope&lt;/a&gt; - child scope\n   &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And the ParentCtrl has</p>\n\n<pre><code>$scope.logThisAndScope = function() {\n    console.log(this, $scope)\n}\n</code></pre>\n\n<p>Clicking the first link will show that <code>this</code> and scope are the same, since \"the scope in effect when the function was called\" is the scope associated with the ParentCtrl.</p>\n\n<p>Clicking the second link will reveal <code>this</code> and scope are <strong>not</strong> the same, since \"the scope in effect when the function was called\" is the scope associated with the ChildCtrl.  So here, <code>this</code> is set to ChildCtrl's $scope.  Inside the method, $scope is still the ParentCtrl's $scope.</p>\n\n<p><a href=\"http://jsfiddle.net/mrajcok/sbZw7/\">Fiddle</a></p>\n\n<p>I try to not use <code>this</code> inside of a function defined on $scope, as it becomes confusing which $scope is being affected, especially considering that ng-repeat, ng-include, ng-switch, and directives can all create their own child scopes.</p>\n    "
}, {
    "t": "Complex nesting of partials and templates",
    "l": "http://stackoverflow.com/questions/12863663/complex-nesting-of-partials-and-templates",
    "q": "\n\n<p>My question involves how to go about dealing with complex nesting of <strong>templates</strong> (also called <strong>partials</strong>) in an AngularJS application.</p>\n\n<p>The best way to describe my situation is with an image I created:</p>\n\n<p><img src=\"http://i.stack.imgur.com/V17C3.png\" alt=\"AngularJS Page Diagram\"></p>\n\n<p>As you can see this has the potential to be a fairly complex application with lots of nested models.</p>\n\n<p>The application is single-page, so it loads an <strong>index.html</strong> that contains a div element in the DOM with the <code>ng-view</code> attribute.</p>\n\n<p><strong>For circle 1</strong>, You see that there is a Primary navigation that loads the appropriate templates into the <code>ng-view</code>.  I'm doing this by passing <code>$routeParams</code> to the main app module.  Here is an example of what's in my app:</p>\n\n<pre><code>angular.module('myApp', []).\n    config(['$routeProvider', function($routeProvider) {\n        $routeProvider.                     \n            when(\"/job/:jobId/zones/:zoneId\", { controller: JobDetailController, templateUrl: 'assets/job_list_app/templates/zone_edit.html' }).\n            when(\"/job/:jobId/initial_inspection\", { controller: JobDetailController, templateUrl: 'assets/job_list_app/templates/initial_inspection.html' }).\n            when(\"/job/:jobId/zones/:zoneId/rooms/:roomId\", { controller: JobDetailController, templateUrl: 'assets/job_list_app/templates/room_edit.html' })       \n\n    }]);\n</code></pre>\n\n<p><strong>In circle 2</strong>, the template that is loaded into the <code>ng-view</code> has an additional <strong>sub-navigation</strong>.  This sub-nav then needs to load templates into the area below it - but since ng-view is already being used, I'm not sure how to go about doing this.</p>\n\n<p>I know that I can include additional templates within the 1st template, but these templates are all going to be pretty complex.  I would like to keep all the templates separate in order to make the application easier to update and not have a dependency on the parent template having to be loaded in order to access its children.</p>\n\n<p><strong>In circle 3</strong>, you can see things get even more complex.  There is the potential that the sub-navigation templates will have a <strong>2nd sub-navigation</strong> that will need to load its own templates as well into the area in <strong>circle 4</strong></p>\n\n<p><strong>How does one go about structuring an AngularJS app to deal with such complex nesting of templates while keeping them all separate from one another?</strong></p>\n    ",
    "a": "\n<p>Well, since you can currently only have one ngView directive... I use nested directive controls. This allows you to set up templating and inherit (or isolate) scopes among them. Outside of that I use ng-switch or even just ng-show to choose which controls I'm displaying based on what's coming in from $routeParams.</p>\n\n<p><strong>EDIT</strong> Here's some example pseudo-code to give you an idea of what I'm talking about. With a nested sub navigation.</p>\n\n<p>Here's the main app page</p>\n\n<pre><code>&lt;!-- primary nav --&gt;\n&lt;a href=\"#/page/1\"&gt;Page 1&lt;/a&gt;\n&lt;a href=\"#/page/2\"&gt;Page 2&lt;/a&gt;\n&lt;a href=\"#/page/3\"&gt;Page 3&lt;/a&gt;\n\n&lt;!-- display the view --&gt;\n&lt;div ng-view&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Directive for the sub navigation</p>\n\n<pre><code>app.directive('mySubNav', function(){\n    return {\n        restrict: 'E',\n        scope: {\n           current: '=current'\n        },\n        templateUrl: 'mySubNav.html',\n        controller: function($scope) {\n        }\n    };\n});\n</code></pre>\n\n<p>template for the sub navigation</p>\n\n<pre><code>&lt;a href=\"#/page/1/sub/1\"&gt;Sub Item 1&lt;/a&gt;\n&lt;a href=\"#/page/1/sub/2\"&gt;Sub Item 2&lt;/a&gt;\n&lt;a href=\"#/page/1/sub/3\"&gt;Sub Item 3&lt;/a&gt;\n</code></pre>\n\n<p>template for a main page (from primary nav)</p>\n\n<pre><code>&lt;my-sub-nav current=\"sub\"&gt;&lt;/my-sub-nav&gt;\n\n&lt;ng-switch on=\"sub\"&gt;\n  &lt;div ng-switch-when=\"1\"&gt;\n      &lt;my-sub-area1&gt;&lt;/my-sub-area&gt;\n  &lt;/div&gt;\n  &lt;div ng-switch-when=\"2\"&gt;\n      &lt;my-sub-area2&gt;&lt;/my-sub-area&gt;\n  &lt;/div&gt;\n  &lt;div ng-switch-when=\"3\"&gt;\n      &lt;my-sub-area3&gt;&lt;/my-sub-area&gt;\n  &lt;/div&gt;\n&lt;/ng-switch&gt;\n</code></pre>\n\n<p>Controller for a main page. (from the primary nav)</p>\n\n<pre><code>app.controller('page1Ctrl', function($scope, $routeParams) {\n     $scope.sub = $routeParams.sub;\n});\n</code></pre>\n\n<p>Directive for a Sub Area</p>\n\n<pre><code>app.directive('mySubArea1', function(){\n    return {\n        restrict: 'E',\n        templateUrl: 'mySubArea1.html',\n        controller: function($scope) {\n            //controller for your sub area.\n        }\n    };\n});\n</code></pre>\n    "
}, {
    "t": "Prevent error $digest already in progress when calling $scope.$apply()",
    "l": "http://stackoverflow.com/questions/12729122/prevent-error-digest-already-in-progress-when-calling-scope-apply",
    "q": "\n\n<p>I'm finding that I need to update the my page to my scope manually more and more since building an application in angular. The only way I know of to do this is to call <code>$apply()</code> from the scope of my controllers and directives. The problem with this is that it keeps throwing an error to the console that reads </p>\n\n<blockquote>\n  <p>Error: $digest already in progress</p>\n</blockquote>\n\n<p>Does anyone know how to avoid this error or achieve the same thing but a different way?</p>\n    ",
    "a": "\n<p>You can check if a $digest is already in progress by checking $scope.$$phase. </p>\n\n<pre><code>if(!$scope.$$phase) {\n  //$digest or $apply\n}\n</code></pre>\n\n<p>$scope.$$phase will return \"$digest\" or \"$apply\" if a $digest or $apply is in progress. I believe the difference between these states is that $digest will process the watches of the current scope and it's children, and $apply will process the watchers of all scopes.</p>\n\n<p>To dnc253's point, if you find yourself calling $digest or $apply frequently, you may be doing it wrong. I generally find I need to digest when I need to update the scope's state as a result of a DOM event firing outside the reach of angular. For example, when a twitter bootstrap modal becomes hidden. Sometimes the DOM event fires when a $digest is in progress, sometimes not. That's why I use this check. </p>\n\n<p>I would love to know a better way if anyone knows one.</p>\n\n<hr>\n\n<p>From comments: \nby @anddoutoi</p>\n\n<p><a href=\"https://github.com/angular/angular.js/wiki/Anti-Patterns\">angular.js Anti Patterns</a></p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>Don't do <code>if (!$scope.$$phase) $scope.$apply()</code>, it means your <code>$scope.$apply()</code> isn't high enough in the call stack.</li>\n  </ol>\n</blockquote>\n    "
}, {
    "t": "What is the difference between Polymer elements and AngularJS directives?",
    "l": "http://stackoverflow.com/questions/18089075/what-is-the-difference-between-polymer-elements-and-angularjs-directives",
    "q": "\n\n<p>On the Polymer <a href=\"http://www.polymer-project.org/docs/start/usingelements.html\">Getting Started</a> page, we see an example of Polymer in action:</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;!-- 1. Shim missing platform features --&gt;\n    &lt;script src=\"polymer-all/platform/platform.js\"&gt;&lt;/script&gt;\n    &lt;!-- 2. Load a component --&gt;\n    &lt;link rel=\"import\" href=\"x-foo.html\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- 3. Declare the component by its tag. --&gt;\n    &lt;x-foo&gt;&lt;/x-foo&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>What you will notice is <code>&lt;x-foo&gt;&lt;/x-foo&gt;</code> being defined by <code>platform.js</code> and <code>x-foo.html</code>.</p>\n\n<p>It seems like this is the equivalent to a directive module in AngularJS:</p>\n\n<pre><code>angular.module('xfoo', [])\n.controller('X-Foo', ['$scope',function($scope) {\n    $scope.text = 'hey hey!';\n})\n.directive('x-foo', function() {\n    return {\n        restrict: 'EA',\n        replace: true,\n        controller: 'X-Foo',\n        templateUrl: '/views/x-foo.html',\n        link: function(scope, controller) {\n        }\n    };\n});\n</code></pre>\n\n<ul>\n<li><p>What is the difference between the two?</p></li>\n<li><p>What problems does Polymer solve that AngularJS has not or will not?</p></li>\n<li><p>Are there plans to tie Polymer in with AngularJS in the future?</p></li>\n</ul>\n    ",
    "a": "\n<p>You're not the first to ask this question :) Let me clarify a couple of things before getting to your questions.</p>\n\n<ol>\n<li><p>Polymer's <code>webcomponents.js</code> is a library that contains several polyfills for various W3C APIs that fall under the Web Components umbrella. These are:</p>\n\n<ul>\n<li>Custom Elements</li>\n<li>HTML Imports</li>\n<li><code>&lt;template&gt;</code></li>\n<li>Shadow DOM</li>\n<li>Pointer Events</li>\n<li>others</li>\n</ul>\n\n<p>The left-nav in the documentation (<a href=\"http://www.polymer-project.org/\">polymer-project.org</a>) has a page for all of these \"Platform technologies\". Each of those pages also has a pointer to the individual polyfill.</p></li>\n<li><p><code>&lt;link rel=\"import\" href=\"x-foo.html\"&gt;</code> is an HTML Import. Imports are a useful tool for including HTML in other HTML. You can include <code>&lt;script&gt;</code>, <code>&lt;link&gt;</code>, markup, or whatever else in an import.</p></li>\n<li><p>Nothing \"links\" <code>&lt;x-foo&gt;</code> to x-foo.html. In your example, it's assumed the Custom Element definition of <code>&lt;x-foo&gt;</code> (e.g. <code>&lt;element name=\"x-foo\"&gt;</code>) is defined in x-foo.html. When the browser sees that definition, it's registered as a new element.</p></li>\n</ol>\n\n<p>On to questions!</p>\n\n<p><strong>What is the difference between Angular and Polymer?</strong></p>\n\n<p>We covered some of this in our <a href=\"http://www.youtube.com/watch?v=irGDN5Ysi_A&amp;t=21m45s\">Q&amp;A video</a>. In general, Polymer is a framework that aims to use (and show how to use) Web Components. It's foundation is Custom Elements (e.g. everything you build is a web component) and it evolves as the web evolves. To that end, we only support the latest version of the modern browsers.</p>\n\n<p>I'll use this image to describe Polymer's entire architecture stack:</p>\n\n<p><img src=\"http://i.stack.imgur.com/Ksn6s.png\" alt=\"enter image description here\"></p>\n\n<p>RED layer: We get tomorrow's web through a set of polyfills. Keep in mind, those libraries go away over time as browsers adopt the new APIs.</p>\n\n<p>YELLOW layer: Sprinkle in some sugar with polymer.js. This layer is our opinion on how to use the spec'd APIs, together. It also adds things like data-binding, syntatic sugar, change watchers, published properties...We think these things are helpful for building web component-based apps.</p>\n\n<p>GREEN: The comprehensive set of UI components (green layer) is still in progress. These will be web components that use all of the red + yellow layers.</p>\n\n<p><strong>Angular directives vs. Custom Elements?</strong></p>\n\n<p>See Alex Russell's <a href=\"https://groups.google.com/forum/?fromgroups=#!searchin/polymer-dev/angular/polymer-dev/s761szb9WJc/Lb29XuoJdqAJ\">answer</a>. Basically, Shadow DOM allows composing bits of HTML but also is a tool for encapsulating that HTML. This is fundamentally a new concept on the web and something other frameworks will leverage.</p>\n\n<p><strong>What problems does Polymer solve that AngularJS has not or will not?</strong></p>\n\n<p>Similarities: declarative templates, data binding. </p>\n\n<p>Differences: Angular has high level APIs for services, filters, animations, etc., supports IE8, and at this point, is a much more robust framework for building production apps. Polymer is just starting out in alpha.</p>\n\n<p><strong>Are there plans to tie Polymer in with AngularJS in the future?</strong></p>\n\n<p>They're <a href=\"http://www.polymer-project.org/resources/faq.html#frameworks\">separate projects</a>. That said, both the Angular and Ember teams <a href=\"https://groups.google.com/forum/#!msg/polymer-dev/4RSYaKmbtEk/uYnY3900wpIJ\">announced</a> they'll eventually move to using the underlying platform APIs in their own frameworks.</p>\n\n<p>^ This is a huge win IMO. In a world where web developers have powerful tools (Shadow DOM, Custom Elements), framework authors also can utilize these primitives to create better frameworks. Most of them currently go through great hoops to \"get the job done\".</p>\n\n<p>UPDATE:</p>\n\n<p>There's a really great article on this topic: \"<a href=\"http://www.binpress.com/blog/2014/06/26/polymer-vs-angular/\">Here’s the difference between Polymer and Angular</a>\"</p>\n    "
}, {
    "t": "How do search engines deal with AngularJS applications?",
    "l": "http://stackoverflow.com/questions/13499040/how-do-search-engines-deal-with-angularjs-applications",
    "q": "\n\n<p>I see two issues with AngularJS application regarding search engines and SEO:</p>\n\n<p>1) What happens with custom tags? Do search engines ignore the whole content within those tags? i.e. suppose I have</p>\n\n<pre><code>&lt;custom&gt;\n  &lt;h1&gt;Hey, this title is important&lt;/h1&gt;\n&lt;/custom&gt;\n</code></pre>\n\n<p>would <code>&lt;h1&gt;</code> be indexed despite being inside custom tags?</p>\n\n<p><br></p>\n\n<p>2) Is there a way to avoid search engines of indexing {{}} binds literally? i.e.</p>\n\n<pre><code>&lt;h2&gt;{{title}}&lt;/h2&gt;\n</code></pre>\n\n<p>I know I could do something like</p>\n\n<pre><code>&lt;h2 ng-bind=\"title\"&gt;&lt;/h2&gt;\n</code></pre>\n\n<p>but what if I want to actually let the crawler \"see\" the title? Is server-side rendering the only solution?</p>\n    ",
    "a": "\n<p>If you want to optimize your app for search engines there is unfortunately no way around serving a pre-rendered version to the crawler. You can read more about Google's recommendations for ajax and javascript-heavy sites <a href=\"https://developers.google.com/webmasters/ajax-crawling/docs/html-snapshot\">here</a>.</p>\n\n<p>If this is an option I'd recommend reading <a href=\"http://www.yearofmoo.com/2012/11/angularjs-and-seo.html\">this article</a> about how to do SEO for Angular with server-side rendering. </p>\n\n<p>I’m not sure what the crawler does when it encounters custom tags.</p>\n\n<p><strong>Update May 2014</strong></p>\n\n<p>Google crawlers <a href=\"http://googlewebmastercentral.blogspot.no/2014/05/understanding-web-pages-better.html\">now executes javascript</a> - you can use the <a href=\"https://www.google.com/webmasters/tools/home\">Google Webmaster Tools</a> to better understand how your sites are rendered by Google.</p>\n    "
}, {
    "t": "Does it make sense to use Require.js with Angular.js? [closed]",
    "l": "http://stackoverflow.com/questions/12529083/does-it-make-sense-to-use-require-js-with-angular-js",
    "q": "\n\n<p>I'm a newbie to Angular.js and trying to understand how it's different from Backbone.js... We used to manage our packages dependencies with Require.js while using Backbone. Does it make sense to do the same with Angular.js?</p>\n    ",
    "a": "\n<p>Yes it makes sense to use <code>angular.js</code> along with <code>require.js</code> wherein you can use <code>require.js</code> for modularizing components.<br></p>\n\n<p>I can point you to a <a href=\"https://github.com/tnajdek/angular-requirejs-seed\">seed project</a> which uses <code>both angular.js and require.js</code>. Hope that helps! </p>\n    "
}, {
    "t": "What is the difference between '@' and '=' in directive scope",
    "l": "http://stackoverflow.com/questions/14050195/what-is-the-difference-between-and-in-directive-scope",
    "q": "\n\n<p>I've read the AngularJS documentation on the topic carefully, and then fiddled around with a directive. Here's the <a href=\"http://jsfiddle.net/iweinfuld/7g3QM/3/\">fiddle</a>.</p>\n\n<p>And here are some relevant snippets:</p>\n\n<ul>\n<li><p>from the html:</p>\n\n<pre><code>&lt;pane bi-title=\"title\" title=\"{{title}}\"&gt;{{text}}&lt;/pane&gt;\n</code></pre></li>\n<li><p>from the pane directive: </p>\n\n<pre><code>scope: { biTitle: '=', title: '@', bar: '=' },\n</code></pre></li>\n</ul>\n\n<p>There are several things I don't get:</p>\n\n<ul>\n<li>why do I have to use \"{{title}}\" with '@' and \"title\" with '='?</li>\n<li>can I also access the parent scope directly, without decorating my element with an attribute?</li>\n<li>The documentation says <em>\"Often it's desirable to pass data from the isolated scope via an expression and to the parent scope\"</em>, but that seems to work fine with bidirectional binding too. Why would the expression route be better?</li>\n</ul>\n\n<p>I found another fiddle that shows the expression solution too: <a href=\"http://jsfiddle.net/maxisam/QrCXh/\">http://jsfiddle.net/maxisam/QrCXh/</a></p>\n    ",
    "a": "\n<blockquote>\n  <p>why do I have to use \"{{title}}\" with '@' and \"title\" with '='?</p>\n</blockquote>\n\n<p>@ binds a local/directive scope property to the <strong>evaluated value of the DOM attribute</strong>.  If you use <code>title=title1</code> or <code>title=\"title1\"</code>, the value of DOM attribute \"title\" is simply the string <code>title1</code>.  If you use <code>title=\"{{title}}\"</code>, the value of the DOM attribute \"title\" is the interpolated value of <code>{{title}}</code>, hence the string will be whatever parent scope property \"title\" is currently set to.  Since attribute values are always strings, you will always end up with a string value for this property in the directive's scope when using @.</p>\n\n<p>= binds a local/directive scope property to <strong>a parent scope property</strong>.  So with =, you use the parent model/scope property name as the value of the DOM attribute.  You can't use <code>{{}}</code>s with =.</p>\n\n<p>With @, you can do things like <code>title=\"{{title}} and then some\"</code> -- {{title}} is interpolated, then the string \"and them some\" is concatenated with it.  The final concatenated string is what the local/directive scope property gets.  (You can't do this with =, only @.)</p>\n\n<p>With @, you will need to use <code>attr.$observe('title', function(value) { ... })</code> if you need to use the value in your link(ing) function.  E.g., <code>if(scope.title == \"...\")</code> won't work like you expect.  Note that this means you can only access this attribute <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Directives\"><em>asynchronously</em></a>.\nYou don't need to use $observe() if you are only using the value in a template.  E.g., <code>template: '&lt;div&gt;{{title}}&lt;/div&gt;'</code>.</p>\n\n<p>With =, you don't need to use $observe.</p>\n\n<blockquote>\n  <p>can I also access the parent scope directly, without decorating my element with an attribute?</p>\n</blockquote>\n\n<p>Yes, but only if you don't use an isolate scope.  Remove this line from your directive -- <code>scope: { ... }</code> -- and then your directive will not create a new scope.  It will use the parent scope.  You can then access all of the parent scope properties directly.</p>\n\n<blockquote>\n  <p>The documentation says \"Often it's desirable to pass data from the isolated scope via an expression and to the parent scope\", but that seems to work fine with bidirectional binding too. Why would the expression route be better?</p>\n</blockquote>\n\n<p>Yes, bidirectional binding allows the local/directive scope and the parent scope to share data.  \"Expression binding\" allows the directive to call an expression (or function) defined by a DOM attribute -- and you can also pass data as arguments to the expression or function.  So, if you don't need to share data with the parent -- you just want to call a function defined in the parent scope -- you can use the &amp; syntax.</p>\n\n<p>See also</p>\n\n<ul>\n<li><a href=\"http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/\">Lukas's isolated scope blog post</a> (covers @, =, &amp;)</li>\n<li><a href=\"http://stackoverflow.com/questions/13032621/need-some-examples-of-binding-attributes-in-custom-angularjs-tags/13033249#13033249\">dnc253's explanation</a> of @ and =</li>\n<li><a href=\"http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs/14049482#14049482\">my blog-like answer</a> about scopes -- the <strong>directives</strong> section (way at the bottom, just before the Summary section) has a picture of an isolate scope and its parent scope -- the directive scope uses @ for one property and = for another</li>\n<li><a href=\"http://stackoverflow.com/questions/14908133/what-is-the-difference-between-vs-and-in-angularjs\">What is the difference between &amp; vs @ and = in angularJS</a></li>\n</ul>\n    "
}, {
    "t": "How to set the value property in AngularJS' ng-options?",
    "l": "http://stackoverflow.com/questions/12139152/how-to-set-the-value-property-in-angularjs-ng-options",
    "q": "\n\n<p>Here is what seems to be bothering a lot of people (including me).\nWhen using the <code>ng-options</code> directive in AngluarJS to fill in the options for a <code>&lt;select&gt;</code> tag I cannot figure out how to set the value for an option. The documentation for this is really unclear - at least for a simpleton like me. </p>\n\n<p>I can set the text for an option easily like so: </p>\n\n<pre><code>ng-options=\"select p.text for p in resultOptions\"\n</code></pre>\n\n<p>when <code>resultOptions</code> is for example: </p>\n\n<pre><code>[\n    {\n        \"value\": 1,\n        \"text\": \"1st\"\n    },\n    {\n        \"value\": 2,\n        \"text\": \"2nd\"\n    }\n]\n</code></pre>\n\n<p>Should be (and probably is) the most simple thing to set the option values, but so far I just don't get it.</p>\n    ",
    "a": "\n<blockquote>\n  <p><a href=\"http://docs.angularjs.org/api/ng.directive:select\">http://docs.angularjs.org/api/ng.directive:select</a></p>\n  \n  <p><strong>ngOptions(optional)</strong> – {<code>comprehension_expression=</code>} – in one of the\n  following forms: </p>\n  \n  <p><em>for array data sources</em>:<br>\n  <code>label for value in array</code><br>\n  <code>select as label for value in array</code><br>\n  <code>label group by group for value in array</code><br>\n  <code>select as label group by group for value in array track by trackexpr</code><br>\n  <em>for object data sources:</em><br>\n  <code>label for (key , value) in object</code><br>\n  <code>select as label for (key , value) in object</code><br>\n  <code>label group by group for (key, value) in object</code><br>\n  <code>select as label group by group for (key, value) in object</code></p>\n</blockquote>\n\n<p>In your case, it should be</p>\n\n<pre><code>array = [{ \"value\": 1, \"text\": \"1st\" }, { \"value\": 2, \"text\": \"2nd\" }];\n\n&lt;select ng-options=\"obj.value as obj.text for obj in array\"&gt;&lt;/select&gt;\n</code></pre>\n\n<h2>Update</h2>\n\n<p>With the updates on Angular, it is now possible to set the actual value for the <code>value</code> attribute of <code>select</code> element with <code>track by</code> expression.</p>\n\n<pre><code>&lt;select ng-options=\"obj.text for obj in array track by obj.value\"&gt;\n&lt;/select&gt;\n</code></pre>\n\n<h2>How to remember this ugly stuff</h2>\n\n<p>To all the people who are having hard time to remember this syntax form: I agree this isn't the most easiest or beautiful syntax. This syntax is kind of an extended version of Python's list comprehensions and knowing that helps me to remember the syntax very easily. It's something like this:</p>\n\n<p>Python code:</p>\n\n<pre><code>my_list = [x**2 for x in [1, 2, 3, 4, 5]]\n&gt; [1, 4, 9, 16, 25]\n# let people to be a list of person instances\nmy_list2 = [person.name for person in people]\n&gt; my_list2 = ['Alice', 'Bob']\n</code></pre>\n\n<p>This is actually the same syntax as the first one listed above. However, in <code>&lt;select&gt;</code> we usually need to differentiate between the actual value in code and the text shown (the label) in a <code>&lt;select&gt;</code> element. Like, we need <code>person.id</code> in the code but we don't want to show the <code>id</code> to the user, we want to show its name. Likewise, we're not interested in the <code>person.name</code> in the code. There comes <code>as</code> keyword to label stuff. So it becomes like this:</p>\n\n<pre><code>person.id as person.name for person in people\n</code></pre>\n\n<p>Or, instead of <code>person.id</code> we could need the <code>person</code> instance/reference itself. See below:</p>\n\n<pre><code>person as person.name for person in people\n</code></pre>\n\n<p>For JS objects, the same method applies as well, just remember that the items in the object is deconstructed with <code>(key, value)</code> pairs.</p>\n    "
}, {
    "t": "How can I post data as form data instead of a request payload?",
    "l": "http://stackoverflow.com/questions/11442632/how-can-i-post-data-as-form-data-instead-of-a-request-payload",
    "q": "\n\n<p>In the code below, the AngularJS <code>$http</code> method calls the URL, and submits the xsrf object as a \"Request Payload\" (as described in the Chrome debugger network tab). The jQuery <code>$.ajax</code> method does the same call, but submits xsrf as \"Form Data\".</p>\n\n<p>How can I make AngularJS submit xsrf as form data instead of a request payload?</p>\n\n<pre><code>var url = 'http://somewhere.com/';\nvar xsrf = {fkey: 'xsrf key'};\n\n$http({\n    method: 'POST',\n    url: url,\n    data: xsrf\n}).success(function () {});\n\n$.ajax({\n    type: 'POST',\n    url: url,\n    data: xsrf,\n    dataType: 'json',\n    success: function() {}\n});\n</code></pre>\n    ",
    "a": "\n<p>The following line needs to be added to the $http object that is passed:</p>\n\n<pre><code>headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n</code></pre>\n\n<p>And the data passed should be converted to a URL-encoded string:</p>\n\n<pre><code>&gt; $.param({fkey: \"key\"})\n'fkey=key'\n</code></pre>\n\n<p>So you have something like:</p>\n\n<pre><code>$http({\n    method: 'POST',\n    url: url,\n    data: $.param({fkey: \"key\"}),\n    headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n})\n</code></pre>\n\n<p>From: <a href=\"https://groups.google.com/forum/#!msg/angular/5nAedJ1LyO0/4Vj_72EZcDsJ\">https://groups.google.com/forum/#!msg/angular/5nAedJ1LyO0/4Vj_72EZcDsJ</a></p>\n    "
}, {
    "t": "How to set focus on input field?",
    "l": "http://stackoverflow.com/questions/14833326/how-to-set-focus-on-input-field",
    "q": "\n\n<p>What is the 'Angular way' to set focus on input field in AngularJS?</p>\n\n<p>More specific requirements:</p>\n\n<ol>\n<li>When a <a href=\"http://angular-ui.github.com/bootstrap/#modal\">Modal</a> is opened, set focus on a predefined <code>&lt;input&gt;</code> inside this Modal.</li>\n<li>Everytime <code>&lt;input&gt;</code> becomes visible (e.g. by clicking some button), set focus on it.</li>\n</ol>\n\n<p><a href=\"http://plnkr.co/edit/XL1NP0?p=preview\">I tried to achieve the first requirement</a> with <code>autofocus</code>, but this works only when the Modal is opened for the first time, and only in certain browsers (e.g. in Firefox it doesn't work).</p>\n\n<p>Any help will be appreciated.</p>\n    ",
    "a": "\n<blockquote>\n  <ol>\n  <li>When a Modal is opened, set focus on a predefined &lt;input&gt; inside this Modal.</li>\n  </ol>\n</blockquote>\n\n<p>Define a directive and have it $watch a property/trigger so it knows when to focus the element:</p>\n\n<pre><code>Name: &lt;input type=\"text\" focus-me=\"shouldBeOpen\"&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>app.directive('focusMe', function($timeout, $parse) {\n  return {\n    //scope: true,   // optionally create a child scope\n    link: function(scope, element, attrs) {\n      var model = $parse(attrs.focusMe);\n      scope.$watch(model, function(value) {\n        console.log('value=',value);\n        if(value === true) { \n          $timeout(function() {\n            element[0].focus(); \n          });\n        }\n      });\n      // to address @blesh's comment, set attribute value to 'false'\n      // on blur event:\n      element.bind('blur', function() {\n         console.log('blur');\n         scope.$apply(model.assign(scope, false));\n      });\n    }\n  };\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/LbHRBB?p=preview\">Plunker</a></p>\n\n<p>The $timeout seems to be needed to give the modal time to render.</p>\n\n<blockquote>\n  <p>'2.' Everytime &lt;input&gt; becomes visible (e.g. by clicking some button), set focus on it.</p>\n</blockquote>\n\n<p>Create a directive essentially like the one above.  Watch some scope property, and when it becomes true (set it in your ng-click handler), execute <code>element[0].focus()</code>.  Depending on your use case, you may or may not need a $timeout for this one:</p>\n\n<pre><code>&lt;button class=\"btn\" ng-click=\"showForm=true; focusInput=true\"&gt;show form and\n focus input&lt;/button&gt;\n&lt;div ng-show=\"showForm\"&gt;\n  &lt;input type=\"text\" ng-model=\"myInput\" focus-me=\"focusInput\"&gt; {{ myInput }}\n  &lt;button class=\"btn\" ng-click=\"showForm=false\"&gt;hide form&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>app.directive('focusMe', function($timeout) {\n  return {\n    link: function(scope, element, attrs) {\n      scope.$watch(attrs.focusMe, function(value) {\n        if(value === true) { \n          console.log('value=',value);\n          //$timeout(function() {\n            element[0].focus();\n            scope[attrs.focusMe] = false;\n          //});\n        }\n      });\n    }\n  };\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/V8PSie?p=preview\">Plunker</a></p>\n\n<hr>\n\n<p><strong>Update 7/2013</strong>:  I've seen a few people use my original isolate scope directives and then have problems with embedded input fields (i.e., an input field in the modal).  A directive with no new scope (or possibly a new child scope) should alleviate some of the pain.  So above I updated the answer to not use isolate scopes.  Below is the original answer:</p>\n\n<p>Original answer for 1., using an isolate scope:</p>\n\n<pre><code>Name: &lt;input type=\"text\" focus-me=\"{{shouldBeOpen}}\"&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>app.directive('focusMe', function($timeout) {\n  return {\n    scope: { trigger: '@focusMe' },\n    link: function(scope, element) {\n      scope.$watch('trigger', function(value) {\n        if(value === \"true\") { \n          $timeout(function() {\n            element[0].focus(); \n          });\n        }\n      });\n    }\n  };\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/6kHuj0?p=preview\">Plunker</a>.</p>\n\n<p>Original answer for 2., using an isolate scope:</p>\n\n<pre><code>&lt;button class=\"btn\" ng-click=\"showForm=true; focusInput=true\"&gt;show form and\n focus input&lt;/button&gt;\n&lt;div ng-show=\"showForm\"&gt;\n  &lt;input type=\"text\" focus-me=\"focusInput\"&gt;\n  &lt;button class=\"btn\" ng-click=\"showForm=false\"&gt;hide form&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>app.directive('focusMe', function($timeout) {\n  return {\n    scope: { trigger: '=focusMe' },\n    link: function(scope, element) {\n      scope.$watch('trigger', function(value) {\n        if(value === true) { \n          //console.log('trigger',value);\n          //$timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          //});\n        }\n      });\n    }\n  };\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/gmaQCl?p=preview\">Plunker</a>.</p>\n\n<p>Since we need to reset the trigger/focusInput property in the directive, '=' is used for two-way databinding.  In the first directive, '@' was sufficient.  Also note that when using '@' we compare the trigger value to \"true\" since @ always results in a string.</p>\n    "
}, {
    "t": "Difference between angular-route and angular-ui-router",
    "l": "http://stackoverflow.com/questions/21023763/difference-between-angular-route-and-angular-ui-router",
    "q": "\n\n<p>I am new to AngularJS. I find Angular quite interesting and planning to use angular in my big apps. So I am in the process to find out the right modules to use.</p>\n\n<p>What is the difference between <strong>ngRoute (angular-route.js)</strong> and <strong>ui-router (angular-ui-router.js)</strong> modules?</p>\n\n<p>In many articles when <em>ngRoute</em> is used, route is configured with <strong><em>$routeProvider</em></strong>. However, when used with <em>ui-router</em>, route is configured with <strong><em>$stateProvider and $urlRouterProvider</em></strong>. </p>\n\n<p>This creates a bit of confusion for me. Which module should I use for better manageability and extensibility? Your answers are greatly appreciated. </p>\n    ",
    "a": "\n<p><a href=\"https://github.com/angular-ui/ui-router\">ui-router</a> is a 3rd-party module and is very powerful.  It supports everything the normal ngRoute can do as well as many extra functions.</p>\n\n<p>Here are some common reason ui-router is chosen over ngRoute:</p>\n\n<ul>\n<li><p>ui-router allows for <a href=\"https://github.com/angular-ui/ui-router/wiki/Nested-States-%26-Nested-Views\">nested views</a> and <a href=\"https://github.com/angular-ui/ui-router/wiki/Multiple-Named-Views\">multiple named views</a>.  This is very useful with larger app where you may have pages that inherit from other sections.</p></li>\n<li><p>ui-router allows for you to have strong-type linking between states based on state names.  Change the url in one place will update every link to that state when you build your links with <a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-sref\"><code>ui-sref</code></a>. Very useful for larger projects where URLs might change.</p></li>\n<li><p>There is also the concept of the <a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.$stateProvider#methods_decorator\">decorator</a> which could be used to allow your routes to be dynamically created based on the URL that is trying to be accessed. This could mean that you will not need to specify all of your routes before hand.</p></li>\n<li><p><a href=\"https://github.com/angular-ui/ui-router/wiki#state-manager\">states</a> allow you to map and access different information about different states and you can easily pass information between states via <a href=\"https://github.com/angular-ui/ui-router/wiki/URL-Routing#stateparams-service\"><code>$stateParams</code></a>.</p></li>\n<li><p>You can easily determine if you are in a state or parent of a state to adjust UI element (highlighting the navigation of the current state) within your templates via <a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.$state\"><code>$state</code></a> provided by ui-router which you can expose via setting it in <code>$rootScope</code> on <code>run</code>.</p></li>\n</ul>\n\n<p>In essence, ui-router is ngRouter with more features, under the sheets it is quite different. These additional features are very useful for larger applications.</p>\n\n<p>More Information:</p>\n\n<ul>\n<li>Github: <a href=\"https://github.com/angular-ui/ui-router\">https://github.com/angular-ui/ui-router</a></li>\n<li>Documentation:\n<ul>\n<li>API Reference: <a href=\"http://angular-ui.github.io/ui-router/site/#/api\">http://angular-ui.github.io/ui-router/site/#/api</a></li>\n<li>Guide: <a href=\"https://github.com/angular-ui/ui-router/wiki\">https://github.com/angular-ui/ui-router/wiki</a></li>\n</ul></li>\n<li>FAQs: <a href=\"https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions\">https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions</a></li>\n<li>Sample Application: <a href=\"http://angular-ui.github.io/ui-router/sample/#/\">http://angular-ui.github.io/ui-router/sample/#/</a> </li>\n</ul>\n    "
}, {
    "t": "Insert HTML into view using AngularJS",
    "l": "http://stackoverflow.com/questions/9381926/insert-html-into-view-using-angularjs",
    "q": "\n\n<p>Is it possible to create an HTML fragment in an Angular controller and have this HTML shown in the view?</p>\n\n<p>This comes from a requirement to turn an inconsistent JSON blob into a nested list of <code>id : value</code> pairs. Therefore the HTML is created in the controller and I am now looking to display it.</p>\n\n<p>I have created a model property, but cannot render this in the view without it just printing the HTML.</p>\n\n<hr>\n\n<p>Update</p>\n\n<p>It appears that the problem arises from angular rendering the created HTML as a string within quotes. Will attempt to find a way around this.</p>\n\n<p>Example controller :</p>\n\n<pre><code>var SomeController = function () {\n\n    this.customHtml = '&lt;ul&gt;&lt;li&gt;render me please&lt;/li&gt;&lt;/ul&gt;';\n}\n</code></pre>\n\n<p>Example view :</p>\n\n<pre><code>&lt;div ng:bind=\"customHtml\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Gives :</p>\n\n<pre><code>&lt;div&gt;\n    \"&lt;ul&gt;&lt;li&gt;render me please&lt;/li&gt;&lt;/ul&gt;\"\n&lt;/div&gt;\n</code></pre>\n    ",
    "a": "\n<p>Swaff's answer was correct as of that date but that doesn't work anymore; now you use:</p>\n\n<p>For Angular 1.3, use <code>ng-bind-html</code> in the HTML:</p>\n\n<pre><code>&lt;div ng-bind-html=\"thisCanBeusedInsideNgBindHtml\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>and use <code>$sce.trustAsHtml()</code> in the controller to convert the html string.</p>\n\n<pre><code> $scope.thisCanBeusedInsideNgBindHtml = $sce.trustAsHtml(someHtmlVar);\n</code></pre>\n\n<p>UPDATE 2: as Sasha points out, for Angular 1.2, use:</p>\n\n<pre><code>&lt;div ng-bind-html=\"expression\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>UPDATE: as Damax pointed out, now use:</p>\n\n<pre><code>&lt;div ng-bind-html-unsafe=\"expression\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>OLD WAY:</p>\n\n<pre><code>&lt;div ng-bind-html=\"expression\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>&lt;div&gt;{{expression}}&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"https://github.com/angular/angular.js/blob/master/CHANGELOG.md\">https://github.com/angular/angular.js/blob/master/CHANGELOG.md</a> (scroll down / search for \"ng-bind-html\" in this page to see details of the change)</p>\n\n<p>ALSO, this now requires the \"ngSanitize\" module (I got hung up on this for awhile and couldn't figure out why it wasn't working - and the documentation doesn't seem clear on how to include this module). There's 2 steps:</p>\n\n<ol>\n<li><p>include the angular-sanitize.min.js resource, i.e.:<br>\n<code>&lt;script src=\"lib/angular/angular-sanitize.min.js\"&gt;&lt;/script&gt;</code></p></li>\n<li><p>In a js file (controller or usually app.js), include ngSanitize, i.e.:<br>\n<code>angular.module('myApp', ['myApp.filters', 'myApp.services', 'myApp.directives', 'ngSanitize'])</code></p></li>\n</ol>\n    "
}, {
    "t": "confused about service vs factory",
    "l": "http://stackoverflow.com/questions/13762228/confused-about-service-vs-factory",
    "q": "\n\n<p>As I understand it, when inside a factory I return a object that gets injected into a controller. When inside a service I am dealing with the object using <code>this</code> and not returning anything. </p>\n\n<p>I was under the assumption that a service was <em>always a singleton</em>, and that a <strong>new factory object</strong> gets injected in every controller. However as it turns out, a factory object is a singleton too?</p>\n\n<p>Example code to demonstrate:</p>\n\n<pre><code>var factories = angular.module('app.factories', []);\nvar app = angular.module('app',  ['ngResource', 'app.factories']);\n\nfactories.factory('User', function () {\n  return {\n    first: 'John',\n    last: 'Doe'\n  };\n});\n\napp.controller('ACtrl', function($scope, User) {\n  $scope.user = User;\n});\n\napp.controller('BCtrl', function($scope, User) {\n  $scope.user = User;\n});\n</code></pre>\n\n<p>When changing <code>user.first</code> in <code>ACtrl</code> it turns out that <code>user.first</code> in <code>BCtrl</code> is also changed, e.g. <code>User</code> is a singleton? </p>\n\n<p>My assumption was that a new instance was injected in a controller with a factory?</p>\n    ",
    "a": "\n<p><strong>All angular services are singletons</strong>:</p>\n\n<p>Docs (see <em>Services as singletons</em>): <a href=\"https://docs.angularjs.org/guide/services\">https://docs.angularjs.org/guide/services</a></p>\n\n<blockquote>\n  <p>Lastly, it is important to realize that all Angular services are application singletons. This means that there is only one instance of a given service per injector. </p>\n</blockquote>\n\n<p>Basically the difference between the service and factory is as follows:</p>\n\n<pre><code>app.service('myService', function() {\n\n  // service is just a constructor function\n  // that will be called with 'new'\n\n  this.sayHello = function(name) {\n     return \"Hi \" + name + \"!\";\n  };\n});\n\napp.factory('myFactory', function() {\n\n  // factory returns an object\n  // you can run some code before\n\n  return {\n    sayHello : function(name) {\n      return \"Hi \" + name + \"!\";\n    }\n  }\n});\n</code></pre>\n\n<p>Check out this presentation about $provide: <a href=\"http://slides.wesalvaro.com/20121113/#/\">http://slides.wesalvaro.com/20121113/#/</a></p>\n\n<p>Those slides were used in one of the AngularJs meetups: <a href=\"http://blog.angularjs.org/2012/11/more-angularjs-meetup-videos.html\">http://blog.angularjs.org/2012/11/more-angularjs-meetup-videos.html</a></p>\n    "
}, {
    "t": "Redirecting to a certain route based on condition",
    "l": "http://stackoverflow.com/questions/11541695/redirecting-to-a-certain-route-based-on-condition",
    "q": "\n\n<p>I'm writing a small AngularJS app that has a login view and a main view, configured like so:</p>\n\n<pre><code>$routeProvider\n .when('/main' , {templateUrl: 'partials/main.html',  controller: MainController})\n .when('/login', {templateUrl: 'partials/login.html', controller: LoginController})\n .otherwise({redirectTo: '/login'});\n</code></pre>\n\n<p>My LoginController checks the user/pass combination and sets a property on the $rootScope reflecting this:</p>\n\n<pre><code>function LoginController($scope, $location, $rootScope) {\n $scope.attemptLogin = function() {\n   if ( $scope.username == $scope.password ) { // test\n        $rootScope.loggedUser = $scope.username;\n        $location.path( \"/main\" );\n    } else {\n        $scope.loginError = \"Invalid user/pass.\";\n    }\n}\n</code></pre>\n\n<p>Everything works, but if I access <code>http://localhost/#/main</code> I end up bypassing the login screen. I wanted to write something like \"whenever the route changes, if $rootScope.loggedUser is null then redirect to /login\"</p>\n\n<p>...</p>\n\n<p>... wait. Can I listen to route changes somehow? I'll post this question anyway and keep looking.</p>\n    ",
    "a": "\n<p>Sorry to answer my own question, but after some diving through some documentation and source code, I think I got it working. Perhaps this will be useful for someone else?</p>\n\n<p>I added the following to my module configuration:</p>\n\n<pre><code>angular.module(...)\n .config( ['$routeProvider', function($routeProvider) {...}] )\n .run( function($rootScope, $location) {\n\n    // register listener to watch route changes\n    $rootScope.$on( \"$routeChangeStart\", function(event, next, current) {\n      if ( $rootScope.loggedUser == null ) {\n        // no logged user, we should be going to #login\n        if ( next.templateUrl == \"partials/login.html\" ) {\n          // already going to #login, no redirect needed\n        } else {\n          // not going to #login, we should redirect now\n          $location.path( \"/login\" );\n        }\n      }         \n    });\n })\n</code></pre>\n\n<p>The one thing that seems odd is that I had to test the partial name (<code>login.html</code>) because the \"next\" Route object did not have a url or something else. Maybe there's a better way?</p>\n    "
}, {
    "t": "Can one controller call another?",
    "l": "http://stackoverflow.com/questions/9293423/can-one-controller-call-another",
    "q": "\n\n<p>Is it possible to have one controller use another?</p>\n\n<p>For example:</p>\n\n<p>This HTML document simply prints a message delivered by the <code>MessageCtrl</code> controller in the <code>messageCtrl.js</code> file.</p>\n\n<pre><code>&lt;html xmlns:ng=\"http://angularjs.org/\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Inter Controller Communication&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div ng:controller=\"MessageCtrl\"&gt;\n        &lt;p&gt;{{message}}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Angular Scripts --&gt;\n    &lt;script src=\"http://code.angularjs.org/angular-0.9.19.js\" ng:autobind&gt;&lt;/script&gt;\n    &lt;script src=\"js/messageCtrl.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The controller file contains the following code:</p>\n\n<pre><code>function MessageCtrl()\n{\n    this.message = function() { \n        return \"The current date is: \" + new Date().toString(); \n    };\n}\n</code></pre>\n\n<p>Which simply prints the current date;</p>\n\n<p>If I were to add another controller, <code>DateCtrl</code> which handed the date in a specific format back to <code>MessageCtrl</code>, how would one go about doing this?  The DI framework seems to be concerned with <code>XmlHttpRequests</code> and accessing services.</p>\n\n<p>Can anyone help?</p>\n    ",
    "a": "\n<p>There are multiple ways how to communicate between controllers.</p>\n\n<p>The best one is probably sharing a service:</p>\n\n<pre><code>function FirstController(someDataService) \n{\n  // use the data service, bind to template...\n  // or call methods on someDataService to send a request to server\n}\n\nfunction SecondController(someDataService) \n{\n  // has a reference to the same instance of the service\n  // so if the service updates state for example, this controller knows about it\n}\n</code></pre>\n\n<p>Another way is emitting an event on scope:</p>\n\n<pre><code>function FirstController($scope) \n{\n  $scope.$on('someEvent', function(event, args) {});\n  // another controller or even directive\n}\n\nfunction SecondController($scope) \n{\n  $scope.$emit('someEvent', args);\n}\n</code></pre>\n\n<p>In both cases, you can communicate with any directive as well.</p>\n    "
}, {
    "t": "How can AngularJS bind to list of checkbox values?",
    "l": "http://stackoverflow.com/questions/14514461/how-can-angularjs-bind-to-list-of-checkbox-values",
    "q": "\n\n<p>I have a few checkboxes:</p>\n\n<pre><code>&lt;input type='checkbox' value=\"apple\" checked&gt;\n&lt;input type='checkbox' value=\"orange\"&gt;\n&lt;input type='checkbox' value=\"pear\" checked&gt;\n&lt;input type='checkbox' value=\"naartjie\"&gt;\n</code></pre>\n\n<p>That I would like to bind to a list in my controller such that whenever a checkbox is changed the controller maintains a list of all the checked values e.g. <code>['apple', 'pear']</code>. </p>\n\n<p>ng-model seems to only be able to bind the value of one single checkbox to a variable in the controller. </p>\n\n<p>Is there another way to do it so that I can bind the four checkboxes to a list in the contrller?</p>\n    ",
    "a": "\n<p>There are two ways to approach this problem. Either use a simple array or an array of objects. Each solution has it pros and cons. Below you'll find one for each case.</p>\n\n<hr>\n\n<h3>With a simple array as input data</h3>\n\n<p>the html could look like:</p>\n\n<pre><code>&lt;label ng-repeat=\"fruitName in fruits\"&gt;\n  &lt;input\n    type=\"checkbox\"\n    name=\"selectedFruits[]\"\n    value=\"{{fruitName}}\"\n    ng-checked=\"selection.indexOf(fruitName) &gt; -1\"\n    ng-click=\"toggleSelection(fruitName)\"\n  &gt; {{fruitName}}\n&lt;/label&gt;\n</code></pre>\n\n<p>and the appropriate controller code would be:</p>\n\n<pre><code>app.controller('SimpleArrayCtrl', ['$scope', function SimpleArrayCtrl($scope) {\n  // fruits\n  $scope.fruits = ['apple', 'orange', 'pear', 'naartjie'];\n\n  // selected fruits\n  $scope.selection = ['apple', 'pear'];\n\n  // toggle selection for a given fruit by name\n  $scope.toggleSelection = function toggleSelection(fruitName) {\n    var idx = $scope.selection.indexOf(fruitName);\n\n    // is currently selected\n    if (idx &gt; -1) {\n      $scope.selection.splice(idx, 1);\n    }\n\n    // is newly selected\n    else {\n      $scope.selection.push(fruitName);\n    }\n  };\n}]);\n</code></pre>\n\n<p><strong>Pros</strong>: simple data structure and toggling by name is easy to handle</p>\n\n<p><strong>Cons</strong>: add/remove is cumbersome as two lists (the input and selection) have to be managed</p>\n\n<hr>\n\n<h3>With an object array as input data</h3>\n\n<p>the html could look like:</p>\n\n<pre><code>&lt;label ng-repeat=\"fruit in fruits\"&gt;\n  &lt;!--\n    - use `value=\"{{fruit.name}}\"` to give the input a real value, in case the form gets submitted\n      traditionally\n\n    - use `ng-checked=\"fruit.selected\"` to have the checkbox checked based on some angular expression\n      (no two-way-data-binding)\n\n    - use `ng-model=\"fruit.selected\"` to utilize two-way-data-binding. Note that `.selected`\n      is arbitrary. The property name could be anything and will be created on the object if not present.\n  --&gt;\n  &lt;input\n    type=\"checkbox\"\n    name=\"selectedFruits[]\"\n    value=\"{{fruit.name}}\"\n    ng-model=\"fruit.selected\"\n  &gt; {{fruit.name}}\n&lt;/label&gt;\n</code></pre>\n\n<p>and the appropriate controller code would be:</p>\n\n<pre><code>app.controller('ObjectArrayCtrl', ['$scope', 'filterFilter', function ObjectArrayCtrl($scope, filterFilter) {\n  // fruits\n  $scope.fruits = [\n    { name: 'apple',    selected: true },\n    { name: 'orange',   selected: false },\n    { name: 'pear',     selected: true },\n    { name: 'naartjie', selected: false }\n  ];\n\n  // selected fruits\n  $scope.selection = [];\n\n  // helper method to get selected fruits\n  $scope.selectedFruits = function selectedFruits() {\n    return filterFilter($scope.fruits, { selected: true });\n  };\n\n  // watch fruits for changes\n  $scope.$watch('fruits|filter:{selected:true}', function (nv) {\n    $scope.selection = nv.map(function (fruit) {\n      return fruit.name;\n    });\n  }, true);\n}]);\n</code></pre>\n\n<p><strong>Pros</strong>: add/remove is very easy</p>\n\n<p><strong>Cons</strong>: somewhat more complex data structure and toggling by name is cumbersome or requires a helper method</p>\n\n<hr>\n\n<p><strong>Demo</strong>: <a href=\"http://jsbin.com/ImAqUC/1/\">http://jsbin.com/ImAqUC/1/</a></p>\n    "
}, {
    "t": "Where to put model data and behaviour?",
    "l": "http://stackoverflow.com/questions/11112608/where-to-put-model-data-and-behaviour",
    "q": "\n\n<p>I am working with AngularJS for my latest project. In the documentation and tutorials all model data is put into the controller scope. I understand that is has to be there to be available for the controller and thus within the corresponding views.</p>\n\n<p>However I dont think the model should actually be implemented there. It might be complex and have private attributes for example. Furthermore one might want to reuse it in another context/app. Putting everything into the controller totally breaks MVC pattern.</p>\n\n<p>The same holds true for the behaviour of any model. If I would use <a href=\"http://www.artima.com/articles/dci_vision.html\">DCI architecture</a> and separate behaviour from the data model, I would have to introduce additional objects to hold the behaviour. This would be done by introducing roles and contexts.</p>\n\n<p>Of course model data and behaviour could be implemented with plain javascript objects or any \"class\" pattern. But what would be the AngularJS way to do it? Using services?</p>\n\n<p><strong>So it comes down to this question:</strong></p>\n\n<p>How do you implement models decoupled from the controller, following AngularJS best practices?</p>\n    ",
    "a": "\n<p>You should use services if you want something usable by multiple controllers. Here's a simple contrived example:</p>\n\n<pre><code>myApp.factory('ListService', function() {\n  var ListService = {};\n  var list = [];\n  ListService.getItem = function(index) { return list[index]; }\n  ListService.addItem = function(item) { list.push(item); }\n  ListService.removeItem = function(item) { list.splice(list.indexOf(item), 1) }\n  ListService.size = function() { return list.length; }\n\n  return ListService;\n});\n\nfunction Ctrl1($scope, ListService) {\n  //Can add/remove/get items from shared list\n}\n\nfunction Ctrl2($scope, ListService) {\n  //Can add/remove/get items from shared list\n}\n</code></pre>\n    "
}, {
    "t": "What's the correct way to communicate between controllers in AngularJS?",
    "l": "http://stackoverflow.com/questions/11252780/whats-the-correct-way-to-communicate-between-controllers-in-angularjs",
    "q": "\n\n<p>What's the correct way to communicate between controllers in AngularJS?</p>\n\n<p>I'm currently using a horrible fudge involving 'window':</p>\n\n<pre><code>function StockSubgroupCtrl($scope, $http) {\n    $scope.subgroups = [];\n    $scope.handleSubgroupsLoaded = function(data, status) {\n        $scope.subgroups = data;\n    }\n    $scope.fetch = function(prod_grp) {\n        $http.get('/api/stock/groups/' + prod_grp + '/subgroups/').success($scope.handleSubgroupsLoaded);\n    }\n    window.fetchStockSubgroups = $scope.fetch;\n}\n\nfunction StockGroupCtrl($scope, $http) {\n    ...\n    $scope.select = function(prod_grp) {\n        $scope.selectedGroup = prod_grp;\n        window.fetchStockSubgroups(prod_grp);\n    }\n}\n</code></pre>\n    ",
    "a": "\n<p><strong>Edit</strong>: The issue addressed in this answer have been resolved in recent versions of angular.js <code>$broadcast</code> now avoids bubbling over unregistered scopes and runs just as fast as $emit.</p>\n\n<p><img src=\"http://i.stack.imgur.com/ti7Ph.png\" alt=\"$broadcast performances are identical to $emit with angular 1.2.16\"></p>\n\n<hr>\n\n<p><strong>Original Answer Below</strong></p>\n\n<p>I highly advise not to use <code>$rootScope.$broadcast</code> + <code>$scope.$on</code> but rather <code>$rootScope.$emit</code>+ <code>$rootScope.$on</code>. The former can cause serious performance problems as raised by @numan. That is because the event will bubble down through <strong>all</strong> scopes. </p>\n\n<p>However, the latter (using <code>$rootScope.$emit</code> + <code>$rootScope.$on</code>) does <strong>not</strong> suffer from this and can therefore be used as a fast communication channel!</p>\n\n<p>From the angular documentation of <code>$emit</code>:</p>\n\n<blockquote>\n  <p>Dispatches an event name upwards through the scope hierarchy notifying the registered</p>\n</blockquote>\n\n<p>Since there is no scope above <code>$rootScope</code>, there is no bubbling happening. It is totally safe to use <code>$rootScope.$emit()</code>/ <code>$rootScope.$on()</code> as an EventBus.</p>\n\n<p>However, there is one gotcha when using it from within Controllers. If you directly bind to <code>$rootScope.$on()</code> from within a controller, you'll have to clean up the binding yourself when  your local <code>$scope</code> gets destroyed. This is because controllers (in contrast to services) can get instantiated multiple times over the lifetime of an application which would result into bindings summing up eventually creating memory leaks all over the place :)</p>\n\n<p>To unregister, just listen on your <code>$scope</code>'s <code>$destroy</code> event and then call the function that was returned by <code>$rootScope.$on</code>.</p>\n\n<pre><code>angular\n    .module('MyApp')\n    .controller('MyController', ['$scope', '$rootScope', function MyController($scope, $rootScope) {\n\n            var unbind = $rootScope.$on('someComponent.someCrazyEvent', function(){\n                console.log('foo');\n            });\n\n            $scope.$on('$destroy', unbind);\n        }\n    ]);\n</code></pre>\n\n<p>I would say, that's not really an angular specific thing as it applies to other EventBus implementations as well, that you have to clean up resources.</p>\n\n<p>However, you <em>can</em> make your life easier for those cases. For instance, you could monkey patch <code>$rootScope</code> and give it a <code>$onRootScope</code> that subscribes to events emitted on the <code>$rootScope</code> but also directly cleans up the handler when the local <code>$scope</code> gets destroyed.</p>\n\n<p>The cleanest way to monkey patch the <code>$rootScope</code> to provide such <code>$onRootScope</code> method would be through a decorator (a run block will probably do it just fine as well but pssst, don't tell anybody)</p>\n\n<p>To make sure the <code>$onRootScope</code> property doesn't show up unexpected when enumerating over <code>$scope</code> we use <code>Object.defineProperty()</code> and set <code>enumerable</code> to <code>false</code>. Keep in mind that you might need an ES5 shim.</p>\n\n<pre><code>angular\n    .module('MyApp')\n    .config(['$provide', function($provide){\n        $provide.decorator('$rootScope', ['$delegate', function($delegate){\n\n            Object.defineProperty($delegate.constructor.prototype, '$onRootScope', {\n                value: function(name, listener){\n                    var unsubscribe = $delegate.$on(name, listener);\n                    this.$on('$destroy', unsubscribe);\n\n                    return unsubscribe;\n                },\n                enumerable: false\n            });\n\n\n            return $delegate;\n        }]);\n    }]);\n</code></pre>\n\n<p>With this method in place the controller code from above can be simplified to:</p>\n\n<pre><code>angular\n    .module('MyApp')\n    .controller('MyController', ['$scope', function MyController($scope) {\n\n            $scope.$onRootScope('someComponent.someCrazyEvent', function(){\n                console.log('foo');\n            });\n        }\n    ]);\n</code></pre>\n\n<p>So as a final outcome of all this I highly advise you to use <code>$rootScope.$emit</code> + <code>$scope.$onRootScope</code>.</p>\n\n<p>Btw, I'm trying to convince the angular team to address the problem within angular core. There's a discussion going on here: <a href=\"https://github.com/angular/angular.js/issues/4574\">https://github.com/angular/angular.js/issues/4574</a></p>\n\n<p>Here is a jsperf that shows how much of a perf impact <code>$broadcast</code>brings to the table in a decent scenario with just 100 <code>$scope</code>'s.</p>\n\n<p><a href=\"http://jsperf.com/rootscope-emit-vs-rootscope-broadcast\">http://jsperf.com/rootscope-emit-vs-rootscope-broadcast</a></p>\n\n<p><img src=\"http://i.stack.imgur.com/FQ9dE.png\" alt=\"jsperf results\"></p>\n    "
}, {
    "t": "Why does angularjs include an empty option in select",
    "l": "http://stackoverflow.com/questions/12654631/why-does-angularjs-include-an-empty-option-in-select",
    "q": "\n\n<p>I've been working with angular for the last few weeks and the one thing which is really bothering me is that even after trying all permutations or the configuration defined in the spec at <a href=\"http://docs.angularjs.org/api/ng.directive:select\">http://docs.angularjs.org/api/ng.directive:select</a>, I still get an empty option as the first child of select element.</p>\n\n<p>Here's the Jade</p>\n\n<pre><code>select.span9(ng-model='form.type', required, ng-options='option.value as option.name for option in typeOptions');\n</code></pre>\n\n<p>Here the controller</p>\n\n<pre><code>$scope.typeOptions = [\n    { name: 'Feature', value: 'feature' }, \n    { name: 'Bug', value: 'bug' }, \n    { name: 'Enhancement', value: 'enhancement' }\n];\n</code></pre>\n\n<p>Finally, here's the HTML which gets generated</p>\n\n<pre><code>&lt;select ng-model=\"form.type\" required=\"required\" ng-options=\"option.value as option.name for option in typeOptions\" class=\"span9 ng-pristine ng-invalid ng-invalid-required\"&gt;\n    &lt;option value=\"?\" selected=\"selected\"&gt;&lt;/option&gt;\n    &lt;option value=\"0\"&gt;Feature&lt;/option&gt;\n    &lt;option value=\"1\"&gt;Bug&lt;/option&gt;\n    &lt;option value=\"2\"&gt;Enhancement&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>What do I need to do to get rid of it?</p>\n\n<p>P.S. Things work without this as well, but it just looks odd if you use select2 without multiple selection.</p>\n    ",
    "a": "\n<p>The empty <code>option</code> is generated when a value referenced by <code>ng-model</code> doesn't exist in a set of options passed to <code>ng-options</code>. This happens to prevent accidental model selection: AngularJS can see that the initial model is either undefined or not in the set of options and don't want to decide model value on its own.</p>\n\n<p>If you want to get rid of the empty option just select an initial value in your controller, something like:</p>\n\n<pre><code>$scope.form.type = $scope.typeOptions[0].value;\n</code></pre>\n\n<p>Here is the jsFiddle: <a href=\"http://jsfiddle.net/MTfRD/3/\">http://jsfiddle.net/MTfRD/3/</a></p>\n\n<p>In short: the empty option means that no valid model is selected (by valid I mean: from the set of options). You need to select a valid model value to get rid of this empty option.</p>\n    "
}, {
    "t": "Combating AngularJS executing controller twice",
    "l": "http://stackoverflow.com/questions/15535336/combating-angularjs-executing-controller-twice",
    "q": "\n\n<p>I understand AngularJS runs through some code twice, sometimes even more, like $watch events, constantly checking model states etc.</p>\n\n<p>However my code:</p>\n\n<pre><code>function MyController($scope, User, local) {\n\nvar $scope.User = local.get(); // Get locally save user data\n\nUser.get({ id: $scope.User._id.$oid }, function(user) {\n  $scope.User = new User(user);\n  local.save($scope.User);\n});\n\n//...\n</code></pre>\n\n<p>Is executed twice, inserting 2 records into my DB. I'm clearly still learning as I've been banging my head against this for ages!</p>\n    ",
    "a": "\n<p>Ok figured it out with some guidance from Stewie in the comments.</p>\n\n<p>My app has routing, and it was navigating to <code>MyController</code> like so:</p>\n\n<pre><code>$routeProvider.when('/',\n                   { templateUrl: 'pages/home.html',\n                     controller: MyController });\n</code></pre>\n\n<p>But I also had this in <code>home.html</code>:</p>\n\n<pre><code>&lt;div data-ng-controller=\"MyController\"&gt;\n</code></pre>\n\n<p>Which was instructing AngularJS to digest my controller twice.</p>\n\n<p><strong>To solve it I simply removed the <code>data-ng-controller</code> from my HTML.</strong></p>\n\n<p>Obviously really when I think about it!</p>\n\n<p>Note: If you want you could remove the <code>controller:</code> property from the routing and keep the <code>ngController</code> directive in your HTML. Either way Angular will now only execute your controller once.</p>\n    "
}, {
    "t": "AngularJS 1.2 $injector:modulerr",
    "l": "http://stackoverflow.com/questions/18287482/angularjs-1-2-injectormodulerr",
    "q": "\n\n<p>When using angular 1.2 instead of 1.07 the following piece of code is not valid anymore, why?</p>\n\n<pre><code>'use strict';\n\nvar app = angular.module('myapp', []);\n\napp.config(['$routeProvider', '$locationProvider',\n    function($routeProvider, $locationProvider) {\n        $locationProvider.html5Mode(true);\n        $routeProvider.\n        when('/', {\n            templateUrl: 'part.html',\n            controller: 'MyCtrl'\n        }).\n        otherwise({\n            redirectTo: '/'\n        });\n    }\n]);\n</code></pre>\n\n<p>the issue is in the injector configuration part (app.config):</p>\n\n<pre><code>Uncaught Error: [$injector:modulerr] http://errors.angularjs.org/1.2.0rc1/$injector/modulerr?p0=muninn&amp;p1=Error%…eapis.com%2Fajax%2Flibs%2Fangularjs%2F1.2.0rc1%2Fangular.min.js%3A31%3A252) \n</code></pre>\n\n<p>If I remember correctly this issue started with angular 1.1.6.</p>\n    ",
    "a": "\n<p>The problem was caused by missing inclusion of ngRoute module. Since version 1.1.6 it's a separate part:</p>\n\n<pre><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0rc1/angular-route.min.js\"&gt;&lt;/script&gt;\n\nvar app = angular.module('myapp', ['ngRoute']);\n</code></pre>\n    "
}, {
    "t": "if else statement in AngularJS templates",
    "l": "http://stackoverflow.com/questions/15810278/if-else-statement-in-angularjs-templates",
    "q": "\n\n<p>I want to do a condition in an AngularJS template. I fetch a video list from the Youtube API. Some of the videos are in 16:9 ratio and some are in 4:3 ratio.</p>\n\n<p>I want to make a condition like this:</p>\n\n<pre><code>if video.yt$aspectRatio equals widescreen then \n    element's attr height=\"270px\"\nelse\n    element's attr height=\"360px\"\n</code></pre>\n\n<p>I'm iterating the videos using <code>ng-repeat</code>. Have no idea what should I do for this condition:</p>\n\n<ul>\n<li>Add a function in the scope? </li>\n<li>Do it in template?</li>\n</ul>\n    ",
    "a": "\n<p>Angularjs (versions below 1.1.5) does not provide the <code>if/else</code> functionality . Following are a few options to consider for what you want to achieve:</p>\n\n<p>(<strong><em>Jump to the update below (#4) if you are using version 1.1.5 or greater</em></strong>)</p>\n\n<h3>1. <a href=\"http://docs.angularjs.org/api/ng.directive%3angSwitch\"><code>ng-switch</code></a> directive:</h3>\n\n<p>can be used something like the following.</p>\n\n<pre><code>&lt;div ng-switch on=\"video\"&gt;\n    &lt;div ng-switch-when=\"video.large\"&gt;\n        &lt;!-- code to render a large video block--&gt;\n    &lt;/div&gt;\n    &lt;div ng-switch-default&gt;\n        &lt;!-- code to render the regular video block --&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<h3>2. <a href=\"http://docs.angularjs.org/api/ng.directive%3angHide\"><code>ng-hide</code></a> / <a href=\"http://docs.angularjs.org/api/ng.directive%3angShow\"><code>ng-show</code></a> directives</h3>\n\n<p>Alternatively, you might also use <code>ng-show/ng-hide</code> but using this will actually render both a large video and a small video element and then hide the one that meets the <code>ng-hide</code> condition and shows the one that meets <code>ng-show</code> condition. So on each page you'll actually be rendering two different elements.</p>\n\n<h3>3. Another option to consider is <a href=\"http://docs.angularjs.org/api/ng.directive%3angClass\"><code>ng-class</code></a> directive.</h3>\n\n<p>This can be used as follows.</p>\n\n<pre><code>&lt;div ng-class=\"{large-video: video.large}\"&gt;\n    &lt;!-- video block goes here --&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The above basically will add a <code>large-video</code> css class to the div element if <code>video.large</code> is truthy.</p>\n\n<h3>UPDATE: <a href=\"http://code.angularjs.org/1.1.5/docs/\">Angular 1.1.5</a> introduced the <a href=\"http://docs.angularjs.org/api/ng.directive%3angIf\"><code>ngIf directive</code></a></h3>\n\n<h3>4. <a href=\"http://docs.angularjs.org/api/ng.directive%3angIf\"><code>ng-if</code></a> directive:</h3>\n\n<p>In the versions above <code>1.1.5</code> you can use the <code>ng-if</code> directive. This would remove the element if the expression provided returns <code>false</code> and re-inserts the <code>element</code> in the DOM if the expression returns <code>true</code>. Can be used as follows.</p>\n\n<pre><code>&lt;div ng-if=\"video == video.large\"&gt;\n    &lt;!-- code to render a large video block--&gt;\n&lt;/div&gt;\n&lt;div ng-if=\"video != video.large\"&gt;\n    &lt;!-- code to render the regular video block --&gt;\n&lt;/div&gt;\n</code></pre>\n    "
}, {
    "t": "What's the difference between ng-model and ng-bind",
    "l": "http://stackoverflow.com/questions/12419619/whats-the-difference-between-ng-model-and-ng-bind",
    "q": "\n\n<p>I'm currently learning angularjs and am having difficulty understanding the difference between <code>ng-bind</code> and <code>ng-model</code>.</p>\n\n<p>Can anyone tell me how they differ and when one should be used over the other?</p>\n    ",
    "a": "\n<p><strong>ng-bind</strong> has one-way data binding ($scope --&gt; view). It has a shortcut <code>{{ val }}</code>\nwhich displays the scope value <code>$scope.val</code> inserted into html where <code>val</code> is a variable name.</p>\n\n<p><strong>ng-model</strong> is intended to be put inside of form elements and has two-way data binding ($scope --&gt; view and view --&gt; $scope) e.g. <code>&lt;input ng-model=\"val\"/&gt;</code>.</p>\n    "
}, {
    "t": "Initialize AngularJS service with asynchronous data",
    "l": "http://stackoverflow.com/questions/16286605/initialize-angularjs-service-with-asynchronous-data",
    "q": "\n\n<p>I have an AngularJS service that I want to initialize with some asynchronous data. Something like this:</p>\n\n<pre><code>myModule.service('MyService', function($http) {\n    var myData = null;\n\n    $http.get('data.json').success(function (data) {\n        myData = data;\n    });\n\n    return {\n        setData: function (data) {\n            myData = data;\n        },\n        doStuff: function () {\n            return myData.getSomeData();\n        }\n    };\n});\n</code></pre>\n\n<p>Obviously this won't work because if something tries to call <code>doStuff()</code> before <code>myData</code> gets back I will get a null pointer exception. As far as I can tell from reading some of the other questions asked <a href=\"http://stackoverflow.com/questions/12657389/angularjs-load-service-then-call-controller-and-render\">here</a> and <a href=\"http://stackoverflow.com/questions/15164013/json-to-initialize-data-in-service\">here</a> I have a few options, but none of them seem very clean (perhaps I am missing something):</p>\n\n<p><strong>Setup Service with \"run\"</strong></p>\n\n<p>When setting up my app do this:</p>\n\n<pre><code>myApp.run(function ($http, MyService) {\n    $http.get('data.json').success(function (data) {\n        MyService.setData(data);\n    });\n});\n</code></pre>\n\n<p>Then my service would look like this:</p>\n\n<pre><code>myModule.service('MyService', function() {\n    var myData = null;\n    return {\n        setData: function (data) {\n            myData = data;\n        },\n        doStuff: function () {\n            return myData.getSomeData();\n        }\n    };\n});\n</code></pre>\n\n<p>This works some of the time but if the asynchronous data happens to take longer than it takes for everything to get initialized I get a null pointer exception when I call <code>doStuff()</code></p>\n\n<p><strong>Use promise objects</strong></p>\n\n<p>This would probably work. The only downside it everywhere I call MyService I will have to know that doStuff() returns a promise and all the code will have to us <code>then</code> to interact with the promise. I would rather just wait until myData is back before loading the my application.</p>\n\n<p><strong>Manual Bootstrap</strong> </p>\n\n<pre><code>angular.element(document).ready(function() {\n    $.getJSON(\"data.json\", function (data) {\n       // can't initialize the data here because the service doesn't exist yet\n       angular.bootstrap(document);\n       // too late to initialize here because something may have already\n       // tried to call doStuff() and would have got a null pointer exception\n    });\n});\n</code></pre>\n\n<p><strong>Global Javascript Var</strong>\nI could send my JSON directly to a global Javascript variable:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"data.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>data.js:</p>\n\n<pre><code>var dataForMyService = { \n// myData here\n};\n</code></pre>\n\n<p>Then it would be available when initializing <code>MyService</code>:</p>\n\n<pre><code>myModule.service('MyService', function() {\n    var myData = dataForMyService;\n    return {\n        doStuff: function () {\n            return myData.getSomeData();\n        }\n    };\n});\n</code></pre>\n\n<p>This would work too, but then I have a global javascript variable which smells bad.</p>\n\n<p>Are these my only options? Are one of these options better than the others? I know this is a pretty long question, but I wanted to show that I have tried to explore all my options. Any guidance would greatly be appreciated. </p>\n    ",
    "a": "\n<p>Have you had a look at <a href=\"https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider\"><code>$routeProvider.when('/path',{ resolve:{...}</code></a>? It can make the promise approach a bit cleaner:</p>\n\n<p>Expose a promise in your service:\n</p>\n\n<pre><code>app.service('MyService', function($http) {\n    var myData = null;\n\n    var promise = $http.get('data.json').success(function (data) {\n      myData = data;\n    });\n\n    return {\n      promise:promise,\n      setData: function (data) {\n          myData = data;\n      },\n      doStuff: function () {\n          return myData;//.getSomeData();\n      }\n    };\n});\n</code></pre>\n\n<p>Add <code>resolve</code> to your route config:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.config(function($routeProvider){\n  $routeProvider\n    .when('/',{controller:'MainCtrl',\n    template:'&lt;div&gt;From MyService:&lt;pre&gt;{{data | json}}&lt;/pre&gt;&lt;/div&gt;',\n    resolve:{\n      'MyServiceData':function(MyService){\n        // MyServiceData will also be injectable in your controller, if you don't want this you could create a new promise with the $q service\n        return MyService.promise;\n      }\n    }})\n  }):\n</code></pre>\n\n<p>Your controller won't get instantiated before all dependencies are resolved:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.controller('MainCtrl', function($scope,MyService) {\n  console.log('Promise is now resolved: '+MyService.doStuff().data)\n  $scope.data = MyService.doStuff();\n});\n</code></pre>\n\n<p>I've made an example at plnkr: <a href=\"http://plnkr.co/edit/GKg21XH0RwCMEQGUdZKH?p=preview\">http://plnkr.co/edit/GKg21XH0RwCMEQGUdZKH?p=preview</a></p>\n    "
}, {
    "t": "How to use a filter in a controller?",
    "l": "http://stackoverflow.com/questions/14302267/how-to-use-a-filter-in-a-controller",
    "q": "\n\n<p>I have written a filter function which will return data based on the argument you are passing. I want the same functionality in my controller. Is it possible to reuse the filter function in a controller? </p>\n\n<p>This is what I've tried so far:</p>\n\n<pre><code>function myCtrl($scope,filter1)\n{ \n    // i simply used the filter function name, it is not working.\n}\n</code></pre>\n    ",
    "a": "\n<p>Inject $filter to your controller</p>\n\n<pre><code>function myCtrl($scope, $filter)\n{\n}\n</code></pre>\n\n<p>Then wherever you want to use that filter, just use it like this:</p>\n\n<pre><code>$filter('filtername');\n</code></pre>\n\n<p>If you want to pass arguments to that filter, do it using separate parentheses:</p>\n\n<pre><code>function myCtrl($scope, $filter)\n{\n    $filter('filtername')(arg1,arg2);\n}\n</code></pre>\n    "
}, {
    "t": "Delaying AngularJS route change until model loaded to prevent flicker",
    "l": "http://stackoverflow.com/questions/11972026/delaying-angularjs-route-change-until-model-loaded-to-prevent-flicker",
    "q": "\n\n<p>I am wondering if there is a way (similar to Gmail) for AngularJS to <strong>delay showing a new route until after each model and its data has been fetched</strong> using its respective services.</p>\n\n<p>For example, if there were a <code>ProjectsController</code> that listed all Projects and <code>project_index.html</code> which was the template that showed these Projects, <code>Project.query()</code> would be fetched completely before showing the new page.</p>\n\n<p>Until then, the old page would still continue to show (for example, if I were browsing another page and then decided to see this Project index).</p>\n    ",
    "a": "\n<p><a href=\"http://docs.angularjs.org/api/ngRoute.$routeProvider\" rel=\"nofollow\">$routeProvider</a> <a href=\"http://docs.angularjs.org/api/ngRoute.$routeProvider\" rel=\"nofollow\">resolve</a> property allows delaying of route change until data is loaded.</p>\n\n<p>First define a route with <code>resolve</code> attribute like this.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('phonecat', ['phonecatFilters', 'phonecatServices', 'phonecatDirectives']).\n  config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n      when('/phones', {\n        templateUrl: 'partials/phone-list.html', \n        controller: PhoneListCtrl, \n        resolve: PhoneListCtrl.resolve}).\n      when('/phones/:phoneId', {\n        templateUrl: 'partials/phone-detail.html', \n        controller: PhoneDetailCtrl, \n        resolve: PhoneDetailCtrl.resolve}).\n      otherwise({redirectTo: '/phones'});\n}]);\n</code></pre>\n\n<p>notice that the <code>resolve</code> property is defined on route.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function PhoneListCtrl($scope, phones) {\n  $scope.phones = phones;\n  $scope.orderProp = 'age';\n}\n\nPhoneListCtrl.resolve = {\n  phones: function(Phone, $q) {\n    // see: https://groups.google.com/forum/?fromgroups=#!topic/angular/DGf7yyD4Oc4\n    var deferred = $q.defer();\n    Phone.query(function(successData) {\n            deferred.resolve(successData); \n    }, function(errorData) {\n            deferred.reject(); // you could optionally pass error data here\n    });\n    return deferred.promise;\n  },\n  delay: function($q, $defer) {\n    var delay = $q.defer();\n    $defer(delay.resolve, 1000);\n    return delay.promise;\n  }\n}\n</code></pre>\n\n<p>Notice that the controller definition contains a resolve object which declares things which should be available to the controller constructor. Here the <code>phones</code> is injected into the controller and it is defined in the <code>resolve</code> property.</p>\n\n<p>The <code>resolve.phones</code> function is responsible for returning a promise. All of the promises are collected and the route change is delayed until after all of the promises are resolved.</p>\n\n<p>Working demo: <a href=\"http://mhevery.github.com/angular-phonecat/app/#/phones\" rel=\"nofollow\">http://mhevery.github.com/angular-phonecat/app/#/phones</a>\nSource: <a href=\"https://github.com/mhevery/angular-phonecat/commit/ba33d3ec2d01b70eb5d3d531619bf90153496831\" rel=\"nofollow\">https://github.com/mhevery/angular-phonecat/commit/ba33d3ec2d01b70eb5d3d531619bf90153496831</a></p>\n    "
}, {
    "t": "Working with select using Angular's ng-options",
    "l": "http://stackoverflow.com/questions/13047923/working-with-select-using-angulars-ng-options",
    "q": "\n\n<p>I have read about it in other posts but couldn't figure out. \nI have array:</p>\n\n<pre><code>$scope.items = [\n   {ID: '000001', Title: 'Chicago'},\n   {ID: '000002', Title: 'New York'},\n   {ID: '000003', Title: 'Washington'},\n];\n</code></pre>\n\n<p>I want to render this</p>\n\n<pre><code>&lt;select&gt;\n  &lt;option value=\"000001\"&gt;Chicago&lt;/option&gt;\n  &lt;option value=\"000002\"&gt;New York&lt;/option&gt;\n  &lt;option value=\"000003\"&gt;Washington&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>And also I want to select option with ID=000002.</p>\n\n<p>I have read this <a href=\"http://docs.angularjs.org/api/ng.directive%3aselect\">http://docs.angularjs.org/api/ng.directive:select</a> and tried but can't figure out.</p>\n    ",
    "a": "\n<p>One thing to note is that ngModel is <em>required</em> for ngOptions to work... note the <code>ng-model=\"blah\"</code> which is saying \"set $scope.blah to the selected value\".</p>\n\n<p>Try this:</p>\n\n<pre><code>&lt;select ng-model=\"blah\" ng-options=\"item.ID as item.Title for item in items\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>Here's more from Angular's documentation (if you haven't seen it):</p>\n\n<blockquote>\n  <p>for array data sources:</p>\n  \n  <ul>\n  <li>label for value in array</li>\n  <li>select as label for value in array</li>\n  <li>label group by group for value in array\n  = select as label group by group for value in array</li>\n  </ul>\n  \n  <p>for object data sources:</p>\n  \n  <ul>\n  <li>label for (key , value) in object</li>\n  <li>select as label for (key , value) in object</li>\n  <li>label group by group for (key, value) in object</li>\n  <li>select as label group by group for (key, value) in object</li>\n  </ul>\n</blockquote>\n\n<hr>\n\n<h2>EDIT: For some clarification on option tag values in Angular</h2>\n\n<p>When you use <code>ng-options</code>, <strong>the values of option tags written out by ng-options will always be the index of the array item the option tag relates to</strong>. This is because Angular actually allows you to select entire objects with select controls, and not just primitive types. For example:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.controller('MainCtrl', function($scope) {\n   $scope.items = [\n     { id: 1, name: 'foo' },\n     { id: 2, name: 'bar' },\n     { id: 3, name: 'blah' }\n   ];\n});\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div ng-controller=\"MainCtrl\"&gt;\n   &lt;select ng-model=\"selectedItem\" ng-options=\"item as item.name for item in items\"&gt;&lt;/select&gt;\n   &lt;pre&gt;{{selectedItem | json}}&lt;/pre&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The above will allow you to select an entire object into <code>$scope.selectedItem</code> directly. <strong>The point is, with Angular, you don't need to worry about what's in your option tag. Let Angular handle that, you should only care about what's in your model in your scope.</strong></p>\n\n<p><a href=\"http://plnkr.co/edit/SxIvt4KThWLtWvh3PnOh?p=preview\">Here is a plunker demonstrating the behavior above, and showing the html written out</a></p>\n\n<hr>\n\n<h2>EDIT 2: Dealing with the default option:</h2>\n\n<p>There are a few things I've failed to mention above relating to the default option.</p>\n\n<p><strong>Selecting first option and removing the empty option:</strong></p>\n\n<p>You can do this by adding a simple <code>ng-init</code> that sets the model (from <code>ng-model</code>) to the first element in the items your repeating in <code>ng-options</code>:</p>\n\n<pre><code>&lt;select ng-init=\"foo = foo || items[0]\" ng-model=\"foo\" ng-options=\"item as item.name for item in items\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>Note: this could get a little crazy if foo happens to be initialized properly to something \"falsy\". In that case, you'll want to handle the initialization of foo in your controller, most likely.</p>\n\n<p><strong>Customizing the default option:</strong></p>\n\n<p>This is a little different, here all you need to do is add an option tag as a child of your select, with an empty value attribute, then customize it's inner text:</p>\n\n<pre><code>&lt;select ng-model=\"foo\" ng-options=\"item as item.name for item in items\"&gt;\n   &lt;option value=\"\"&gt;Nothing selected&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>Note: that in this case the \"empty\" option will stay there even after you select a different option. This isn't the case for the default behavior of selects under Angular.</p>\n\n<p><strong>A customized default option that hides after a selection is made:</strong></p>\n\n<p>If you wanted your customized default option to go away after you select a value, you can add an ng-hide attribute to your default option:</p>\n\n<pre><code>&lt;select ng-model=\"foo\" ng-options=\"item as item.name for item in items\"&gt;\n   &lt;option value=\"\" ng-if=\"foo\"&gt;Select something to remove me.&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n    "
}, {
    "t": "Directive: link vs compile vs controller",
    "l": "http://stackoverflow.com/questions/15676614/directive-link-vs-compile-vs-controller",
    "q": "\n\n<p>when you create a directive, you can put code into the compiler, the link function or the controller. \nIn the docs they explain that:</p>\n\n<ul>\n<li>compile and link function are used in different phases of the angular\ncycle</li>\n<li>controllers are shared between directives.</li>\n</ul>\n\n<p>However, for me it is not clear, which kind of code should go where. E.g.:\nI can create functions in compile and have them attached to the scope in link. Or I only attach functions to the scope in the controller? How are controllers shared between directives, if each directive can have its own controller? Are really the controllers shared or is it just the scope properties?</p>\n\n<p>Thanks\nschacki</p>\n    ",
    "a": "\n<p><strong>Compile :</strong> </p>\n\n<p>This is the phase where Angular actually compiles your directive. This compile function is called just once for each references to the given directive. For example, say you are using the ng-repeat directive. ng-repeat will have to look up the element it is attached to, extract the html fragment that it is attached to and create a template function. </p>\n\n<p>If you have used HandleBars, underscore templates or equivalent, its like compiling their templates to extract out a template function. To this template function you pass data and the return value of that function is the html with the data in the right places. </p>\n\n<p>The compilation phase is that step in Angular which returns the template function. This template function in angular is called the linking function. </p>\n\n<p><strong>Linking phase :</strong> </p>\n\n<p>The linking phase is where you attach the data ( $scope ) to the linking function and it should return you the linked html. Since the directive also specifies where this html goes or what it changes, it is already good to go. This is the function where you want to make changes to the linked html, i.e the html that already has the data attached to it. In angular if you write code in the linking function its generally the post-link function (by default). It is kind of a callback that gets called after the linking function has linked the data with the template.  </p>\n\n<p><strong>Controller :</strong></p>\n\n<p>The controller is a place where you put in some directive specific logic. This logic can go into the linking function as well, but then you would have to put that logic on the scope to make it \"shareable\". The problem with that is that you would then be corrupting the scope with your directives stuff which is not really something that is expected.\nSo what is the alternative if two Directives want to talk to each other / co-operate with each other? Ofcourse you could put all that logic into a service and then make both these directives depend on that service but that just brings in one more dependency. The alternative is to provide a Controller for this scope ( usually isolate scope ? ) and then this controller is injected into another directive when that directive \"requires\" the other one. See tabs and panes on the first page of angularjs.org for an example. </p>\n    "
}, {
    "t": "Difference between the 'controller', 'link' and 'compile' functions when defining a directive",
    "l": "http://stackoverflow.com/questions/12546945/difference-between-the-controller-link-and-compile-functions-when-definin",
    "q": "\n\n<p>Some places seem to use the controller function for directive logic and other use link. The tabs example on the angular homepage uses controller for one and link for other directive. What is the difference between two? </p>\n    ",
    "a": "\n<p>I'm going to expand your question a bit and also include the compile function.</p>\n\n<ul>\n<li><p><em>compile function</em> - use for <strong>template</strong> DOM manipulation (i.e., manipulation of tElement = template element), hence manipulations that apply to all DOM clones of the template associated with the directive.  (If you also need a link function (or pre and post link functions), and you defined a compile function, the compile function must return the link function(s) because the <code>'link'</code> attribute is ignored if the <code>'compile'</code> attribute is defined.)</p></li>\n<li><p><em>link function</em> - normally use for registering DOM listeners (i.e., <code>$watch</code> expressions on the scope) as well as updating the DOM (i.e., manipulation of iElement = individual instance element). It is executed after the template has been cloned -- e.g., inside an <code>&lt;li ng-repeat...&gt;</code>, the link function is executed after the <code>&lt;li&gt;</code> template (tElement) has been cloned (into an iElement) for that particular <code>&lt;li&gt;</code> element.  A <code>$watch</code> allows a directive to be notified of scope property changes (a scope is associated with each instance), which allows the directive to render an updated instance value to the DOM.</p></li>\n<li><p><em>controller function</em> - must be used when another directive needs to interact with this directive.  E.g., on the AngularJS home page, the pane directive needs to add itself to the scope maintained by the tabs directive, hence the tabs directive needs to define a controller method (think API) that the pane directive can access/call. <br> <br>For a more in-depth explanation of the tabs and pane directives, and why the tabs directive creates a function on its controller using <code>this</code> (rather than on <code>$scope</code>), please see <a href=\"http://stackoverflow.com/questions/11605917/this-vs-scope-in-angularjs-controllers/14168699#14168699\">this vs $scope in AngularJS controllers</a>.</p></li>\n</ul>\n\n<p>In general, you can put methods, <code>$watches</code>, etc. into either the directive's controller or link function.  The controller will run first, which sometimes matters (see this <a href=\"http://jsfiddle.net/mrajcok/xfh3F/\">fiddle</a> which logs when the ctrl and link functions run with two nested directives).  As Josh mentioned in a <a href=\"http://stackoverflow.com/questions/14620521/how-to-write-a-directive-in-angularjs/14621193#comment20441740_14621193\">comment</a>, you may want to put scope-manipulation functions inside a controller just for consistency with the rest of the framework.</p>\n    "
}, {
    "t": "angular.min.js.map not found, what is it exactly?",
    "l": "http://stackoverflow.com/questions/18425841/angular-min-js-map-not-found-what-is-it-exactly",
    "q": "\n\n<p>When I load the page and check chrome console i find these errors:\n<img src=\"http://i.stack.imgur.com/U3lBw.png\" alt=\"enter image description here\"></p>\n\n<p>what exactly are map files in angular? </p>\n\n<p>I did reference the angular.min.js but not the angular.min.js.map.\nI am using the angular 1.2 rc release by the way and I just started seeing these errors when i switched to this release.</p>\n\n<pre><code>ERRORS:\nGET http://localhost:44786/Scripts/angular-route.min.js.map 404 (Not Found)       :44786/Scripts/angular-route.min.js.map:1\nGET http://localhost:44786/Scripts/angular-animate.min.js.map 404 (Not Found) :44786/Scripts/angular-animate.min.js.map:1\nGET http://localhost:44786/Scripts/angular-resource.min.js.map 404 (Not Found) :44786/Scripts/angular-resource.min.js.map:1\nGET http://localhost:44786/Scripts/angular.min.js.map 404 (Not Found) :44786/Scripts/angular.min.js.map:1\n</code></pre>\n    ",
    "a": "\n<p>As eaon21 and monkey said, source map files basically turn minified code into its unminified version for debugging.</p>\n\n<p>You can find the .map files <a href=\"http://code.angularjs.org/1.2.12/\">here</a>. Just add them into the same directory as the minified js files and it'll stop complaining. The reason they get fetched is the</p>\n\n<pre><code>/*\n//@ sourceMappingURL=angular.min.js.map\n*/\n</code></pre>\n\n<p>at the end of angular.min.js. If you don't want to add the .map files you can remove those lines and it'll stop the fetch attempt, but if you plan on debugging it's always good to keep the source maps linked.</p>\n    "
}, {
    "t": "How to preventDefault on anchor tags?",
    "l": "http://stackoverflow.com/questions/10931315/how-to-preventdefault-on-anchor-tags",
    "q": "\n\n<p>Let's say I have an anchor tag such as</p>\n\n<pre><code>&lt;a href=\"#\" ng-click=\"do()\"&gt;Click&lt;/a&gt;\n</code></pre>\n\n<p>How can I prevent the browser from navigating to # in <strong>AngularJS</strong> ?</p>\n    ",
    "a": "\n<p><strong>UPDATE</strong>:  I've since changed my mind on this solution.  After more development and time spent working on this, I believe a better solution to this problem is to do the following:</p>\n\n<pre><code>&lt;a ng-click=\"myFunction()\"&gt;Click Here&lt;/a&gt;\n</code></pre>\n\n<p>And then update your <code>css</code> to have an extra rule:</p>\n\n<pre><code>a[ng-click]{\n    cursor: pointer;\n}\n</code></pre>\n\n<p>Its much more simple and provides the exact same functionality and is much more efficient.  Hope that might be helpful to anyone else looking up this solution in the future.</p>\n\n<hr>\n\n<p><em>The following is my previous solution, which I am leaving here just for legacy purposes:</em></p>\n\n<p>If you are having this problem a lot, a simple directive that would fix this issue is the following:</p>\n\n<pre><code>app.directive('a', function() {\n    return {\n        restrict: 'E',\n        link: function(scope, elem, attrs) {\n            if(attrs.ngClick || attrs.href === '' || attrs.href === '#'){\n                elem.on('click', function(e){\n                    e.preventDefault();\n                });\n            }\n        }\n   };\n});\n</code></pre>\n\n<p>It checks all anchor tags (<code>&lt;a&gt;&lt;/a&gt;</code>) to see if their <code>href</code> attribute is either an empty string (<code>\"\"</code>) or a hash (<code>'#'</code>) or there is an <code>ng-click</code> assignment.  If it finds any of these conditions, it catches the event and prevents the default behavior.</p>\n\n<p>The only down side is that it runs this directive for all anchor tags.  So if you have a lot of anchor tags on the page and you only want to prevent the default behavior for a small number of them, then this directive isn't very efficient.  However, I almost always want to <code>preventDefault</code>, so I use this directive all over in my AngularJS apps.</p>\n    "
}, {
    "t": "How can I iterate over the keys, value in ng-repeat in angular",
    "l": "http://stackoverflow.com/questions/15127834/how-can-i-iterate-over-the-keys-value-in-ng-repeat-in-angular",
    "q": "\n\n<p>In my controller, I have data like:\n<code>$scope.object = data</code></p>\n\n<p>Now this data is the dictionary with keys and values from <code>json</code>.</p>\n\n<p>I can access the attribute with <code>object.name</code> in the template. Is there any way that I can iterate over the keys as well and display them in table like</p>\n\n<p><code>&lt;tr&gt;&lt;td&gt; {{key}} &lt;/td&gt; &lt;td&gt; data.key &lt;/td&gt;</code></p>\n\n<p>The data is like this</p>\n\n<pre><code>{\n    \"id\": 2,\n    \"project\": \"wewe2012\",\n    \"date\": \"2013-02-26\",\n    \"description\": \"ewew\",\n    \"eet_no\": \"ewew\",\n}\n</code></pre>\n    ",
    "a": "\n<p>How about:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;tr ng-repeat=\"(key, value) in data\"&gt;\n  &lt;td&gt; {{key}} &lt;/td&gt; &lt;td&gt; {{ value }} &lt;/td&gt;\n&lt;/tr&gt;\n</code></pre>\n\n<p>This method is listed in the docs: <a href=\"http://docs.angularjs.org/api/ng.directive:ngRepeat\">http://docs.angularjs.org/api/ng.directive:ngRepeat</a></p>\n    "
}, {
    "t": "Angular ng-repeat Error “Duplicates in a repeater are not allowed.”",
    "l": "http://stackoverflow.com/questions/16296670/angular-ng-repeat-error-duplicates-in-a-repeater-are-not-allowed",
    "q": "\n\n<p>I am defining a custom filter like so:</p>\n\n<pre><code>&lt;div class=\"idea item\" ng-repeat=\"item in items\" isoatom&gt;    \n    &lt;div class=\"section comment clearfix\" ng-repeat=\"comment in item.comments | range:1:2\"&gt;\n        ....\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>As you can see the ng-repeat where the filter is being used is nested within another ng-repeat</p>\n\n<p>The filter is defined like this:</p>\n\n<pre><code>myapp.filter('range', function() {\n    return function(input, min, max) {\n        min = parseInt(min); //Make string input int\n        max = parseInt(max);\n        for (var i=min; i&lt;max; i++)\n            input.push(i);\n        return input;\n    };\n});\n</code></pre>\n\n<p>I'm getting:</p>\n\n<blockquote>\n  <p>Error: Duplicates in a repeater are not allowed. Repeater: comment in item.comments | range:1:2 ngRepeatAction@<a href=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.1.4/an\">https://ajax.googleapis.com/ajax/libs/angularjs/1.1.4/an</a></p>\n</blockquote>\n    ",
    "a": "\n<p>The solution is actually described here: <a href=\"http://www.anujgakhar.com/2013/06/15/duplicates-in-a-repeater-are-not-allowed-in-angularjs/\">http://www.anujgakhar.com/2013/06/15/duplicates-in-a-repeater-are-not-allowed-in-angularjs/</a></p>\n\n<p>AngularJS does not allow duplicates in a ng-repeat directive. This means if you are trying to do the following, you will get an error.</p>\n\n<pre><code>// the below will throw the error Duplicates in a repeater are not allowed. Repeater: row in [1,1,1] key: number:1\n&lt;div ng-repeat=\"row in [1,1,1]\"&gt;\n</code></pre>\n\n<p>However, changing the above code slightly to define an index to determine uniqueness as below will get it working again.</p>\n\n<pre><code>// this will work\n&lt;div ng-repeat=\"row in [1,1,1] track by $index\"&gt;\n</code></pre>\n\n<p>Official docs are here: <a href=\"https://docs.angularjs.org/error/ngRepeat/dupes\">https://docs.angularjs.org/error/ngRepeat/dupes</a></p>\n    "
}, {
    "t": "How is AngularJS different from jQuery",
    "l": "http://stackoverflow.com/questions/13151725/how-is-angularjs-different-from-jquery",
    "q": "\n\n<p>I only know one js library and that is <a href=\"http://jquery.com/\">jQuery</a>.<br>\nBut my other coders in the group are changing <a href=\"http://angularjs.org/\">AngularJS</a> as their default library in new project.</p>\n\n<p>I don't know anything about it. How is it different from jQuery?<br>\nI already have a set of functions done for similar tasks in jQuery. Can I still use jQuery stuff with AngularJS?</p>\n    ",
    "a": "\n<p>Basically, jQuery is a great tool for you to manipulate and control DOM elements.\nIf you only focus on DOM elements and no Data CRUD, like building a website not web application, jQuery is the one of the top tools. (You can use AngularJS for this purpose as well.)</p>\n\n<p>AngularJS is a <strong>framework</strong>. It has following features</p>\n\n<ol>\n<li>Two way data binding</li>\n<li>MVW pattern (MVC-ish)</li>\n<li>Template</li>\n<li>Custom-directive (reusable components, custom markup)</li>\n<li>REST-friendly</li>\n<li>Deep Linking (set up a link for any dynamic page)</li>\n<li>Form Validation</li>\n<li>Server Communication</li>\n<li>Localization</li>\n<li>Dependency injection</li>\n<li>Full testing environment (both unit, e2e)</li>\n</ol>\n\n<p>check this <a href=\"http://sberan.github.com/angularTalk/\">presentation</a> and this <a href=\"http://www.yearofmoo.com/2012/08/use-angularjs-to-power-your-web-application.html\">badass introduction</a> </p>\n\n<p>Don't forget to read the official <a href=\"http://docs.angularjs.org/guide/\">developer guide</a> </p>\n\n<p>Or learn it from these awesome <a href=\"http://egghead.io/\">video tutorials</a> </p>\n\n<p>If you wanna watch more tutorial video, check out this post, <a href=\"http://www.thesocialmediatoday.com/collection-of-best-60-angularjs-tutorials/\">Collection of best 60+ Angularjs tutorials</a>.</p>\n\n<p>You can use jQuery with AngularJS without any issue. </p>\n\n<p>In fact, AngularJS uses jQuery lite in it. Like I said jQ is a great tool.</p>\n\n<p>From <a href=\"http://docs.angularjs.org/misc/faq\">FAQ</a></p>\n\n<blockquote>\n  <p>Does Angular use the jQuery library?</p>\n  \n  <p>Yes, Angular can use jQuery if it's present in your app when the\n  application is being bootstrapped. If jQuery is not present in your\n  script path, Angular falls back to its own implementation of the\n  subset of jQuery that we call jQLite.</p>\n</blockquote>\n\n<p>However, don't try to use jQuery to modify the DOM in AngularJS controllers, do it in your directives.</p>\n    "
}, {
    "t": "AngularJS ng-include",
    "l": "http://stackoverflow.com/questions/13943471/angularjs-ng-include",
    "q": "\n\n<p>I'm trying to include an html snippet inside of an <code>ng-repeat</code>, but I can't get the include to work. It seems the current syntax of <code>ng-include</code> is different than what it was previously: I see many examples using <code>&lt;div ng-include src=\"path/file.html\"&gt;&lt;/div&gt;</code> but in the <a href=\"http://docs.angularjs.org/api/ng.directive:ngInclude#Usage\">official docs</a>, it says to use <code>&lt;div ng-include=\"path/file.html\"&gt;&lt;/div&gt;</code> but then <a href=\"http://docs.angularjs.org/api/ng.directive:ngInclude#Example\">down the page</a> it is shown as <code>&lt;div ng-include src=\"path/file.html\"&gt;&lt;/div&gt;</code>.</p>\n\n<p>Regardles, I tried</p>\n\n<blockquote>\n  <p><code>&lt;div ng-include=\"views/sidepanel.html\"&gt;&lt;/div&gt;</code></p>\n  \n  <p><code>&lt;div ng-include src=\"views/sidepanel.html\"&gt;&lt;/div&gt;</code></p>\n  \n  <p><code>&lt;ng-include src=\"views/sidepanel.html\"&gt;&lt;/ng-include&gt;</code></p>\n  \n  <p><code>&lt;ng-include=\"views/sidepanel.html\"&gt;&lt;/ng-include&gt;</code></p>\n  \n  <p><code>&lt;ng:include src=\"views/sidepanel.html\"&gt;&lt;/ng:include&gt;</code></p>\n</blockquote>\n\n<p>My snippet is not very much code, but it's got a lot going on; I read in <a href=\"http://stackoverflow.com/questions/12361680/\">SO#12361680</a> that that could cause a problem, so I replaced the content of <code>sidepanel.html</code> with just the word <code>foo</code>, and still nothing.</p>\n\n<p>I also tried declaring the template directly in the page like this:</p>\n\n<pre><code>&lt;script type=\"text/ng-template\" id=\"tmpl\"&gt;\n    foo\n&lt;/script&gt;\n</code></pre>\n\n<p>And running thru all the variations of <code>ng-include</code> referencing the script's <code>id</code>, and still nothin'.</p>\n\n<p>My page had a lot more in it, but now I've stripped it down to just this:</p>\n\n<pre><code>&lt;!-- index.html --&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;!-- angular includes --&gt;\n&lt;/head&gt;\n&lt;body ng-view=\"views/main.html\"&gt; &lt;!-- view is actually set in the router --&gt;\n    &lt;!-- views/main.html --&gt;\n    &lt;header&gt;\n        &lt;h2&gt;Blah&lt;/h2&gt;\n    &lt;/header&gt;\n    &lt;article id=\"sidepanel\"&gt;\n        &lt;section class=\"panel\"&gt; &lt;!-- will have ng-repeat=\"panel in panels\" --&gt;\n            &lt;div ng-include src=\"views/sidepanel.html\"&gt;&lt;/div&gt;\n        &lt;/section&gt;\n    &lt;/article&gt;\n&lt;!-- index.html --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The header renders, but then my template doesn't. I get no errors in console or from Node, and if I click the link in <code>src=\"views/sidepanel.html\"</code> in dev tools, it takes me to my template (and displays <code>foo</code>).</p>\n    ",
    "a": "\n<p>You have to single quote your <code>src</code> string inside of the double quotes:</p>\n\n<pre><code>&lt;div ng-include src=\"'views/sidepanel.html'\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"https://groups.google.com/d/msg/angular/PNK5_uvm1v8/3nXLipPzWvMJ\">Source</a></p>\n    "
}, {
    "t": "Watch multiple $scope attributes",
    "l": "http://stackoverflow.com/questions/11952579/watch-multiple-scope-attributes",
    "q": "\n\n<p>Is there a way to subscribe to events on multiple objects using <code>$watch</code></p>\n\n<p>E.g.</p>\n\n<pre><code>$scope.$watch('item1, item2', function () { });\n</code></pre>\n    ",
    "a": "\n<p>Starting from AngularJS 1.3 there's a new method called <a href=\"https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24watchGroup\"><code>$watchGroup</code></a> for observing a set of expressions.</p>\n\n<pre><code>$scope.foo = 'foo';\n$scope.bar = 'bar';\n\n$scope.$watchGroup(['foo', 'bar'], function(newValues, oldValues, scope) {\n  // newValues array contains the current values of the watch expressions\n  // with the indexes matching those of the watchExpression array\n  // i.e.\n  // newValues[0] -&gt; $scope.foo \n  // and \n  // newValues[1] -&gt; $scope.bar \n});\n</code></pre>\n    "
}, {
    "t": "AngularJS passing data to $http.get request",
    "l": "http://stackoverflow.com/questions/13760070/angularjs-passing-data-to-http-get-request",
    "q": "\n\n<p>I have a function which does a http POST request. The code is specified below. This works fine.</p>\n\n<pre><code> $http({\n  url: user.update_path, \n  method: \"POST\",\n  data: {user_id: user.id, draft: true}\n });\n</code></pre>\n\n<p>I have another function for http GET and i want to send data to that request. But i dont have that option in get.</p>\n\n<pre><code> $http({\n  url: user.details_path, \n  method: \"GET\",\n  data: {user_id: user.id}\n });\n</code></pre>\n\n<p>The syntax for http.get is</p>\n\n<p><strong>get(url, config)</strong></p>\n\n<p>Can someone help me with this.</p>\n    ",
    "a": "\n<p>A HTTP GET request can't contain data to be posted to the server. However you can add a query string to the request. </p>\n\n<p>angular.http provides an option for it <code>params</code>.</p>\n\n<pre><code>$http({\n    url: user.details_path, \n    method: \"GET\",\n    params: {user_id: user.id}\n });\n</code></pre>\n\n<p>See: <a href=\"http://docs.angularjs.org/api/ng.%24http#get\">http://docs.angularjs.org/api/ng.$http#get</a></p>\n    "
}, {
    "t": "How to watch service variables?",
    "l": "http://stackoverflow.com/questions/12576798/how-to-watch-service-variables",
    "q": "\n\n<p>I have a service, say:</p>\n\n<pre><code>factory('aService', ['$rootScope', '$resource', function ($rootScope, $resource) {\n  var service = {\n    foo: []\n  };\n\n  return service;\n}]);\n</code></pre>\n\n<p>And I would like to use <code>foo</code> to control a list that is rendered in HTML:</p>\n\n<pre><code>&lt;div ng-controller=\"FooCtrl\"&gt;\n  &lt;div ng-repeat=\"item in foo\"&gt;{{ item }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In order for the controller to detect when <code>aService.foo</code> is updated I have cobbled together this pattern where I add aService to the controller's <code>$scope</code> and then use <code>$scope.$watch()</code>:</p>\n\n<pre><code>function FooCtrl($scope, aService) {                                                                                                                              \n  $scope.aService = aService;\n  $scope.foo = aService.foo;\n\n  $scope.$watch('aService.foo', function (newVal, oldVal, scope) {\n    if(newVal) { \n      scope.foo = newVal;\n    }\n  });\n}\n</code></pre>\n\n<p>This feels long-handed, and I've been repeating it in every controller that uses the service's variables.  Is there a better way to accomplish watching shared variables?</p>\n    ",
    "a": "\n<p>You can always use the good old observer pattern if you want to avoid the tyranny and overhead of <code>$watch</code>.</p>\n\n<p>In the service:</p>\n\n<pre><code>factory('aService', function() {\n  var observerCallbacks = [];\n\n  //register an observer\n  this.registerObserverCallback = function(callback){\n    observerCallbacks.push(callback);\n  };\n\n  //call this when you know 'foo' has been changed\n  var notifyObservers = function(){\n    angular.forEach(observerCallbacks, function(callback){\n      callback();\n    });\n  };\n\n  //example of when you may want to notify observers\n  this.foo = someNgResource.query().$then(function(){\n    notifyObservers();\n  });\n});\n</code></pre>\n\n<p>And in the controller:</p>\n\n<pre><code>function FooCtrl($scope, aService){\n  var updateFoo = function(){\n    $scope.foo = aService.foo;\n  };\n\n  aService.registerObserverCallback(updateFoo);\n  //service now in control of updating foo\n};\n</code></pre>\n    "
}, {
    "t": "How to dynamically change header based on angularjs partial view?",
    "l": "http://stackoverflow.com/questions/12506329/how-to-dynamically-change-header-based-on-angularjs-partial-view",
    "q": "\n\n<p>I am using ng-view to include Angularjs partial views, and I want to update the page title and h1 header tags based on the included view. These are out of scope of the partial view controllers though, and so I can't figure out how to bind them to data set in the controllers.</p>\n\n<p>If it was ASP.net MVC you could use @ViewBag to do this, but I don't know the equivalent in angularjs. I've searched about shared services, events etc but still can't get it working. Any way to modify my example so it works would be much appreciated. </p>\n\n<p>My HTML:</p>\n\n<pre><code>&lt;html data-ng-app=\"myModule\"&gt;\n&lt;head&gt;\n&lt;!-- include js files --&gt;\n&lt;title&gt;&lt;!-- should changed when ng-view changes --&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;&lt;!-- should changed when ng-view changes --&gt;&lt;/h1&gt;\n\n&lt;div data-ng-view&gt;&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>My Javascript:</p>\n\n<pre><code>var myModule = angular.module('myModule', []);\nmyModule.config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n        when('/test1', {templateUrl: 'test1.html', controller: Test1Ctrl}).\n        when('/test2', {templateUrl: 'test2.html', controller: Test2Ctrl}).\n        otherwise({redirectTo: '/test1'});\n}]);\n\nfunction Test1Ctrl($scope, $http) { $scope.header = \"Test 1\"; \n                                  /* ^ how can I put this in title and h1 */ }\nfunction Test2Ctrl($scope, $http) { $scope.header = \"Test 2\"; }\n</code></pre>\n    ",
    "a": "\n<p>You could define controller at the <code>&lt;html&gt;</code> level.</p>\n\n<pre><code> &lt;html ng-app=\"app\" ng-controller=\"titleCtrl\"&gt;\n   &lt;head&gt;\n     &lt;title&gt;{{ Page.title() }}&lt;/title&gt;\n ...\n</code></pre>\n\n<p>You create service: <code>Page</code> and modify from controllers.</p>\n\n<pre><code>myModule.factory('Page', function() {\n   var title = 'default';\n   return {\n     title: function() { return title; },\n     setTitle: function(newTitle) { title = newTitle }\n   };\n});\n</code></pre>\n\n<p>Inject <code>Page</code> and Call 'Page.setTitle()' from controllers.</p>\n\n<p>Here is the concrete example:  <a href=\"http://plnkr.co/edit/0e7T6l\">http://plnkr.co/edit/0e7T6l</a></p>\n    "
}, {
    "t": "AngularJS with Django - Conflicting template tags",
    "l": "http://stackoverflow.com/questions/8302928/angularjs-with-django-conflicting-template-tags",
    "q": "\n\n<p>I want to use AngularJS with Django however they both use <code>{{ }}</code> as their template tags.  Is there an easy way to change one of the two to use some other custom templating tag?</p>\n    ",
    "a": "\n<p>For Angular 1.0 you should use the $interpolateProvider apis to configure the interpolation symbols: <a href=\"http://docs.angularjs.org/api/ng.%24interpolateProvider\">http://docs.angularjs.org/api/ng.$interpolateProvider</a>.</p>\n\n<p>Something like this should do the trick:</p>\n\n<pre><code>myModule.config(function($interpolateProvider) {\n  $interpolateProvider.startSymbol('{[{');\n  $interpolateProvider.endSymbol('}]}');\n});\n</code></pre>\n\n<p>Keep in mind two things:</p>\n\n<ul>\n<li>mixing server-side and client-side templates is rarely a good idea and should be used with caution. The main issues are: maintainability  (hard to read) and security (double interpolation could expose a new security vector - e.g. while escaping of serverside and clientside templating by themselves might be secure, their combination might not be).</li>\n<li>if you start using third-party directives (components) that use <code>{{ }}</code> in their templates then your configuration will break them. (<a href=\"https://github.com/angular/angular.js/pull/1256\">fix pending</a>)</li>\n</ul>\n\n<p>While there is nothing we can do about the first issue, except for warning people, we do need to address the second issue.</p>\n    "
}, {
    "t": "Difference between the $observe and $watch methods",
    "l": "http://stackoverflow.com/questions/14876112/difference-between-the-observe-and-watch-methods",
    "q": "\n\n<p>I know that both <code>Watchers</code> and <code>Observers</code> are computed as soon as something in <code>$scope</code> changes in AngularJS. But couldn't understand what exactly is the difference between the two.</p>\n\n<p>My initial understanding is that <code>Observers</code> are computed for angular expressions which are conditions on the HTML side where as <code>Watchers</code> executed when <code>$scope.$watch()</code> function is executed. Am I thinking properly?</p>\n    ",
    "a": "\n<p><strong><a href=\"https://docs.angularjs.org/api/ng.$compile.directive.Attributes#$observe\">$observe()</a></strong> is a method on the <a href=\"http://docs.angularjs.org/api/ng.$compile.directive.Attributes\">Attributes</a> object, and as such, it can only be used to observe/watch the value change of a DOM attribute.  It is only used/called inside directives.  Use $observe when you need to observe/watch a DOM attribute that contains interpolation (i.e., {{}}'s). \n<br>E.g., <code>attr1=\"Name: {{name}}\"</code>, then in a directive: <code>attrs.$observe('attr1', ...)</code>. \n<br>(If you try <code>scope.$watch(attrs.attr1, ...)</code> it won't work because of the {{}}s -- you'll get <code>undefined</code>.)  Use $watch for everything else.</p>\n\n<p><strong><a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch\">$watch()</a></strong> is more complicated.  It can observe/watch an \"expression\", where the expression can be either a function or a string.  If the expression is a string, it is <a href=\"http://docs.angularjs.org/api/ng.$parse\">$parse</a>'d (i.e., evaluated as an <a href=\"http://docs.angularjs.org/guide/expression\">Angular expression</a>) into a function.  (It is this function that is called every digest cycle.)  The string expression can not contain {{}}'s.  $watch is a method on the <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope\">Scope</a> object, so it can be used/called wherever you have access to a scope object, hence in </p>\n\n<ul>\n<li>a controller -- any controller -- one created via ng-view, ng-controller, or a directive controller</li>\n<li>a linking function in a directive, since this has access to a scope as well</li>\n</ul>\n\n<p>Because strings are evaluated as Angular expressions, $watch is often used when you want to observe/watch a model/scope property.  E.g., <code>attr1=\"myModel.some_prop\"</code>, then in a controller or link function: <code>scope.$watch('myModel.some_prop', ...)</code> or <code>scope.$watch(attrs.attr1, ...)</code> (or <code>scope.$watch(attrs['attr1'], ...)</code>).\n<br>(If you try <code>attrs.$observe('attr1')</code> you'll get the string <code>myModel.some_prop</code>, which is probably not what you want.)</p>\n\n<p>As discussed in comments on @PrimosK's answer, all $observes and $watches are checked every <a href=\"http://docs.angularjs.org/guide/concepts\">digest cycle</a>.</p>\n\n<p>Directives with isolate scopes are more complicated.  If the '@' syntax is used, you can $observe <em>or $watch</em> a DOM attribute that contains interpolation (i.e., {{}}'s).  (The reason it works with $watch is because the '@' syntax does the <a href=\"http://docs.angularjs.org/api/ng.$interpolate\">interpolation</a> for us, hence $watch sees a string without {{}}'s.)  To make it easier to remember which to use when, I suggest using $observe for this case also.</p>\n\n<p>To help test all of this, I wrote a <a href=\"http://plnkr.co/edit/HBha8sVdeCqhJtQghGxw?p=preview\">Plunker</a> that defines two directives.  One (<code>d1</code>) does not create a new scope, the other (<code>d2</code>) creates an isolate scope.  Each directive has the same six attributes.  Each attribute is both $observe'd and $watch'ed.</p>\n\n<pre><code>&lt;div d1 attr1=\"{{prop1}}-test\" attr2=\"prop2\" attr3=\"33\" attr4=\"'a_string'\"\n        attr5=\"a_string\" attr6=\"{{1+aNumber}}\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Look at the console log to see the differences between $observe and $watch in the linking function.  Then click the link and see which $observes and $watches are triggered by the property changes made by the click handler.</p>\n\n<p>Notice that when the link function runs, any attributes that contain {{}}'s are not evaluated yet (so if you try to examine the attributes, you'll get <code>undefined</code>).  The only way to see the interpolated values is to use $observe (or $watch if using an isolate scope with '@').  Therefore, getting the values of these attributes is an <em>asynchronous</em> operation.  (And this is why we need the $observe and $watch functions.)</p>\n\n<p>Sometimes you don't need $observe or $watch.  E.g., if your attribute contains a number or a boolean (not a string), just evaluate it once: <code>attr1=\"22\"</code>, then in, say, your linking function: <code>var count = scope.$eval(attrs.attr1)</code>.  If it is just a constant string – <code>attr1=\"my string\"</code> – then just use <code>attrs.attr1</code> in your directive (no need for $eval()).</p>\n\n<p>See also <a href=\"https://groups.google.com/d/msg/angular/TbRQhG-G14I/bYcipV1OYwcJ\">Vojta's google group post</a> about $watch expressions.</p>\n    "
}, {
    "t": "How to display length of filtered ng-repeat data",
    "l": "http://stackoverflow.com/questions/15316363/how-to-display-length-of-filtered-ng-repeat-data",
    "q": "\n\n<p>I have a data array which contains many objects (JSON format). The following can be assumed as  the contents of this array:</p>\n\n<pre><code>var data = [\n  {\n    \"name\": \"Jim\",\n    \"age\" : 25\n  },\n  {\n    \"name\": \"Jerry\",\n    \"age\": 27\n  }\n];\n</code></pre>\n\n<p>Now, I display these details as:</p>\n\n<pre><code>&lt;div ng-repeat=\"person in data | filter: query\"&gt;\n&lt;/div\n</code></pre>\n\n<p>Here, query is modeled to an input field in which the user can restrict the data displayed.</p>\n\n<p>Now, I have another location in which I display the current count of people / person being display, i.e <code>Showing {{data.length}} Persons</code>  </p>\n\n<p>What I want to do is that when the user searches for a person and the data displayed is filtered based on the query, the <code>Showing...persons</code> also change the value of people being shown currently. But it is not happening. It always displays the total persons in data rather than the filtered one - how do I get the count of filtered data?</p>\n    ",
    "a": "\n<p>Assign the results to a new variable (e.g. <code>filtered</code>) and access it:</p>\n\n<pre><code>&lt;div ng-repeat=\"person in filtered = (data | filter: query)\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Display the number of results:</p>\n\n<pre><code>Showing {{filtered.length}} Persons\n</code></pre>\n\n<p>Fiddle a <a href=\"http://jsfiddle.net/joshkurz/Nk8qy/3/\">similar example</a>. Credits go to <a href=\"https://groups.google.com/forum/#!topic/angular/7WY_BmFzd3U\">Pawel Kozlowski</a></p>\n    "
}, {
    "t": "MVW - What does it stand for?",
    "l": "http://stackoverflow.com/questions/13329485/mvw-what-does-it-stand-for",
    "q": "\n\n<p>Here's the content description for AngularJS page:</p>\n\n<blockquote>\n  <p>AngularJS is what HTML would have been, had it been designed for building web-apps. Declarative templates with data-binding, MVW, MVVM, MVC, dependency injection and great testability story all implemented with pure client-side JavaScript!</p>\n</blockquote>\n\n<p>So what does MVW stand for?\n(Considering the MVC, MVVW, MVP etc squabble, I would guess \"whatever\", Model-View-Whatever =P)</p>\n    ",
    "a": "\n<p>It stands indeed for whatever, as in <a href=\"https://plus.google.com/+AngularJS/posts/aZNVhj355G2\">whatever works for you</a></p>\n    "
}, {
    "t": "Difference between MEAN.js and MEAN.io",
    "l": "http://stackoverflow.com/questions/23199392/difference-between-mean-js-and-mean-io",
    "q": "\n\n<p>I wanted to use the MEAN JavaScript Stack, but I noticed that there are two different stacks with either their own website and installation methods: mean.js and mean.io. So I came up asking myself this question: \"Which one do I use?\".</p>\n\n<p>So in order to answer this question I ask the community if you could explain what are the differences between these two? And if possible pros and cons? Because they look very similar to me.</p>\n    ",
    "a": "\n<p>They're essentially the same... They both use swig for templating, they both use karma and mocha for tests, passport integration, nodemon, etc. </p>\n\n<p>Why so similar? Mean.js is a fork of Mean.io and both initiatives were started by <a href=\"https://github.com/amoshaviv\" rel=\"nofollow\">the same guy</a>... Mean.io is now under the umbrella of the company Linnovate and looks like the guy (Amos Haviv) stopped his collaboration with this company and started Mean.js. You can read more about the reasons <a href=\"http://blog.meanjs.org/post/76726660228/forking-out-of-an-open-source-conflict\" rel=\"nofollow\">here</a>. </p>\n\n<p>Now... main (or little) differences you can see right now are:</p>\n\n<p><br></p>\n\n<p><strong>SCAFFOLDING AND BOILERPLATE GENERATION</strong></p>\n\n<p>Mean.io uses a custom cli tool named 'mean'<br>\nMean.js uses Yeoman Generators</p>\n\n<p><br>\n<strong>MODULARITY</strong></p>\n\n<p>Mean.io uses a more self-contained node packages modularity with client and server files inside the modules.<br>\nMean.js uses modules just in the front-end (for angular), and connects them with Express. Although they were working on vertical modules as well...</p>\n\n<p><br>\n<strong>BUILD SYSTEM</strong></p>\n\n<p>Mean.io has recently moved to gulp<br>\nMean.js uses grunt</p>\n\n<p><br>\n<strong>DEPLOYMENT</strong></p>\n\n<p>Both have Dockerfiles in their respective repos, and Mean.io has one-click install on <a href=\"https://cloud.google.com/solutions/mean/click-to-deploy\" rel=\"nofollow\">Google Compute Engine</a>, while Mean.js can also be deployed with <a href=\"https://www.digitalocean.com/features/one-click-apps/mean/\" rel=\"nofollow\">one-click install on Digital Ocean</a>.</p>\n\n<p><br>\n<strong>DOCUMENTATION</strong></p>\n\n<p>Mean.io has ok docs<br>\nMean.js has AWESOME docs</p>\n\n<p><br>\n<strong>COMMUNITY</strong></p>\n\n<p>Mean.io has a bigger community since it was the original boilerplate<br>\nMean.js has less momentum but steady growth</p>\n\n<p><br>\nOn a personal level, I like more the philosophy and openness of MeanJS and more the traction and modules/packages approach of MeanIO. Both are nice, and you'll end probably modifying them, so you can't really go wrong picking one or the other. Just take them as starting point and as a learning exercise.</p>\n\n<p><br></p>\n\n<h2>ALTERNATIVE “MEAN” SOLUTIONS</h2>\n\n<p>MEAN is a generic way (coined by <a href=\"http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and\" rel=\"nofollow\">Valeri Karpov</a>) to describe a boilerplate/framework that takes \"Mongo + Express + Angular + Node\" as the base of the stack. You can find frameworks with this stack that use other denomination, some of them really good for RAD (Rapid Application Development) and building SPAs. Eg:</p>\n\n<ul>\n<li><strong><a href=\"https://www.meteor.com/\" rel=\"nofollow\">Meteor</a></strong>. Now with official <a href=\"http://angular-meteor.com/\" rel=\"nofollow\">Angular support</a>, represents a <a href=\"http://info.meteor.com/blog/thoughts-on-angular-meteor-as-a-great-mean-stack\" rel=\"nofollow\">great MEAN stack</a> </li>\n<li><a href=\"http://strongloop.com/mobile-application-development/loopback/\" rel=\"nofollow\">StrongLoop Loopback</a> (main Node.js core contributors and <a href=\"http://strongloop.com/strongblog/tj-holowaychuk-sponsorship-of-express/\" rel=\"nofollow\">Express maintainers</a>)</li>\n<li><a href=\"https://github.com/DaftMonk/generator-angular-fullstack\" rel=\"nofollow\">Generator Angular Fullstack</a></li>\n<li><a href=\"http://www.quora.com/Node-js/Should-I-use-a-MEAN-stack-or-Angular-+-Sails-js-for-a-node-js-powered-back-end-structure-or-framework\" rel=\"nofollow\">Sails.js</a></li>\n<li><a href=\"http://cleverstack.io/\" rel=\"nofollow\">Cleverstack</a></li>\n<li>Deployd, etc (there are more)</li>\n</ul>\n\n<p>You also have <a href=\"https://github.com/sahat/hackathon-starter\" rel=\"nofollow\">Hackathon Starter</a>. It doesn't have A of MEAN (it is 'MEN'), but it rocks..</p>\n\n<p>Have fun!</p>\n    "
}, {
    "t": "Angular JS ng-repeat handle empty list case",
    "l": "http://stackoverflow.com/questions/12340095/angular-js-ng-repeat-handle-empty-list-case",
    "q": "\n\n<p>I thought this would be a very common thing but couldn't find how to handle it in Angular JS. Let's say I have a list of events and want to output them with angular, then that's pretty easy:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"event in events\"&gt;{{event.title}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>But how do I handle the case when the list is empty? I want to have a message box in place where the list is with something like \"No events\" or similar. The only thing that would come close is the <code>ng-switch</code> with <code>events.length</code> (how do I check if empty when an object and not an array?), but is that really the only option I have?</p>\n    ",
    "a": "\n<p>You can use <a href=\"http://docs.angularjs.org/api/ng.directive%3angShow\">ngShow</a>.</p>\n\n<pre><code>&lt;li ng-show=\"!events.length\"&gt;No events&lt;/li&gt;\n</code></pre>\n\n<p>See <a href=\"http://jsfiddle.net/C29As/\">example</a>.</p>\n\n<p>Or you can use <a href=\"http://docs.angularjs.org/api/ng.directive%3angHide\">ngHide</a></p>\n\n<pre><code>&lt;li ng-hide=\"events.length\"&gt;No events&lt;/li&gt;\n</code></pre>\n\n<p>See <a href=\"http://jsfiddle.net/C29As/37/\">example</a>.</p>\n\n<p>For object you can test <a href=\"http://stackoverflow.com/a/6921193/457375\">Object.keys</a>.</p>\n    "
}, {
    "t": "Angular directives - when and how to use compile, controller, pre-link and post-link [closed]",
    "l": "http://stackoverflow.com/questions/24615103/angular-directives-when-and-how-to-use-compile-controller-pre-link-and-post",
    "q": "\n\n<p>When writing an Angular directive, one can use any of the following functions to manipulate the DOM behaviour, contents and look of the element on which the directive is declared:</p>\n\n<ul>\n<li>compile</li>\n<li>controller</li>\n<li>pre-link</li>\n<li>post-link</li>\n</ul>\n\n<p>There seem to be some confusion as for which function should one use. This question covers:</p>\n\n<h2>Directive basics</h2>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/a/24615123/1179377\">How to declare the various functions?</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615137/1179377\">What is the difference between a <em>source template</em> and an <em>instance template</em>?</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615162/1179377\">In which order the directive functions are executed?</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615185/1179377\">What else happens between these function calls?</a></li>\n</ul>\n\n<h2>Function nature, do's and dont's</h2>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/a/24615207/1179377\">Compile</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615239/1179377\">Controller</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615261/1179377\">Pre-link</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615104/1179377\">Post-link</a></li>\n</ul>\n\n<h2>Related questions:</h2>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/15676614/\">Directive: link vs compile vs controller</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/12546945\">Difference between the 'controller', 'link' and 'compile' functions when defining an angular.js directive</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/12164138\">What is the difference between compile and link function in angularjs</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/17534343\">Difference between the pre-compile and post-compile element in AngularJS directives?</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/23770882\">Angular JS Directive - Template, compile or link?</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/18297208\">post link vs pre link in Angular js directives</a>.</li>\n</ul>\n    ",
    "a": "\n<h1>In which order the directive functions are executed?</h1>\n\n<h2>For a single directive</h2>\n\n<p>Based on the following <a href=\"http://plnkr.co/edit/wIhRr0\">plunk</a>, consider the following HTML markup:</p>\n\n<pre><code>&lt;body&gt;\n    &lt;div log='some-div'&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>With the following directive declaration:</p>\n\n<pre><code>myApp.directive('log', function() {\n\n    return {\n        controller: function( $scope, $element, $attrs, $transclude ) {\n            console.log( $attrs.log + ' (controller)' );\n        },\n        compile: function compile( tElement, tAttributes ) {\n            console.log( tAttributes.log + ' (compile)'  );\n            return {\n                pre: function preLink( scope, element, attributes ) {\n                    console.log( attributes.log + ' (pre-link)'  );\n                },\n                post: function postLink( scope, element, attributes ) {\n                    console.log( attributes.log + ' (post-link)'  );\n                }\n            };\n         }\n     };  \n\n});\n</code></pre>\n\n<p>The console output will be:</p>\n\n<pre><code>some-div (compile)\nsome-div (controller)\nsome-div (pre-link)\nsome-div (post-link)\n</code></pre>\n\n<p>We can see that <code>compile</code> is executed first, then <code>controller</code>, then <code>pre-link</code> and finally followed by <code>post-link</code>.</p>\n\n<h2>For nested directives</h2>\n\n<blockquote>\n  <p><strong>Note:</strong> The following does not apply to directives that render their children in their link function. Quite a few Angular directives (like ngIf, ngRepeat, or any directive with <code>transclude</code>) do so. These type of directives will natively have their <code>link</code> function called <em>before</em> their child directives <code>compile</code> is called.</p>\n</blockquote>\n\n<p>The original HTML markup is often made of nested elements, each with its own directive. Like in the following markup (see <a href=\"http://plnkr.co/edit/pWJhfgdA2iDzSKV5bjyh\">plunk</a>):</p>\n\n<pre><code>&lt;body&gt;\n    &lt;div log='parent'&gt;\n        &lt;div log='..first-child'&gt;&lt;/div&gt;\n        &lt;div log='..second-child'&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>The console output will look like this (without the comments):</p>\n\n<pre><code>// The compile phase\nparent (compile)\n..first-child (compile)\n..second-child (compile)\n\n// The link phase   \nparent (controller)\nparent (pre-link)\n..first-child (controller)\n..first-child (pre-link)\n..first-child (post-link)\n..second-child (controller)\n..second-child (pre-link)\n..second-child (post-link)\nparent (post-link)\n</code></pre>\n\n<p>We can distinguish two phases here - the <em>compile</em> phase and the <em>link</em> phase.</p>\n\n<h3>The compile phase</h3>\n\n<p>When the DOM is loaded Angular starts the compile phase, where it traverses the markup top-down, and calls <code>compile</code> on all directives. Graphically, we could express it like so:</p>\n\n<p><img src=\"http://i.stack.imgur.com/PZPOm.png\" alt=\"An image illustrating the compilation loop for children\"></p>\n\n<p>It is perhaps important to mention that at this stage, the templates the compile function gets are the source templates (not instance template).</p>\n\n<h3>The link phase</h3>\n\n<p>DOM instances are often simply the result of a source template being rendered to the DOM, but they may be created by <code>ng-repeat</code>, or introduced on the fly.</p>\n\n<p>Whenever a new instance of an element with a directive is rendered to the DOM, the link phase starts.</p>\n\n<p>In this phase, Angular calls <code>controller</code>, <code>pre-link</code>, iterates children, and call <code>post-link</code> on all directives, like so:</p>\n\n<p><img src=\"http://i.stack.imgur.com/XRDs6.png\" alt=\"An illustration demonstrating the link phase steps\"></p>\n    "
}, {
    "t": "Global variables in AngularJS",
    "l": "http://stackoverflow.com/questions/11938380/global-variables-in-angularjs",
    "q": "\n\n<p>I have a problem where i'm initialising a variable on the scope in a controller. Then it gets changed in another controller when a user logs in. This variable is used to control things such as the navigation bar and restricts access to parts of the site depending on the type of user, so its important that it holds its value. The problem with it is that the controller that initialises it, gets called again by angular some how and then resets the variable back to its initial value. </p>\n\n<p>I assume this is not the correct way of declaring and initialising global variables, well its not really global, so my question is what is the correct way and is there any good examples around that work with the current version of angular?</p>\n    ",
    "a": "\n<p>You've got basically 2 options for \"global\" variables:</p>\n\n<ul>\n<li>use a <code>$rootScope</code> <a href=\"http://docs.angularjs.org/api/ng.$rootScope\">http://docs.angularjs.org/api/ng.$rootScope</a></li>\n<li>use a service <a href=\"http://docs.angularjs.org/guide/services\">http://docs.angularjs.org/guide/services</a></li>\n</ul>\n\n<p><code>$rootScope</code> is a parent of all scopes so values exposed there will be visible in all templates and controllers. Using the <code>$rootScope</code> is very easy as you can simply inject it into any controller and change values in this scope. It might be convenient but has all the <a href=\"http://c2.com/cgi/wiki?GlobalVariablesAreBad\">problems of global variables</a>.</p>\n\n<p>Services are singletons that you can inject to any controller and expose their values in a controller's scope. Services, being singletons are still 'global' but you've got far better control over where those are used and exposed.</p>\n\n<p>Using services is a bit more complex, but not that much, here is an example:</p>\n\n<pre><code>var myApp = angular.module('myApp',[]);\nmyApp.factory('UserService', function() {\n  return {\n      name : 'anonymous'\n  };\n});\n</code></pre>\n\n<p>and then in a controller:</p>\n\n<pre><code>function MyCtrl($scope, UserService) {\n    $scope.name = UserService.name;\n}\n</code></pre>\n\n<p>Here is the working jsFiddle: <a href=\"http://jsfiddle.net/pkozlowski_opensource/BRWPM/2/\">http://jsfiddle.net/pkozlowski_opensource/BRWPM/2/</a></p>\n    "
}, {
    "t": "Prevent double curly brace notation from displaying momentarily before angular.js compiles/interpolates document",
    "l": "http://stackoverflow.com/questions/12866447/prevent-double-curly-brace-notation-from-displaying-momentarily-before-angular-j",
    "q": "\n\n<p>It seems to be primarily an issue in IE when there is a number of images/scripts to load, there can be a good amount of time where the literal <code>{{stringExpression}}</code> in the markup are displayed, then disappear once angular is done with it's compilation/interpolation of the document.</p>\n\n<p>Is there a common reason why this would happen which would indicate I'm doing something generally wrong, or is there a known way to prevent this?</p>\n    ",
    "a": "\n<p>I think that you are looking for the <code>ngCloak</code> directive: <a href=\"http://docs.angularjs.org/api/ng.directive:ngCloak\">http://docs.angularjs.org/api/ng.directive:ngCloak</a></p>\n\n<p>From the documentation:</p>\n\n<blockquote>\n  <p>The ngCloak directive is used to prevent the Angular html template\n  from being briefly displayed by the browser in its raw (uncompiled)\n  form while your application is loading. Use this directive to avoid\n  the undesirable flicker effect caused by the html template display.</p>\n  \n  <p>The directive can be applied to the <code>&lt;body&gt;</code> element, but typically a\n  fine-grained application is prefered in order to benefit from\n  progressive rendering of the browser view.</p>\n</blockquote>\n    "
}, {
    "t": "When writing a directive, how do I decide if a need no new scope, a new child scope, or a new isolate scope?",
    "l": "http://stackoverflow.com/questions/14914213/when-writing-a-directive-how-do-i-decide-if-a-need-no-new-scope-a-new-child-sc",
    "q": "\n\n<p>I'm looking for some guidelines that one can use to help determine which type of scope to use when writing a new directive.  Ideally, I'd like something similar to a flowchart that walks me though a bunch of questions and out pops the correct answer – no new new scope, new child scope, or new isolate scope – but that is likely asking for too much.  Here's my current paltry set of guidelines:</p>\n\n<ul>\n<li>don't use an isolate scope if the element that will use the directive uses ng-model \n<br>See <a href=\"http://stackoverflow.com/questions/11896732/ngmodel-and-component-with-isolated-scope\">ngModel and component with isolated scope</a> and <br> <a href=\"http://stackoverflow.com/questions/14495882/why-formatters-does-not-work-with-isolated-scope\">Why formatters does not work with isolated scope?</a></li>\n<li>if the directive doesn't modify any scope/model properties, don't create a new scope</li>\n<li>isolate scopes seem to work well if the directive is encapsulating a set of DOM elements (the <a href=\"http://docs.angularjs.org/guide/directive\">docs</a> say \"a complex DOM structure\") and the directive will be used as an element, or with no other directives on the same element</li>\n</ul>\n\n<p>I'm aware that using a directive with an isolate scope on an element forces all other directives on that same element to use the same (one) isolate scope, so doesn't this severely limit when an isolate scope can be used?</p>\n\n<p>I am hoping that some from the Angular-UI team (or others that have written many directives) can share their experiences.</p>\n\n<p>Please don't add an answer that simply says \"use an isolate scope for reusable components\".</p>\n    ",
    "a": "\n<p>What a great question! I'd <em>love</em> to hear what others have to say, but here are the guidelines I use.</p>\n\n<p>The high-altitude premise: scope is used as the \"glue\" that we use to communicate between the parent controller, the directive, and the directive template.</p>\n\n<p><strong>Parent Scope:</strong> <code>scope: false</code>, so no new scope at all</p>\n\n<p>I don't use this very often, but as @MarkRajcok said, if the directive doesn't access any scope variables (and obviously doesn't set any!) then this is just fine as far as I am concerned. This is also helpful for child directives that are <em>only</em> used in the context of the parent directive (though there are always exceptions to this) and that don't have a template. Basically anything with a template doesn't belong sharing a scope, because you are inherently exposing that scope for access and manipulation (but I'm sure there are exceptions to this rule).</p>\n\n<p>As an example, I recently created a directive that draws a (static) vector graphic using an SVG library I'm in the process of writing. It <code>$observe</code>s two attributes (<code>width</code> and <code>height</code>) and uses those in its calculations, but it neither sets nor reads any scope variables and has no template. This is a good use case for not creating another scope; we don't need one, so why bother?</p>\n\n<p>But in another SVG directive, however, I required a set of data to use and additionally had to store a tiny bit of state. In this case, using the parent scope would be irresponsible (again, generally speaking). So instead...</p>\n\n<p><strong>Child Scope:</strong> <code>scope: true</code></p>\n\n<p>Directives with a child scope are context-aware and are intended to interact with the current scope.</p>\n\n<p>Obviously, a key advantage of this over an isolate scope is that the user is free to use interpolation on any attributes they want; e.g. using <code>class=\"item-type-{{item.type}}\"</code> on a directive with an isolate scope will not work by default, but works fine on one with a child scope because whatever is interpolated can still by default be found in the parent scope. Also, the directive itself can safely evaluate attributes and expressions in the context of its own scope without worrying about pollution in or damage to the parent.</p>\n\n<p>For example, a tooltip is something that just gets added; an isolate scope wouldn't work (by default, see below) because it is expected that we will use other directives or interpolated attributes here. The tooltip is just an enhancement. But the tooltip also needs to set some things on the scope to use with a sub-directive and/or template and obviously to manage its own state, so it would be quite bad indeed to use the parent scope. We are either polluting it or damaging it, and neither is bueno.</p>\n\n<p>I find myself using child scopes more often than isolate or parent scopes.</p>\n\n<p><strong>Isolate scope:</strong> <code>scope: {}</code></p>\n\n<p>This is for reusable components. :-) </p>\n\n<p>But seriously, I think of \"reusable components\" as \"self-contained components\". The intent is that they are to be used for a specific purpose, so combining them with other directives or adding other interpolated attributes to the DOM node inherently doesn't make sense.</p>\n\n<p>To be more specific, anything needed for this standalone functionality is provided through specified attributes evaluated in the context of the parent scope; they are either one-way strings ('@'), one-way expressions ('&amp;'), or two-way variable bindings ('='). </p>\n\n<p>On self-contained components, it doesn't make sense to need to apply other directives or attributes on it because it exists by itself. Its style is governed by its own template (if necessary) and can have the appropriate content transcluded (if necessary). It's standalone, so we put it in an isolate scope also to say: \"Don't mess with this. I'm giving you a defined API through these few attributes.\"</p>\n\n<p>A good best practice is to exclude as much template-based stuff from the directive link and controller functions as possible. This provides another \"API-like\" configuration point: the user of the directive can simply replace the template! The functionality all stayed the same, and its internal API was never touched, but we can mess with styling and DOM implementation as much as we need to. ui/bootstrap is a <em>great</em> example of how to do this well because Peter &amp; Pawel are awesome.</p>\n\n<p>Isolate scopes are also great for use with transclusion. Take tabs; they are not only the whole functionality, but whatever is <em>inside</em> of it can be evaluated freely from within the parent scope while leaving the tabs (and panes) to do whatever they want. The tabs clearly have their own <em>state</em>, which belongs on the scope (to interact with the template), but that state has nothing to do with the context in which it was used - it's entirely internal to what makes a tab directive a tab directive. Further, it doesn't make much sense to use any other directives with the tabs. They're tabs - and we already got that functionality!</p>\n\n<p>Surround it with more functionality or transclude more functionality, but the directive is what it is already.</p>\n\n<p>All that said, I should note that there are ways around some of the limitations (i.e. features) of an isolate scope, as @ProLoser hinted at in his answer. For example, in the child scope section, I mentioned interpolation on non-directive attributes breaking when using an isolate scope (by default). But the user could, for example, simply use <code>class=\"item-type-{{$parent.item.type}}\"</code> and it would once again work. So if there is a compelling reason to use an isolate scope over a child scope but you're worried about some of these limitations, know that you can work around virtually all of them if you need to.</p>\n\n<p><strong>Summary</strong></p>\n\n<p>Directives with no new scope are read-only; they're completely trusted (i.e. internal to the app) and they don't touch jack. Directives with a child scope <em>add</em> functionality, but they are not <em>the only</em> functionality. Lastly, isolate scopes are for directives that are the entire goal; they are standalone, so it's okay (and most \"correct\") to let them go rogue.</p>\n\n<p>I wanted to get my initial thoughts out, but as I think of more things, I'll update this. But holy crap - this is long for an SO answer...</p>\n\n<hr>\n\n<p>PS: Totally tangential, but since we're talking about scopes, I prefer to say \"prototypical\" whereas others prefer \"prototypal\", which seems to be more accurate but just rolls off the tongue not at all well. :-)</p>\n    "
}, {
    "t": "Typical Angular.js workflow and project structure (with Python Flask)",
    "l": "http://stackoverflow.com/questions/11522151/typical-angular-js-workflow-and-project-structure-with-python-flask",
    "q": "\n\n<p>I am pretty new to this whole MV* client-side framework frenzy. It doesn't have to be Angular.js, but I picked it because it feels more natural to me than either Knockout, Ember or Backbone. Anyway what is the workflow like? Do people start with developing a client-side application in Angular.js and then hooking up the back-end to it?\nOr the other way around by first building the back-end in Django, Flask, Rails and then attaching an Angular.js app to it? Is there a \"right\" way of doing it, or is it just a personal preference in the end?</p>\n\n<p>I am also not sure whether to structure my project according to the Flask or Angular.js? community practices.</p>\n\n<p>For example, Flask's minitwit app is structured like so:</p>\n\n<pre><code>minitwit\n|-- minitwit.py\n|-- static\n   |-- css, js, images, etc...\n`-- templates\n   |-- html files and base layout\n</code></pre>\n\n<p>Angular.js tutorial app is structured like this:</p>\n\n<pre><code>angular-phonecat\n|-- app\n    `-- css\n    `-- img\n    `-- js\n    `-- lib\n    `-- partials\n    `-- index.html\n|-- scripts\n `-- node.js server and test server files\n</code></pre>\n\n<p>I could picture a Flask app by itself, and it's fairly easy to see Angular.js app like ToDo List by itself but when it comes to using both of these technologies I don't understand how they work together. It almost seems like I don't need a server-side web-framework when you already have Angular.js, a simple Python web server will suffice. In the Angular to-do app for example they use MongoLab to talk to the database using Restful API. There was no need having a web framework on the back-end.</p>\n\n<p>Maybe I am just awfully confused, and Angular.js is nothing more than a fancy jQuery library so I should use just like I would use jQuery in my Flask projects (assuming I change Angular's template syntax to something that doesn't conflict with Jinja2). I hope my questions make some sense. I mainly work on the back-end and this client-side framework is an unknown territory for me.</p>\n    ",
    "a": "\n<p>I would start out by organizing the Flask app in the standard structure as follows:</p>\n\n<pre><code>app\n|-- app.py\n|-- static\n    |-- css\n    |-- img\n    |-- js\n|-- templates\n</code></pre>\n\n<p>And as btford mentioned, if you are doing an Angular app, you'll want to focus on using Angular client-side templates and stay away from server-side templates. Using render_template('index.html') will cause Flask to interpret your angular templates as jinja templates, so they won't render correctly. Instead, you'll want to do the following:</p>\n\n<pre><code>@app.route(\"/\")\ndef index():\n    return send_file('templates/index.html')\n</code></pre>\n\n<p>Note that using send_file() means that the files will be cached, so you might want to use make_response() instead, at least for development:</p>\n\n<pre><code>    return make_response(open('templates/index.html').read())\n</code></pre>\n\n<p>Afterwards, build out the AngularJS part of your app, modifying the app structure so that it looks like this:</p>\n\n<pre><code>app\n|-- app.py\n|-- static\n    |-- css\n    |-- img\n    |-- js\n        |-- app.js, controllers.js, etc.\n    |-- lib\n        |-- angular\n            |-- angular.js, etc.\n    |-- partials\n|-- templates\n    |-- index.html\n</code></pre>\n\n<p>Make sure your index.html includes AngularJS, as well as any other files:</p>\n\n<pre><code>&lt;script src=\"static/lib/angular/angular.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>At this point, you haven't yet constructed your RESTful API, so you can have your js controllers return predefined sample data (only a temporary setup). When you're ready, implement the RESTful API and hook it up to your angular app with angular-resource.js.</p>\n\n<p>EDIT: I put together an app template that, though a little more complex that what I've described above, illustrates how one could build an app with AngularJS + Flask, complete with communication between AngularJS and a simple Flask API. Here it is if you want to check it out: <a href=\"https://github.com/rxl/angular-flask\">https://github.com/rxl/angular-flask</a></p>\n    "
}, {
    "t": "How to use ng-repeat for dictionaries in AngularJs?",
    "l": "http://stackoverflow.com/questions/11985863/how-to-use-ng-repeat-for-dictionaries-in-angularjs",
    "q": "\n\n<p>I know that we can easily use <em>ng-repeat</em> for json objects or arrays like:</p>\n\n<pre><code>&lt;div ng-repeat=\"user in users\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>but how can we use the ng-repeat for dictionaries, for example:</p>\n\n<pre><code>var users = null;\nusers[\"182982\"] = \"{...json-object...}\";\nusers[\"198784\"] = \"{...json-object...}\";\nusers[\"119827\"] = \"{...json-object...}\";\n</code></pre>\n\n<p>I want to use that with users dictionary:</p>\n\n<pre><code>&lt;div ng-repeat=\"user in users\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Is it possible?. If yes, how can I do it in AngularJs?</p>\n\n<p>Example for my question:\nIn C# we define dictionaries like:</p>\n\n<pre><code>Dictionary&lt;key,value&gt; dict = new Dictionary&lt;key,value&gt;();\n\n//and then we can search for values, without knowing the keys\nforeach(var val in dict.Values)\n{\n}\n</code></pre>\n\n<p>Is there a build-in function that returns the values from a dictionary like in c#?</p>\n\n<p>Thank You!</p>\n    ",
    "a": "\n<p>You can use</p>\n\n<pre><code>&lt;li ng-repeat=\"(name, age) in items\"&gt;{{name}}: {{age}}&lt;/li&gt;\n</code></pre>\n\n<p>See <a href=\"http://docs.angularjs.org/api/ng.directive%3angRepeat\">ngRepeat documentation</a>. Example: <a href=\"http://jsfiddle.net/WRtqV/1/\">http://jsfiddle.net/WRtqV/1/</a></p>\n    "
}, {
    "t": "How to get evaluated attributes inside a custom directive",
    "l": "http://stackoverflow.com/questions/12371159/how-to-get-evaluated-attributes-inside-a-custom-directive",
    "q": "\n\n<p>I'm trying to get an <strong>evaluated</strong> attribute from my custom directive, but I can't find the right way of doing it.</p>\n\n<p>I've created <a href=\"http://jsfiddle.net/neuTA/1/\">this jsFiddle</a> to elaborate.</p>\n\n<pre><code>&lt;div ng-controller=\"MyCtrl\"&gt;\n    &lt;input my-directive value=\"123\"&gt;\n    &lt;input my-directive value=\"{{1+1}}\"&gt;\n&lt;/div&gt;\n\nmyApp.directive('myDirective', function () {\n    return function (scope, element, attr) {\n        element.val(\"value = \"+attr.value);\n    }\n});\n</code></pre>\n\n<p>What am I missing?</p>\n    ",
    "a": "\n<p><em>Notice: I do update this answer as I find better solutions. I also keep the old answers for future reference as long as they remain related. Latest and best answer comes first.</em> </p>\n\n<h2>Better answer:</h2>\n\n<p>Directives in angularjs are very powerful, but it takes time to comprehend which processes lie behind them.</p>\n\n<p>While creating directives, angularjs allows you to create an <em>isolated scope</em> with some bindings to the parent scope. These bindings are specified by the <strong>attribute</strong> you attach the element in DOM and how you define <strong>scope</strong> property in the <em>directive definition object</em>.</p>\n\n<p>There are 3 types of binding options which you can define in scope and you write those as prefixes related attribute.</p>\n\n<pre><code>angular.module(\"myApp\", []).directive(\"myDirective\", function () {\n    return {\n        restrict: \"A\",\n        scope: {\n            text: \"@myText\",\n            twoWayBind: \"=myTwoWayBind\",\n            oneWayBind: \"&amp;myOneWayBind\"\n        }\n    };\n}).controller(\"myController\", function ($scope) {\n    $scope.foo = {name: \"Umur\"};\n    $scope.bar = \"qwe\";\n});\n</code></pre>\n\n<p><em>HTML</em></p>\n\n<pre><code>&lt;div ng-controller=\"myController\"&gt;\n    &lt;div my-directive my-text=\"hello {{ bar }}\" my-two-way-bind=\"foo\" my-one-way-bind=\"bar\"&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In that case, in the scope of directive (whether it's in linking function or controller), we can access these properties like this:</p>\n\n<pre><code>/* Directive scope */\n\nin: $scope.text\nout: \"hello qwe\"\n// this would automatically update the changes of value in digest\n// this is always string as dom attributes values are always strings\n\nin: $scope.twoWayBind\nout: {name:\"Umur\"}\n// this would automatically update the changes of value in digest\n// changes in this will be reflected in parent scope\n\n// in directive's scope\nin: $scope.twoWayBind.name = \"John\"\n\n//in parent scope\nin: $scope.foo.name\nout: \"John\"\n\n\nin: $scope.oneWayBind() // notice the function call, this binding is read only\nout: \"qwe\"\n// any changes here will not reflect in parent, as this only a getter .\n</code></pre>\n\n<h2>\"Still OK\" Answer:</h2>\n\n<p>Since this answer got accepted, but has some issues, I'm going to update it to a better one. Apparently, <code>$parse</code> is a service which does not lie in properties of the current scope, which means it only takes angular expressions and cannot reach scope. \n<code>{{</code>,<code>}}</code> expressions are compiled while angularjs initiating which means when we try to access them in our directives <code>postlink</code> method, they are already compiled. (<code>{{1+1}}</code> is <code>2</code> in directive already).</p>\n\n<p>This is how you would want to use:</p>\n\n<pre><code>var myApp = angular.module('myApp',[]);\n\nmyApp.directive('myDirective', function ($parse) {\n    return function (scope, element, attr) {\n        element.val(\"value=\" + $parse(attr.myDirective)(scope));\n    };\n});\n\nfunction MyCtrl($scope) {\n    $scope.aaa = 3432;\n}​\n</code></pre>\n\n<p>.</p>\n\n<pre><code>&lt;div ng-controller=\"MyCtrl\"&gt;\n    &lt;input my-directive=\"123\"&gt;\n    &lt;input my-directive=\"1+1\"&gt;\n    &lt;input my-directive=\"'1+1'\"&gt;\n    &lt;input my-directive=\"aaa\"&gt;\n&lt;/div&gt;​​​​​​​​\n</code></pre>\n\n<p>One thing you should notice here is that, if you want set the value string, you should wrap it in quotes. (See 3rd input)</p>\n\n<p>Here is the fiddle to play with: <a href=\"http://jsfiddle.net/neuTA/6/\">http://jsfiddle.net/neuTA/6/</a></p>\n\n<h2>Old Answer:</h2>\n\n<p><em>I'm not removing this for folks who can be misled like me, note that using <code>$eval</code> is perfectly fine the correct way to do it, but <code>$parse</code> has a different behavior, you probably won't need this to use in most of the cases.</em></p>\n\n<p>The way to do it is, once again, using <code>scope.$eval</code>. Not only it compiles the angular expression, it has also access to the current scope's properties.</p>\n\n<pre><code>var myApp = angular.module('myApp',[]);\n\nmyApp.directive('myDirective', function () {\n    return function (scope, element, attr) {\n        element.val(\"value = \"+ scope.$eval(attr.value));\n    }\n});\n\nfunction MyCtrl($scope) {\n\n}​\n</code></pre>\n\n<p>What you are missing was <code>$eval</code>.</p>\n\n<blockquote>\n  <p><a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#$eval\">http://docs.angularjs.org/api/ng.$rootScope.Scope#$eval</a></p>\n  \n  <p>Executes the expression on the current scope returning the result. Any exceptions in the expression are propagated (uncaught). This is useful when evaluating angular expressions.</p>\n</blockquote>\n    "
}, {
    "t": "How do I implement the bootstrap navbar active class with Angular JS",
    "l": "http://stackoverflow.com/questions/16199418/how-do-i-implement-the-bootstrap-navbar-active-class-with-angular-js",
    "q": "\n\n<p>If I have a navbar in bootstrap with the items</p>\n\n<pre><code>Home | About | Contact\n</code></pre>\n\n<p>How do I set the active class for each menu item when they are active? That is, how can I set <code>class=\"active\"</code> when the angular route is at </p>\n\n<ol>\n<li><code>#/</code> for home</li>\n<li><code>#/about</code> for the about page</li>\n<li><code>#/contact</code> for the contact page</li>\n</ol>\n    ",
    "a": "\n<p>A very elegant way is to use ng-controller to run a single controller outside of the ng-view:</p>\n\n<pre><code>&lt;div class=\"collapse navbar-collapse\" ng-controller=\"HeaderController\"&gt;\n    &lt;ul class=\"nav navbar-nav\"&gt;\n        &lt;li ng-class=\"{ active: isActive('/')}\"&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li ng-class=\"{ active: isActive('/dogs')}\"&gt;&lt;a href=\"/dogs\"&gt;Dogs&lt;/a&gt;&lt;/li&gt;\n        &lt;li ng-class=\"{ active: isActive('/cats')}\"&gt;&lt;a href=\"/cats\"&gt;Cats&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div ng-view&gt;&lt;/div&gt;\n</code></pre>\n\n<p>and include in controllers.js:</p>\n\n<pre><code>function HeaderController($scope, $location) \n{ \n    $scope.isActive = function (viewLocation) { \n        return viewLocation === $location.path();\n    };\n}\n</code></pre>\n    "
}, {
    "t": "Failed to instantiate module [$injector:unpr] Unknown provider: $routeProvider",
    "l": "http://stackoverflow.com/questions/18481863/failed-to-instantiate-module-injectorunpr-unknown-provider-routeprovider",
    "q": "\n\n<p>I received this error upon upgrading from AngularJS <strong>1.0.7</strong> to <strong>1.2.0rc1</strong>. </p>\n    ",
    "a": "\n<p>The ngRoute module is no longer part of the core <code>angular.js</code> file. If you are continuing to use $routeProvider then you will now need to include <code>angular-route.js</code> in your HTML:</p>\n\n<pre><code>&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-route.js\"&gt;\n</code></pre>\n\n<p><a href=\"http://docs.angularjs.org/api/ngRoute\">API Reference</a></p>\n\n<p>You also have to add <code>ngRoute</code> as a dependency for your application:</p>\n\n<pre><code>var app = angular.module('MyApp', ['ngRoute', ...]);\n</code></pre>\n\n<p>If instead you are planning on using <a href=\"https://github.com/angular-ui/ui-router\"><code>angular-ui-router</code></a> or the like then just remove the <code>$routeProvider</code>  dependency from your module <code>.config()</code> and substitute it with the relevant provider of choice (e.g. <code>$stateProvider</code>). You would then use the <code>ui.router</code> dependency:</p>\n\n<pre><code>var app = angular.module('MyApp', ['ui.router', ...]);\n</code></pre>\n    "
}, {
    "t": "Can you pass parameters to an AngularJS controller on creation?",
    "l": "http://stackoverflow.com/questions/14523679/can-you-pass-parameters-to-an-angularjs-controller-on-creation",
    "q": "\n\n<p>I have a controller responsible for communicating with an API to update properties of a user, name, email, etc. Each user has an <code>'id'</code> which is passed from the server when the profile page is viewed. </p>\n\n<p>I would like to pass this value to the AngularJS controller so it knows what the API entry point is for the current user. I've tried passing the value in <code>ng-controller</code>. For example:</p>\n\n<pre><code>function UserCtrl(id, $scope, $filter) {\n\n$scope.connection = $resource('api.com/user/' + id)\n</code></pre>\n\n<p>and in the HTML</p>\n\n<pre><code>&lt;body ng-controller=\"UserCtrl({% id %})\"&gt;\n</code></pre>\n\n<p>where <code>{% id %}</code> print the id sent from the server. but I get errors. </p>\n\n<p>What is the correct way to pass a value into a controller on its creation?</p>\n    ",
    "a": "\n<p><strong>Notes:</strong></p>\n\n<p>This answer is old. This is just a proof of concept on how it the desired outcome can be achieved. However, it may not be the best solution as per some comments below. I don't have any document to support or reject the following approach. Please refer to some of the comments below for further discussion on this topic.</p>\n\n<p><strong>Original Answer:</strong></p>\n\n<p>I answered this to \nYes you absolutely can do so using <code>ng-init</code> and a simple init function.</p>\n\n<p>Here is the example of it on <a href=\"http://plnkr.co/edit/jDOgjENkqEaucBX9Tvc9\">plunker</a></p>\n\n<p><strong>HTML</strong> </p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app=\"angularjs-starter\"&gt;\n  &lt;head lang=\"en\"&gt;\n    &lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.0.3/angular.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;  \n  &lt;body ng-controller=\"MainCtrl\" ng-init=\"init('James Bond','007')\"&gt;\n    &lt;h1&gt;I am  {{name}} {{id}}&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>JavaScript</strong></p>\n\n<pre><code>var app = angular.module('angularjs-starter', []);\n\napp.controller('MainCtrl', function($scope) {\n\n  $scope.init = function(name, id)\n  {\n    //This function is sort of private constructor for controller\n    $scope.id = id;\n    $scope.name = name; \n    //Based on passed argument you can make a call to resource\n    //and initialize more objects\n    //$resource.getMeBond(007)\n  };\n\n\n});\n</code></pre>\n    "
}, {
    "t": "What's the most concise way to read query parameters in AngularJS?",
    "l": "http://stackoverflow.com/questions/11063673/whats-the-most-concise-way-to-read-query-parameters-in-angularjs",
    "q": "\n\n<p>I'd like to read the values of URL query parameters using AngularJS.  I'm accessing the HTML with the following URL:</p>\n\n<p><code>http://127.0.0.1:8080/test.html?target=bob</code></p>\n\n<p>As expected, <code>location.search</code> is <code>\"?target=bob\"</code>.\nFor accessing the value of <em>target</em>, I've found various examples listed on the web, but none of them work in AngularJS 1.0.0rc10.  In particular, the following are all <code>undefined</code>:</p>\n\n<ul>\n<li><code>$location.search.target</code></li>\n<li><code>$location.search['target']</code></li>\n<li><code>$location.search()['target']</code></li>\n</ul>\n\n<p>Anyone know what will work? (I'm using <code>$location</code> as a parameter to my controller)</p>\n\n<hr>\n\n<p>Update:</p>\n\n<p>I've posted a solution below, but I'm not entirely satisfied with it.\nThe documentation at <a href=\"http://docs.angularjs.org/guide/%24location\">Developer Guide: Angular Services: Using $location</a> states the following about <code>$location</code>:</p>\n\n<blockquote>\n  <p>When should I use $location?</p>\n  \n  <p>Any time your application needs to react to a change in the current\n  URL or if you want to change the current URL in the browser.</p>\n</blockquote>\n\n<p>For my scenario, my page will be opened from an external webpage with a query parameter, so I'm not \"reacting to a change in the current URL\" per se.  So maybe <code>$location</code> isn't the right tool for the job (for the ugly details, see my answer below). I've therefore changed the title of this question from \"How to read query parameters in AngularJS using $location?\" to \"What's the most concise way to read query parameters in AngularJS?\".  Obviously I could just use javascript and regular expression to parse <code>location.search</code>, but going that low-level for something so basic really offends my programmer sensibilities.</p>\n\n<p>So: is there a better way to use <code>$location</code> than I do in my answer, or is there a concise alternate?</p>\n    ",
    "a": "\n<p>You can inject <a href=\"http://docs.angularjs.org/api/ngRoute.$routeParams\">$routeParams</a> into your controller. Here's an example from the docs:</p>\n\n<pre><code>// Given:\n// URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n// Route: /Chapter/:chapterId/Section/:sectionId\n//\n// Then\n$routeParams ==&gt; {chapterId:1, sectionId:2, search:'moby'}\n</code></pre>\n\n<p>EDIT: You can also get and set query parameters with <a href=\"http://docs.angularjs.org/api/ng.$location#search\">$location.search()</a> - since $routeParams are less useful after the controller's initial load.</p>\n    "
}, {
    "t": "How to handle anchor hash linking in AngularJS",
    "l": "http://stackoverflow.com/questions/14712223/how-to-handle-anchor-hash-linking-in-angularjs",
    "q": "\n\n<p>Do any of you know how to nicely handle anchor hash linking in AngularJS?</p>\n\n<p>I have the following markup for a simple FAQ-page</p>\n\n<pre><code>&lt;a href=\"#faq-1\"&gt;Question 1&lt;/a&gt;\n&lt;a href=\"#faq-2\"&gt;Question 2&lt;/a&gt;\n&lt;a href=\"#faq-3\"&gt;Question 3&lt;/a&gt;\n\n&lt;h3 id=\"faq-1\"&gt;Question 1&lt;/h3&gt;\n&lt;h3 id=\"faq-2\"&gt;Question 2&lt;/h3&gt;\n&lt;h3 id=\"fa1-3\"&gt;Question 3&lt;/h3&gt;\n</code></pre>\n\n<p>When clicking on any of the above links AngularJS intercepts and routes me to a completely different page (in my case, a 404-page as there are no routes matching the links.)</p>\n\n<p>My first thought was to create a route matching \"/faq/:chapter\" and in the corresponding controller check $routeParams.chapter after a matching element and then use jQuery to scroll down to it.\nBut then AngularJS shits on me again and just scrolls to the top of the page anyway.</p>\n\n<p>So, anyone here done anything similar in the past and knows a good solution to it?</p>\n\n<p>Edit: Switching to html5Mode should solve my problems but we kinda have to support IE8+ anyway  so I fear it's not an accepted solution :/</p>\n    ",
    "a": "\n<p>You're looking for <code>$anchorScroll()</code>.</p>\n\n<p><a href=\"http://docs.angularjs.org/api/ng.$anchorScroll\">Here's the (crappy) documentation.</a></p>\n\n<p><a href=\"https://github.com/angular/angular.js/blob/master/src/ng/anchorScroll.js\">And here's the source.</a></p>\n\n<p>Basically you just inject it and call it in your controller, and it will scroll you to any element with the id found in <code>$location.hash()</code></p>\n\n<pre><code>app.controller('TestCtrl', function($scope, $location, $anchorScroll) {\n   $scope.scrollTo = function(id) {\n      $location.hash(id);\n      $anchorScroll();\n   }\n});\n\n&lt;a ng-click=\"scrollTo('foo')\"&gt;Foo&lt;/a&gt;\n\n&lt;div id=\"foo\"&gt;Here you are&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/PCO051UJS8EHbdkmFV40?p=preview\">Here is a plunker to demonstrate</a></p>\n\n<p><strong>EDIT: to use this with routing</strong></p>\n\n<p>Set up your angular routing as usual, then just add the following code.</p>\n\n<pre><code>app.run(function($rootScope, $location, $anchorScroll, $routeParams) {\n  //when the route is changed scroll to the proper element.\n  $rootScope.$on('$routeChangeSuccess', function(newRoute, oldRoute) {\n    $location.hash($routeParams.scrollTo);\n    $anchorScroll();  \n  });\n});\n</code></pre>\n\n<p>and your link would look like this:</p>\n\n<pre><code>&lt;a href=\"#/test?scrollTo=foo\"&gt;Test/Foo&lt;/a&gt;\n</code></pre>\n\n<p>Here is a <a href=\"http://plnkr.co/edit/De6bBrkHpojgAbEvHszu\">Plunker demonstrating scrolling with routing and $anchorScroll</a></p>\n\n<p><strong>And even simpler:</strong></p>\n\n<pre><code>app.run(function($rootScope, $location, $anchorScroll) {\n  //when the route is changed scroll to the proper element.\n  $rootScope.$on('$routeChangeSuccess', function(newRoute, oldRoute) {\n    if($location.hash()) $anchorScroll();  \n  });\n});\n</code></pre>\n\n<p>and your link would look like this:</p>\n\n<pre><code>&lt;a href=\"#/test#foo\"&gt;Test/Foo&lt;/a&gt;\n</code></pre>\n    "
}, {
    "t": "How can I pass variables between controllers?",
    "l": "http://stackoverflow.com/questions/12008908/how-can-i-pass-variables-between-controllers",
    "q": "\n\n<p>I have two Angular controllers:</p>\n\n<pre><code>function Ctrl1($scope) {\n    $scope.prop1 = \"First\";\n}\n\nfunction Ctrl2($scope) {\n    $scope.prop2 = \"Second\";\n    $scope.both = Ctrl1.prop1 + $scope.prop2; //This is what I would like to do ideally\n}\n</code></pre>\n\n<p>I can't use <code>Ctrl1</code> inside <code>Ctrl2</code> because it is undefined. However if I try to pass it in like so…</p>\n\n<pre><code>function Ctrl2($scope, Ctrl1) {\n    $scope.prop2 = \"Second\";\n    $scope.both = Ctrl1.prop1 + $scope.prop2; //This is what I would like to do ideally\n}\n</code></pre>\n\n<p>I get an error. Does anyone know how to do this?</p>\n\n<p>Doing </p>\n\n<pre><code>Ctrl2.prototype = new Ctrl1();\n</code></pre>\n\n<p>Also fails.</p>\n\n<p><strong>NOTE:</strong> These controllers are not nested inside each other.</p>\n    ",
    "a": "\n<p>One way to share variables across multiple controllers is to <a href=\"https://code.angularjs.org/1.2.21/docs/guide/services\">create a service</a> and inject it in any controller where you want to use it.</p>\n\n<p><strong>Simple service example:</strong></p>\n\n<pre><code>angular.module('myApp', [])\n    .service('sharedProperties', function () {\n        var property = 'First';\n\n        return {\n            getProperty: function () {\n                return property;\n            },\n            setProperty: function(value) {\n                property = value;\n            }\n        };\n    });\n</code></pre>\n\n<p><strong>Using the service in a controller:</strong></p>\n\n<pre><code>function Ctrl2($scope, sharedProperties) {\n    $scope.prop2 = \"Second\";\n    $scope.both = sharedProperties.getProperty() + $scope.prop2;\n}\n</code></pre>\n\n<p>This is described very nicely in <a href=\"http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/\">this blog</a> (Lesson 2 and on in particular).</p>\n\n<p>I've found that if you want to bind to these properties across multiple controllers it works better if you bind to an object's property instead of a primitive type (boolean, string, number) to retain the bound reference. </p>\n\n<p>Example: <code>var property = { Property1: 'First' };</code> instead of <code>var property = 'First';</code>.</p>\n\n<hr>\n\n<p><strong>UPDATE:</strong> To (hopefully) make things more clear <a href=\"http://jsfiddle.net/b2fCE/1/\">here is a fiddle</a> that shows an example of:</p>\n\n<ul>\n<li><strong>Binding to static copies of the shared value (in myController1)</strong>\n<ul>\n<li>Binding to a primitive (string)</li>\n<li>Binding to an object's property (saved to a scope variable)</li>\n</ul></li>\n<li><strong>Binding to shared values that update the UI as the values are updated (in myController2)</strong>\n<ul>\n<li>Binding to a function that returns a primitive (string)</li>\n<li>Binding to the object's property</li>\n<li>Two way binding to an object's property</li>\n</ul></li>\n</ul>\n    "
}, {
    "t": "AngularJS - Create a directive that uses ng-model",
    "l": "http://stackoverflow.com/questions/14115701/angularjs-create-a-directive-that-uses-ng-model",
    "q": "\n\n<p>I am trying to create a directive that would create an input field with the same ng-model as the element that creates the directive.</p>\n\n<p>Here's what I came up with so far:</p>\n\n<p><strong>HTML</strong></p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!doctype html&gt;\n&lt;html ng-app=\"plunker\" &gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;AngularJS Plunker&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n  &lt;script&gt;document.write(\"&lt;base href=\\\"\" + document.location + \"\\\" /&gt;\");&lt;/script&gt;\n  &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body ng-controller=\"MainCtrl\"&gt;\n  This scope value &lt;input ng-model=\"name\"&gt;\n  &lt;my-directive ng-model=\"name\"&gt;&lt;/my-directive&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>JavaScript</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var app = angular.module('plunker', []);\n\napp.controller('MainCtrl', function($scope) {\n  $scope.name = \"Felipe\";\n});\n\napp.directive('myDirective', function($compile) {\n  return {\n    restrict: 'E',\n    scope: {\n      ngModel: '='\n    },\n    template: '&lt;div class=\"some\"&gt;&lt;label for=\"{{id}}\"&gt;{{label}}&lt;/label&gt;' +\n      '&lt;input id=\"{{id}}\" ng-model=\"value\"&gt;&lt;/div&gt;',\n    replace: true,\n    require: 'ngModel',\n    link: function($scope, elem, attr, ctrl) {\n      $scope.label = attr.ngModel;\n      $scope.id = attr.ngModel;\n      console.debug(attr.ngModel);\n      console.debug($scope.$parent.$eval(attr.ngModel));\n      var textField = $('input', elem).\n        attr('ng-model', attr.ngModel).\n        val($scope.$parent.$eval(attr.ngModel));\n\n      $compile(textField)($scope.$parent);\n    }\n  };\n});\n</code></pre>\n\n<p>However, I am not confident this is the right way to handle this scenario, and there is a bug that my control is not getting initialized with the value of the ng-model target field.</p>\n\n<p>Here's a Plunker of the code above: <a href=\"http://plnkr.co/edit/IvrDbJ\">http://plnkr.co/edit/IvrDbJ</a></p>\n\n<p>What's the correct way of handling this?</p>\n\n<p><strong>EDIT</strong>: After removing the <code>ng-model=\"value\"</code> from the template, this seems to be working fine. However, I will keep this question open because I want to double check this is the right way of doing this.</p>\n    ",
    "a": "\n<p>It's actually pretty good logic but you can simplify things a bit.</p>\n\n<h3>Directive</h3>\n\n<pre><code>var app = angular.module('plunker', []);\n\napp.controller('MainCtrl', function($scope) {\n  $scope.model = { name: 'World' };\n  $scope.name = \"Felipe\";\n});\n\napp.directive('myDirective', function($compile) {\n  return {\n    restrict: 'AE', //attribute or element\n    scope: {\n      myDirectiveVar: '=',\n     //bindAttr: '='\n    },\n    template: '&lt;div class=\"some\"&gt;' +\n      '&lt;input ng-model=\"myDirectiveVar\"&gt;&lt;/div&gt;',\n    replace: true,\n    //require: 'ngModel',\n    link: function($scope, elem, attr, ctrl) {\n      console.debug($scope);\n      //var textField = $('input', elem).attr('ng-model', 'myDirectiveVar');\n      // $compile(textField)($scope.$parent);\n    }\n  };\n});\n</code></pre>\n\n<h3>Html with directive</h3>\n\n<pre><code>&lt;body ng-controller=\"MainCtrl\"&gt;\n  This scope value &lt;input ng-model=\"name\"&gt;\n  &lt;my-directive my-directive-var=\"name\"&gt;&lt;/my-directive&gt;\n&lt;/body&gt;\n</code></pre>\n\n<h3>CSS</h3>\n\n<pre><code>.some {\n  border: 1px solid #cacaca;\n  padding: 10px;\n}\n</code></pre>\n\n<p>You can see it in action with this <a href=\"http://plnkr.co/edit/A29hl6\">Plunker</a>.</p>\n\n<p>Here's what I see:</p>\n\n<ul>\n<li>I understand why you want to use 'ng-model' but in your case it's not necessary.  ng-model is to link <em>existing</em> html elements with a value in the scope.  Since you're creating a directive yourself you're creating a 'new' html element, so you don't need ng-model.</li>\n</ul>\n\n<p><strong>EDIT</strong> As mentioned by Mark in his comment, there's no reason that you <em>can't</em> use ng-model, just to keep with convention.</p>\n\n<ul>\n<li>By explicitly creating a scope in your directive (an 'isolated' scope), the directive's scope cannot access the 'name' variable on the parent scope (which is why, I think, you wanted to use ng-model).</li>\n<li>I removed ngModel from your directive and replaced it with a custom name that you can change to whatever.</li>\n<li>The thing that makes it all still work is that '=' sign in the scope.  Checkout the docs  <a href=\"http://docs.angularjs.org/guide/directive\">docs</a> under the 'scope' header.</li>\n</ul>\n\n<p>In general, your directives should use the isolated scope (which you did correctly) and use the '=' type scope if you want a value in your directive to always map to a value in the parent scope. </p>\n    "
}, {
    "t": "How can I test an an AngularJS service from the console?",
    "l": "http://stackoverflow.com/questions/15527832/how-can-i-test-an-an-angularjs-service-from-the-console",
    "q": "\n\n<p>I have a service like:</p>\n\n<pre><code>angular.module('app').factory('ExampleService', function(){\n  this.f1 = function(world){\n    return 'Hello '+world;\n  }\n  return this;\n})\n</code></pre>\n\n<p>I would like to <strong>test it from the JavaScript console</strong> and call the function <code>f1()</code> of the service. </p>\n\n<p>How can I do that?</p>\n    ",
    "a": "\n<p>So I found out that you can not simply call <code>angular.injector(['app'])</code> if there already exists an injector. Because this function tries to create a new injector.</p>\n\n<p>Instead you have to call <code>injector = angular.element(document.body).injector()</code></p>\n\n<p>From the retrieved <code>injector</code> you can then get whatever service you like with <code>injector.get('ServiceName')</code></p>\n\n<p>So in <strong>one line</strong> the command would look like this:</p>\n\n<pre><code>angular.element(document.body).injector().get('serviceName')\n</code></pre>\n\n<p>More information on that in this answer: <a href=\"http://stackoverflow.com/questions/13400687/cant-retrieve-the-injector-from-angular\">Can't retrieve the injector from angular</a> <br>\nAnd even more here: <a href=\"http://stackoverflow.com/questions/10490570/call-angular-js-from-legacy-code\">Call Angular JS from legacy code</a>\n</p><hr>\nAnother useful trick to get the <code>$scope</code> of a particular element. \nSelect the element with the <strong>DOM inspection tool</strong> of your developer tools and then run the following line (<code>$0</code> is always the selected element): <br>\n<code>angular.element($0).scope()</code><p></p>\n    "
}, {
    "t": "When to favor ng-if vs. ng-show/ng-hide?",
    "l": "http://stackoverflow.com/questions/21869283/when-to-favor-ng-if-vs-ng-show-ng-hide",
    "q": "\n\n<p>I understand that <code>ng-show</code> and <code>ng-hide</code> affect the class set on an element and that <code>ng-if</code> controls whether an element is rendered as part of the DOM. </p>\n\n<p><strong>Are there guidelines on choosing <code>ng-if</code> over <code>ng-show</code>/<code>ng-hide</code> or vice-versa?</strong></p>\n    ",
    "a": "\n<p>Depends on your use case but to summarise the difference:</p>\n\n<ol>\n<li><code>ng-if</code> will remove elements from DOM. This means that all your handlers or anything else attached to those elements will be lost. For example, if you bound a click handler to one of child elements, when <code>ng-if</code> evaluates to false, that element will be removed from DOM and your click handler will not work any more, even after <code>ng-if</code> later evaluates to true and displays the element. You will need to reattach the handler.</li>\n<li><code>ng-show/ng-hide</code> does not remove the elements from DOM. It uses CSS styles to hide/show elements (note: you might need to add your own classes). This way your handlers that were attached to children will not be lost.</li>\n<li><code>ng-if</code> creates a child scope while <code>ng-show/ng-hide</code> does not</li>\n</ol>\n\n<p>Elements that are not in the DOM have less performance impact and your web app might appear to be faster when using <code>ng-if</code> compared to <code>ng-show/ng-hide</code>. In my experience, the difference is negligible. Animations are possible when using both ng-show/ng-hide and ng-if, with examples for both in the Angular documentation.</p>\n\n<p>Ultimately, the question you need to answer is whether you can remove element from DOM or not?</p>\n    "
}, {
    "t": "Submit form on pressing Enter with AngularJS",
    "l": "http://stackoverflow.com/questions/15417125/submit-form-on-pressing-enter-with-angularjs",
    "q": "\n\n<p>In this particular case, what options do I have to make these inputs call a function when I press Enter?</p>\n\n<pre><code>// HTML view //\n&lt;form&gt;\n    &lt;input type=\"text\" ng-model=\"name\" &lt;!-- Press ENTER and call myFunc --&gt; /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"text\" ng-model=\"email\" &lt;!-- Press ENTER and call myFunc --&gt; /&gt;\n&lt;/form&gt;\n\n// Controller //\n.controller('mycontroller', ['$scope',\n                            function($scope) {\n\n    $scope.name = '';\n    $scope.email = '';\n\n    // Function to be called when pressing ENTER\n    $scope.myFunc = function() {\n       alert('Submitted');\n    };\n}])\n</code></pre>\n    ",
    "a": "\n<p>Angular supports this out of the box. Have you tried <a href=\"http://docs.angularjs.org/api/ng.directive:ngSubmit\">ngSubmit</a> on your form element?</p>\n\n<pre><code>&lt;form ng-submit=\"myFunc()\" ng-controller=\"mycontroller\"&gt;\n   &lt;input type=\"text\" ng-model=\"name\" /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"text\" ng-model=\"email\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>EDIT: Per the comment regarding the submit button, see <a href=\"http://stackoverflow.com/questions/477691/submitting-a-form-by-pressing-enter-without-a-submit-button\">Submitting a form by pressing enter without a submit button</a> which gives the solution of:</p>\n\n<pre><code>&lt;input type=\"submit\" style=\"position: absolute; left: -9999px; width: 1px; height: 1px;\"/&gt;\n</code></pre>\n\n<p>If you don't like the hidden submit button solution, you'll need to bind a controller function to the Enter keypress or keyup event.  This normally requires a custom directive, but the AngularUI library has a nice keypress solution set up already.  See <a href=\"http://angular-ui.github.com/\">http://angular-ui.github.com/</a> </p>\n\n<p>After adding the angularUI lib, your code would be something like: </p>\n\n<pre><code>&lt;form ui-keypress=\"{13:'myFunc($event)'}\"&gt;\n  ... input fields ...\n&lt;/form&gt;\n</code></pre>\n\n<p>or you can bind the enter keypress to each individual field.</p>\n\n<p>Also, see this SO questions for creating a simple keypres directive:\n<a href=\"http://stackoverflow.com/questions/11264188/how-can-i-detect-onkeyup-in-angularjs\">How can I detect onKeyUp in AngularJS?</a></p>\n\n<p>EDIT (2014-08-28): At the time this answer was written, ng-keypress/ng-keyup/ng-keydown did not exist as native directives in AngularJS.  In the comments below @darlan-alves has a pretty good solution with: </p>\n\n<p><code>&lt;input ng-keyup=\"$event.keyCode == 13 &amp;&amp; myFunc()\"... /&gt;</code></p>\n    "
}, {
    "t": "ng-repeat :filter by single field",
    "l": "http://stackoverflow.com/questions/14733136/ng-repeat-filter-by-single-field",
    "q": "\n\n<p>I have an array of products that I'm repeating over using ng-repeat and am using </p>\n\n<pre><code>&lt;div ng-repeat=\"product in products | filter:by_colour\"&gt; \n</code></pre>\n\n<p>to filter these products by colour. The filter is working but if the product name / description etc contains the colour then the product remains after the filter is applied.</p>\n\n<p>How do I set the filter to only apply to the colour field of my array rather than every field?</p>\n    ",
    "a": "\n<p>See the example on the <a href=\"http://docs.angularjs.org/api/ng.filter%3afilter\">filter</a> page.  Use an object, and set the color in the color property:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>Search by color: &lt;input type=\"text\" ng-model=\"search.color\"&gt;\n&lt;div ng-repeat=\"product in products | filter:search\"&gt; \n</code></pre>\n    "
}, {
    "t": "How do I conditionally apply CSS styles in AngularJS?",
    "l": "http://stackoverflow.com/questions/13813254/how-do-i-conditionally-apply-css-styles-in-angularjs",
    "q": "\n\n<p>Q1. Suppose I want to alter the look of each \"item\" that a user marks for deletion before the main \"delete\" button is pressed.  (This immediate visual feedback should eliminate the need for the proverbial \"are you sure?\" dialog box.) The user will check checkboxes to indicate which items should be deleted.  If a checkbox is unchecked, that item should revert back to its normal look.</p>\n\n<p>What's the best way to apply or remove the CSS styling?</p>\n\n<p>Q2. Suppose I want to allow each user to personalize how my site is presented.  E.g., select from a fixed set of font sizes, allow user-definable foreground and background colors, etc.</p>\n\n<p>What's the best way to apply the CSS styling the user selects/inputs?</p>\n    ",
    "a": "\n<p>Angular provides a number of built-in directives for manipulating CSS styling conditionally/dynamically:</p>\n\n<ul>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angClass\">ng-class</a></strong> - use when the set of CSS styles is static/known ahead of time</li>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angStyle\">ng-style</a></strong> - use when you can't define a CSS class because the style values may change dynamically.  Think programmable control of the style values.</li>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angShow\">ng-show</a></strong> and <strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angHide\">ng-hide</a></strong> - use if you only need to show or hide something (modifies CSS)</li>\n<li><strong><a href=\"http://code.angularjs.org/1.1.5/docs/api/ng.directive%3angIf\">ng-if</a></strong> - new in version 1.1.5, use instead of the more verbose ng-switch if you only need to check for a single condition (modifies DOM)</li>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angSwitch\">ng-switch</a></strong> - use instead of using several mutually exclusive ng-shows (modifies DOM)</li>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angDisabled\">ng-disabled</a></strong> and <strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angReadonly\">ng-readonly</a></strong> - use to restrict form element behavior</li>\n<li><strong><a href=\"http://code.angularjs.org/1.1.4/docs/api/ng.directive%3angAnimate\">ng-animate</a></strong> - new in version 1.1.4, use to add CSS3 transitions/animations</li>\n</ul>\n\n<p>The normal \"Angular way\" involves tying a model/scope property to a UI element that will accept user input/manipulation (i.e., use ng-model), and then associating that model property to one of the built-in directives mentioned above.  </p>\n\n<p>When the user changes the UI, Angular will automatically update the associated elements on the page.</p>\n\n<p></p><hr>\nQ1 sounds like a good case for ng-class -- the CSS styling can be captured in a class.<p></p>\n\n<p><strong>ng-class</strong> accepts an \"expression\" that must evaluate to one of the following:</p>\n\n<ol>\n<li>a string of space-delimited class names</li>\n<li>an array of class names</li>\n<li>a map/object of class names to boolean values</li>\n</ol>\n\n<p>Assuming your items are displayed using ng-repeat over some array model, and that when the checkbox for an item is checked you want to apply the <code>pending-delete</code> class:</p>\n\n<pre><code>&lt;div ng-repeat=\"item in items\" ng-class=\"{'pending-delete': item.checked}\"&gt;\n   ... HTML to display the item ...\n   &lt;input type=\"checkbox\" ng-model=\"item.checked\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Above, we used ng-class expression type #3 - a map/object of class names to boolean values.</p>\n\n<p></p><hr>\nQ2 sounds like a good case for ng-style -- the CSS styling is dynamic, so we can't define a class for this.<p></p>\n\n<p><strong>ng-style</strong> accepts an \"expression\" that must evaluate to:</p>\n\n<ol>\n<li>an map/object of CSS style names to CSS values</li>\n</ol>\n\n<p>For a contrived example, suppose the user can type in a color name into a texbox for the background color (a jQuery color picker would be much nicer):</p>\n\n<pre><code>&lt;div class=\"main-body\" ng-style=\"{color: myColor}\"&gt;\n   ...\n   &lt;input type=\"text\" ng-model=\"myColor\" placeholder=\"enter a color name\"&gt;\n</code></pre>\n\n<p></p><hr>\n<a href=\"http://jsfiddle.net/mrajcok/eTTZj/\">Fiddle</a> for both of the above.<p></p>\n\n<p>The fiddle also contains an example of <strong>ng-show</strong> and <strong>ng-hide</strong>.  If a checkbox is checked, in addition to the background-color turning pink, some text is shown.  If 'red' is entered in the textbox, a div becomes hidden.</p>\n    "
}, {
    "t": "What is the difference between required and ng-required?",
    "l": "http://stackoverflow.com/questions/16648669/what-is-the-difference-between-required-and-ng-required",
    "q": "\n\n<p>What is the difference between <code>required</code> and <code>ng-required</code> (form validation)?</p>\n    ",
    "a": "\n<p>AngularJS form elements look for the required attribute to perform validation functions. ng-required allows you to set the required attibute depending on a boolean test (for instance, only require field B - <em>say, a student number</em> - if the field A has a certain value - <em>if you selected \"student\" as a choice</em>)</p>\n\n<p>As an example, <code>&lt;input required&gt;</code> and <code>&lt;input ng-required=\"true\"&gt;</code> are essentially the same thing</p>\n\n<p>If you are wondering <strong>why</strong> this is this way, (and not just make <code>&lt;input required=\"true\"&gt;</code> or <code>&lt;input required=\"false\"&gt;</code>), it is due to the limitations of HTML - the <code>required</code> attribute has no associated value - it's mere presence means (as per HTML standards) that the element is required - so angular needs a way to set/unset required value (<code>required=\"false\"</code> would be invalid HTML)</p>\n    "
}, {
    "t": "How to deep watch an array in angularjs?",
    "l": "http://stackoverflow.com/questions/14712089/how-to-deep-watch-an-array-in-angularjs",
    "q": "\n\n<p>There is an array of objects in my scope, I want to watch all the values of each object.</p>\n\n<p>This is my code:</p>\n\n<pre><code>function TodoCtrl($scope) {\n  $scope.columns = [\n      { field:'title', displayName: 'TITLE'},\n      { field: 'content', displayName: 'CONTENT' }\n  ];\n   $scope.$watch('columns', function(newVal) {\n       alert('columns changed');\n   });\n}\n</code></pre>\n\n<p>But when I modify the values, e.g. I change <code>TITLE</code> to <code>TITLE2</code>, the <code>alert('columns changed')</code> never popped.</p>\n\n<p>How to deep watch the objects inside an array?</p>\n\n<p>There is a live demo: <a href=\"http://jsfiddle.net/SYx9b/\">http://jsfiddle.net/SYx9b/</a></p>\n    ",
    "a": "\n\n\n<p>You can set the 3rd argument of <code>$watch</code> to <code>true</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>scope.$watch('data', function (newVal, oldVal) { /*...*/ }, true);\n</code></pre>\n\n<p>See <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch\">http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch</a></p>\n\n<p>Since Angular 1.1.x you can also use $watchCollection to watch shallow watch (just the \"first level\" of) the collection.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>scope.$watchCollection('data', function (newVal, oldVal) { /*...*/ });\n</code></pre>\n\n<p>See <a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$watchCollection\">https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$watchCollection</a></p>\n    "
}, {
    "t": "How to access cookies in AngularJS?",
    "l": "http://stackoverflow.com/questions/10961963/how-to-access-cookies-in-angularjs",
    "q": "\n\n<p>What's the AngularJS way to access cookies?  I've seen references to both a service and a module for cookies, but no examples.  </p>\n\n<p>Is there, or is there not an AngularJS canonical approach?</p>\n    ",
    "a": "\n<p>This answer has been updated to reflect latest stable angularjs version. One important note is that $cookieStore is a thin wrapper surrounding $cookies. They are pretty much the same in that they only work with session cookies. Although, this answers the original question, there are other solutions you may wish to consider such as using localstorage, or jquery.cookie plugin (which would give you more fine-grained control and do serverside cookies. Of course doing so in angularjs means you probably would want to wrap them in a service and use scope.apply to notify angular of changes to models (in some cases).</p>\n\n<p>One other note and that is that there is a slight difference between the two when pulling data out depending on if you used $cookie to store value or $cookieStore. Of course, you'd really want to use one or the other.</p>\n\n<p>In addition to adding reference to the js file you need to inject ngCookies into your app definition such as: </p>\n\n<pre><code>angular.module('myApp', ['ngCookies']);\n</code></pre>\n\n<p>you should then be good to go.</p>\n\n<p>Here is a functional minimal example, where I show that cookieStore is a thin wrapper around cookies:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app=\"myApp\"&gt;\n&lt;head&gt;\n   &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\"&gt;\n&lt;/head&gt;\n&lt;body ng-controller=\"MyController\"&gt;\n\n  &lt;h3&gt;Cookies&lt;/h3&gt;\n  &lt;pre&gt;{{usingCookies|json}}&lt;/pre&gt;\n  &lt;h3&gt;Cookie Store&lt;/h3&gt;\n  &lt;pre&gt;{{usingCookieStore|json}}&lt;/pre&gt;\n\n  &lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular-cookies.js\"&gt;&lt;/script&gt;\n  &lt;script&gt;\n    angular.module('myApp', ['ngCookies']);\n    app.controller('MyController',['$scope','$cookies','$cookieStore', \n                       function($scope,$cookies,$cookieStore) {\n      var someSessionObj = { 'innerObj' : 'somesessioncookievalue'};\n\n    $cookies.dotobject = someSessionObj;\n    $scope.usingCookies = { 'cookies.dotobject' : $cookies.dotobject, \"cookieStore.get\" : $cookieStore.get('dotobject') };\n\n    $cookieStore.put('obj', someSessionObj);\n    $scope.usingCookieStore = { \"cookieStore.get\" : $cookieStore.get('obj'), 'cookies.dotobject' : $cookies.obj, };\n    }\n  &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The steps are:</p>\n\n<ol>\n<li>include angular.js</li>\n<li>include angular-cookies.js</li>\n<li>inject <code>ngCookies</code> into your app module (and make sure you reference that module in the <code>ng-app</code> attribute)</li>\n<li>add a <code>$cookies</code> or <code>$cookieStore</code> parameter to the controller</li>\n<li>access the cookie as a member variable using the dot (.) operator\n-- OR --</li>\n<li>access cookieStore using put/get methods</li>\n</ol>\n    "
}, {
    "t": "Correct way to integrate Jquery plugins in Angular.js",
    "l": "http://stackoverflow.com/questions/16935095/correct-way-to-integrate-jquery-plugins-in-angular-js",
    "q": "\n\n<p>I was wondering what is the correct way to integrate jquery plugins into my angular app. I've found several tutorials and screen-casts but they seem catered to a specific plugin.</p>\n\n<p>For Example:\n<a href=\"http://amitgharat.wordpress.com/2013/02/03/an-approach-to-use-jquery-plugins-with-angularjs/\">http://amitgharat.wordpress.com/2013/02/03/an-approach-to-use-jquery-plugins-with-angularjs/</a>\n<a href=\"http://www.youtube.com/watch?v=8ozyXwLzFYs\">http://www.youtube.com/watch?v=8ozyXwLzFYs</a></p>\n\n<p>Should I create a directive like so - </p>\n\n<pre><code>App.directive('directiveName', function() {\n    return {\n        restrict: 'A',\n        link: function(scope, element, attrs) {\n            $(element).'pluginActivationFunction'(scope.$eval(attrs.directiveName));\n        }\n    };\n}); \n</code></pre>\n\n<p>And then in the html call the script and the directive?</p>\n\n<pre><code>&lt;div directiveName &gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\" src=\"pluginName.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Thanks ahead</p>\n    ",
    "a": "\n<p>Yes, you are correct. If you are using a jQuery plugin, do not put the code in the controller. Instead create a directive and put the code that you would normally have inside the <code>link</code> function of the directive.  </p>\n\n<p>There are a couple of points in the documentation that you could take a look at. You can find them here:<br>\n<a href=\"http://docs.angularjs.org/misc/faq#faq_common-pitfalls\">Common Pitfalls</a>  </p>\n\n<p><a href=\"http://docs.angularjs.org/guide/controller#using-controllers-correctly\">Using controllers correctly</a></p>\n\n<p>Ensure that when you are referencing the script in your view, you refer it last - after the angularjs library, controllers, services and filters are referenced.</p>\n\n<p>EDIT: Rather than using <code>$(element)</code>, you can make use of <code>angular.element(element)</code> when using AngularJS with jQuery</p>\n    "
}, {
    "t": "How to use a keypress event in angularjs",
    "l": "http://stackoverflow.com/questions/17470790/how-to-use-a-keypress-event-in-angularjs",
    "q": "\n\n<p>I want to catch the enter key press event on the textbox below ... to make it more clear i am using a ng-repeat to populate the tbody .. here is the html ... </p>\n\n<pre><code>&lt;td&gt;&lt;input type=\"number\" id=\"closeqty{{$index}}\" class=\"pagination-right closefield\" \n    data-ng-model=\"closeqtymodel\" data-ng-change=\"change($index)\" required placeholder=\"{{item.closeMeasure}}\" /&gt;&lt;/td&gt;\n</code></pre>\n\n<p>this is my module..</p>\n\n<pre><code>angular.module('components', ['ngResource']);\n</code></pre>\n\n<p>i am using resource to populate the table and my controller code is ... </p>\n\n<pre><code>function Ajaxy($scope, $resource) {\n//controller which has resource to populate the table \n}\n</code></pre>\n\n<p>if there is anymore info needed please comment .. thanks in advance</p>\n    ",
    "a": "\n<p>You need to add a <code>directive</code>, like this:</p>\n\n<p><strong>Javascript</strong>:</p>\n\n<pre><code>app.directive('ngEnter', function () {\n    return function (scope, element, attrs) {\n        element.bind(\"keydown keypress\", function (event) {\n            if(event.which === 13) {\n                scope.$apply(function (){\n                    scope.$eval(attrs.ngEnter);\n                });\n\n                event.preventDefault();\n            }\n        });\n    };\n});\n</code></pre>\n\n<p><strong>HTML</strong>:</p>\n\n<pre><code>&lt;div ng-app=\"\" ng-controller=\"MainCtrl\"&gt;\n    &lt;input type=\"text\" ng-enter=\"doSomething()\"&gt;    \n&lt;/div&gt;\n</code></pre>\n    "
}, {
    "t": "When to use service instead of factory",
    "l": "http://stackoverflow.com/questions/18939709/when-to-use-service-instead-of-factory",
    "q": "\n\n<blockquote>\n  <p>Please bear with me here. I know there are other answers such as:\n  <a href=\"http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory\">Angular.js: service vs provider vs factory?</a></p>\n</blockquote>\n\n<p><strong>However I still can't figure out when you'd use service over factory.</strong></p>\n\n<p>From what I can tell factory is commonly used to create \"common\" functions that can be called by multiple Controllers: <a href=\"http://stackoverflow.com/questions/11324202/angularjs-common-controller-functions?lq=1\">AngularJS - Common controller functions</a></p>\n\n<p>The Angular docs seem to prefer factory over service. They even refer to \"service\" when they use factory which is even more confusing! <a href=\"http://docs.angularjs.org/guide/dev_guide.services.creating_services\">http://docs.angularjs.org/guide/dev_guide.services.creating_services</a></p>\n\n<p><strong>So when would one use service?</strong></p>\n\n<p>Is there something that is only possible or much easier done with service?</p>\n\n<p>Is there anything different that goes on behind the scenes? Performance/memory differences? </p>\n\n<p>Here's an example. Other than the method of declaration, they seem identical and I can't figure out why I'd do one vs the other. <a href=\"http://jsfiddle.net/uEpkE/\">http://jsfiddle.net/uEpkE/</a> </p>\n\n<p><strong>Update:</strong> From Thomas' answer it seems to imply that service is for simpler logic and factory for more complex logic with private methods, so I updated the fiddle code below and it seems that both are able to support private functions?</p>\n\n<pre><code>myApp.factory('fooFactory', function() {\n    var fooVar;\n    var addHi = function(foo){ fooVar = 'Hi '+foo; }\n\n    return {\n        setFoobar: function(foo){\n            addHi(foo);\n        },\n        getFoobar:function(){\n            return fooVar;\n        }\n    };\n});\nmyApp.service('fooService', function() {\n    var fooVar;\n    var addHi = function(foo){ fooVar = 'Hi '+foo;}\n\n    this.setFoobar = function(foo){\n        addHi(foo);\n    }\n    this.getFoobar = function(){\n        return fooVar;\n    }\n});\n\nfunction MyCtrl($scope, fooService, fooFactory) {\n    fooFactory.setFoobar(\"fooFactory\");\n    fooService.setFoobar(\"fooService\");\n    //foobars = \"Hi fooFactory, Hi fooService\"\n    $scope.foobars = [\n        fooFactory.getFoobar(),\n        fooService.getFoobar()\n    ];\n}\n</code></pre>\n    ",
    "a": "\n<h2>Explanation</h2>\n\n<p>You got different things here : </p>\n\n<p><strong>First:</strong></p>\n\n<ul>\n<li>If you use a service you will get <strong>the instance of a function</strong> (\"this\"\nkeyword). </li>\n<li>If you use a factory you will get  <strong>the value that is returned by\ninvoking the function reference</strong> (the return statement in    factory).</li>\n</ul>\n\n<p><em>ref:</em> <a href=\"http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory\">angular.service vs angular.factory</a></p>\n\n<p><strong>Second:</strong> </p>\n\n<p>Keep in mind all providers in AngularJS (value, constant, services, factories) are singletons ! </p>\n\n<p><strong>Three:</strong> </p>\n\n<p>Using one or the other (service or factory) is about code style.\nBut, the <strong>common way</strong> in AngularJS is to use <strong>factory</strong>. </p>\n\n<p>Why ? </p>\n\n<p><strong>Because</strong> <em>\"The factory method is the most common way of getting objects into AngularJS dependency injection system. It is very flexible and can contain sophisticated creation logic. Since factories are regular functions, we can also take advantage  of a new lexical scope to simulate \"private\" variables. This is very useful as we can hide implementation details of a given service.\"</em> </p>\n\n<p>(<em>ref</em>: <a href=\"http://rads.stackoverflow.com/amzn/click/1782161821\">http://www.amazon.com/Mastering-Web-Application-Development-AngularJS/dp/1782161821</a>).</p>\n\n<h2>Usage</h2>\n\n<p><em>Service :</em> Could be useful for sharing utility functions that are useful to invoke by simply appending () to the injected function reference. Could also be run with injectedArg.call(this) or similar.</p>\n\n<p><em>Factory :</em> Could be useful for returning a ‘class’ function that can then be new’ed to create instances.</p>\n\n<p>So, <strong>use a factory when you have complex logic</strong> in your service and <strong>you don't want expose this complexity</strong>. </p>\n\n<p>In other cases <strong>if you want to return an instance of a service just use service</strong>. </p>\n\n<p>But you'll see with time that you'll use factory in 80% of cases i think.</p>\n\n<p>For more details : <a href=\"http://blog.manishchhabra.com/2013/09/angularjs-service-vs-factory-with-example/\">http://blog.manishchhabra.com/2013/09/angularjs-service-vs-factory-with-example/</a> </p>\n\n<hr>\n\n<p><strong>UPDATE :</strong></p>\n\n<p>Excellent post here : \n<a href=\"http://iffycan.blogspot.com.ar/2013/05/angular-service-or-factory.html\">http://iffycan.blogspot.com.ar/2013/05/angular-service-or-factory.html</a></p>\n\n<blockquote>\n  <p>\"If you want your function to be called like a normal function, use\n  factory. If you want your function to be instantiated with the new\n  operator, use service. If you don't know the difference, use factory.\"</p>\n</blockquote>\n\n<hr>\n\n<p><strong>UPDATE :</strong></p>\n\n<p>AngularJS team does his work and give an explanation : \n<a href=\"http://docs.angularjs.org/guide/providers\">http://docs.angularjs.org/guide/providers</a></p>\n\n<p>And from this page : </p>\n\n<blockquote>\n  <p>\"Factory and Service are the most commonly used recipes. The only difference between them is that Service recipe works better for objects of custom type, while Factory can produce JavaScript primitives and functions.\"</p>\n</blockquote>\n    "
}, {
    "t": "Adding parameter to ng-click function inside ng-repeat doesn't seem to work",
    "l": "http://stackoverflow.com/questions/17039926/adding-parameter-to-ng-click-function-inside-ng-repeat-doesnt-seem-to-work",
    "q": "\n\n<p>I have a simple loop with <code>ng-repeat</code> like this:</p>\n\n<pre><code>&lt;li ng-repeat='task in tasks'&gt;\n  &lt;p&gt; {{task.name}}\n  &lt;button ng-click=\"removeTask({{task.id}})\"&gt;remove&lt;/button&gt;\n&lt;/li&gt;\n</code></pre>\n\n<p>There is a function in the controller <code>$scope.removeTask(taskID)</code>.</p>\n\n<p>As far as I know Angular will first render the view and replace interpolated <code>{{task.id}}</code> with a number, and then, on click event, will evaluate <code>ng-click</code> string.</p>\n\n<p>In this case <code>ng-click</code> gets totally what is expected, ie: <code>ng-click=\"removeTask(5)\".</code> However... it's not doing anything.</p>\n\n<p>Of course I can write a code to get <code>task.id</code> from the <code>$tasks</code> array or even the DOM, but this does not seem like the Angular way.</p>\n\n<p>So, how can one add dynamic content to <code>ng-click</code> directive inside a <code>ng-repeat</code> loop?</p>\n    ",
    "a": "\n<p>Instead of </p>\n\n<pre><code>&lt;button ng-click=\"removeTask({{task.id}})\"&gt;remove&lt;/button&gt;\n</code></pre>\n\n<p>do this:</p>\n\n<pre><code>&lt;button ng-click=\"removeTask(task.id)\"&gt;remove&lt;/button&gt;\n</code></pre>\n\n<p>Please see this fiddle:</p>\n\n<p><a href=\"http://jsfiddle.net/JSWorld/Hp4W7/34/\">http://jsfiddle.net/JSWorld/Hp4W7/34/</a></p>\n    "
}, {
    "t": "Is there a way to make AngularJS load partials in the beginning and not at when needed?",
    "l": "http://stackoverflow.com/questions/12346690/is-there-a-way-to-make-angularjs-load-partials-in-the-beginning-and-not-at-when",
    "q": "\n\n<p>I have a route setup like this:</p>\n\n<pre><code>var myApp = angular.module('myApp', []).\n    config(['$routeProvider', function ($routeProvider) {\n    $routeProvider.\n        when('/landing', {\n            templateUrl: '/landing-partial',\n            controller: landingController\n        }).\n        when('/:wkspId/query', {\n            templateUrl: '/query-partial',\n            controller: queryController\n        }).\n        otherwise({\n            redirectTo: '/landing'\n        });\n}]);\n</code></pre>\n\n<p>I want to be able to make angularjs download both the partials in the beginning and not when requested.</p>\n\n<p>Is it possible?</p>\n    ",
    "a": "\n<p>Yes, there are at least 2 solutions for this:</p>\n\n<ol>\n<li>Use the <code>script</code> directive (<a href=\"http://docs.angularjs.org/api/ng.directive%3ascript\">http://docs.angularjs.org/api/ng.directive:script</a>) to put your partials in the initially loaded HTML</li>\n<li>You could also fill in <code>$templateCache</code> (<a href=\"http://docs.angularjs.org/api/ng.%24templateCache\">http://docs.angularjs.org/api/ng.$templateCache</a>) from JavaScript if needed (possibly based on result of <code>$http</code> call)</li>\n</ol>\n\n<p>If you would like to use method (2) to fill in <code>$templateCache</code> you can do it like this:</p>\n\n<pre><code>$templateCache.put('second.html', '&lt;b&gt;Second&lt;/b&gt; template');\n</code></pre>\n\n<p>Of course the templates content could come from a <code>$http</code> call:</p>\n\n<pre><code>$http.get('third.html', {cache:$templateCache});\n</code></pre>\n\n<p>Here is the plunker those techniques: <a href=\"http://plnkr.co/edit/J6Y2dc?p=preview\">http://plnkr.co/edit/J6Y2dc?p=preview</a></p>\n    "
}, {
    "t": "Adding multiple class using ng-class",
    "l": "http://stackoverflow.com/questions/18871277/adding-multiple-class-using-ng-class",
    "q": "\n\n<p>Can we have multiple expression to add multiple ng-class ?</p>\n\n<p>for eg.</p>\n\n<pre><code>&lt;div ng-class=\"{class1: expressionData1, class2: expressionData2}\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>If yes can anyone put up the example to do so.</p>\n\n<p>.</p>\n    ",
    "a": "\n<p>To apply different classes when different expressions evaluate to <code>true</code>:</p>\n\n<pre><code>&lt;div ng-class=\"{'class1' : expression1, 'class2' : expression2}\"&gt;\n    Hello World!\n&lt;/div&gt;\n</code></pre>\n\n<p>To apply multiple classes when an expression holds true:</p>\n\n<pre><code>&lt;!-- notice expression1 used twice --&gt;\n&lt;div ng-class=\"{'class1' : expression1, 'class2' : expression1}\"&gt;\n    Hello World!\n&lt;/div&gt;\n</code></pre>\n\n<p>or quite simply:</p>\n\n<pre><code>&lt;div ng-class=\"{'class1 class2' : expression1}\"&gt;\n    Hello World!\n&lt;/div&gt;\n</code></pre>\n    "
}, {
    "t": "How to create separate AngularJS controller files?",
    "l": "http://stackoverflow.com/questions/20087627/how-to-create-separate-angularjs-controller-files",
    "q": "\n\n<p>I have all of my AngularJS controllers in one file, controllers.js.  This file is structured as follows:</p>\n\n<pre><code>angular.module('myApp.controllers', [])\n  .controller('Ctrlr1', ['$scope', '$http', function($scope, $http) {   \n  }])\n  .controller('Ctlr2', ['$scope', '$http', function($scope, $http) }\n  }])\n</code></pre>\n\n<p>What I'd like to do is put Ctrl1 and Ctrl2 into separate files.  I would then include both files in my index.html, but how should that be structured?  I tried doing some thing like this and it throws an error in the web browser console saying it can't find my controllers.  Any hints?</p>\n\n<p>I searched StackOverflow and found this similar question - however, this syntax is using a different framework (CoffeeScript) on top of Angular, and so I haven't been able to follow.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/12655890/angularjs-how-do-i-create-controllers-in-multiple-files\">AngularJS: How do I create controllers in multiple files</a></p>\n    ",
    "a": "\n<p>File one:</p>\n\n<pre><code>angular.module('myApp.controllers', []);\n</code></pre>\n\n<p>File two:</p>\n\n<pre><code>angular.module('myApp.controllers').controller('Ctrlr1', ['$scope', '$http', function($scope, $http){\n\n}]);\n</code></pre>\n\n<p>File three:</p>\n\n<pre><code>angular.module('myApp.controllers').controller('Ctlr2', ['$scope', '$http', function($scope, $http){\n\n}]);\n</code></pre>\n\n<p>Include in that order. I recommend 3 files so the module declaration is on its own.</p>\n\n<hr>\n\n<p>As for folder structure there are many many many opinions on the subject, but these two are pretty good</p>\n\n<p><a href=\"https://github.com/angular/angular-seed\">https://github.com/angular/angular-seed</a></p>\n\n<p><a href=\"http://briantford.com/blog/huuuuuge-angular-apps.html\">http://briantford.com/blog/huuuuuge-angular-apps.html</a></p>\n    "
}, {
    "t": "Recommended way of getting data from the server",
    "l": "http://stackoverflow.com/questions/11850025/recommended-way-of-getting-data-from-the-server",
    "q": "\n\n<p>What is the recommended way to connect to server data sources in AngularJS without using $resource.</p>\n\n<p>The $resource has many limitations such as: not using proper futures, not being flexible enough.</p>\n    ",
    "a": "\n<p>There are cases when $resource may not be appropriate when talking to backend. This shows how to set up $resource like behavior without using resource.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('myApp').factory('Book', function($http) {\n  // Book is a class which we can use for retrieving and \n  // updating data on the server\n  var Book = function(data) {\n    angular.extend(this, data);\n  }\n\n  // a static method to retrieve Book by ID\n  Book.get = function(id) {\n    return $http.get('/Book/' + id).then(function(response) {\n      return new Book(response.data);\n    });\n  };\n\n  // an instance method to create a new Book\n  Book.prototype.create = function() {\n    var book = this;\n    return $http.post('/Book/', book).then(function(response) {\n      book.id = response.data.id;\n      return book;\n    });\n  }\n\n  return Book;\n});\n</code></pre>\n\n<p>Then inside your controller you can:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var AppController = function(Book) {\n  // to create a Book\n  var book = new Book();\n  book.name = 'AngularJS in nutshell';\n  book.create();\n\n  // to retrieve a book\n  var bookPromise = Book.get(123);\n  bookPromise.then(function(b) {\n    book = b;\n  });\n};\n</code></pre>\n    "
}, {
    "t": "Removing the hashtag from AngularJS urls (# symbol)",
    "l": "http://stackoverflow.com/questions/14771091/removing-the-hashtag-from-angularjs-urls-symbol",
    "q": "\n\n<p>Is it possible to remove the # symbol from angular.js urls?</p>\n\n<p>I still want to be able to use the browsers back button etc when i change the view and will update the url with params, but I don't want the # symbol.</p>\n\n<p>The tutorial routprovider is declared as follows</p>\n\n<pre><code>angular.module('phonecat', []).\n  config(['$routeProvider', function($routeProvider) {\n  $routeProvider.\n  when('/phones', {templateUrl: 'partials/phone-list.html',   controller: PhoneListCtrl}).\n  when('/phones/:phoneId', {templateUrl: 'partials/phone-detail.html', controller: PhoneDetailCtrl}).\n  otherwise({redirectTo: '/phones'});\n}]);\n</code></pre>\n\n<p>can I edit this to have the same functionality without the #?</p>\n    ",
    "a": "\n<p>Yes, you should configure <a href=\"https://docs.angularjs.org/api/ng/provider/$locationProvider\"><code>$locationProvider</code></a> and set <a href=\"https://docs.angularjs.org/api/ng/provider/$locationProvider\"><code>html5Mode</code></a> to <code>true</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('phonecat', []).\n  config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {\n\n    $routeProvider.\n      when('/phones', {templateUrl: 'partials/phone-list.html',   controller: PhoneListCtrl}).\n      when('/phones/:phoneId', {templateUrl: 'partials/phone-detail.html', controller: PhoneDetailCtrl}).\n      otherwise({redirectTo: '/phones'});\n\n    $locationProvider.html5Mode(true);\n\n  }]);\n</code></pre>\n    "
}, {
    "t": "A ternary in templates",
    "l": "http://stackoverflow.com/questions/12008580/a-ternary-in-templates",
    "q": "\n\n<p>How do you do a ternary with AngularJS (in the templates)?</p>\n\n<p>It would be nice to use some in html attributes (classes and style) instead of creating and calling a function of the controller.</p>\n    ",
    "a": "\n<p><strong>Update</strong>: Angular 1.1.5 added a <a href=\"https://github.com/angular/angular.js/commit/6798fec4390a72b7943a49505f8a245b6016c84b\">ternary operator</a>, so now we can simply write</p>\n\n<pre><code>&lt;li ng-class=\"$first ? 'firstRow' : 'nonFirstRow'\"&gt;\n</code></pre>\n\n<hr>\n\n<p>If you are using an earlier version of Angular, your two choices are:</p>\n\n<ol>\n<li><code>(condition &amp;&amp; result_if_true || !condition &amp;&amp; result_if_false)</code></li>\n<li><code>{true: 'result_if_true', false: 'result_if_false'}[condition]</code></li>\n</ol>\n\n<p>item 2. above creates an object with two properties.  The array syntax is used to select either the property with name true or the property with name false, and return the associated value.</p>\n\n<p>E.g.,</p>\n\n<pre><code>&lt;li class=\"{{{true: 'myClass1 myClass2', false: ''}[$first]}}\"&gt;...&lt;/li&gt;\n or\n&lt;li ng-class=\"{true: 'myClass1 myClass2', false: ''}[$first]\"&gt;...&lt;/li&gt;\n</code></pre>\n\n<p>$first is set to true inside an ng-repeat for the first element, so the above would apply class 'myClass1' and 'myClass2' only the first time through the loop.</p>\n\n<p>With <strong>ng-class</strong> there is an easier way though:  ng-class takes an expression that must evaluate to one of the following:</p>\n\n<ol>\n<li>a string of space-delimited class names</li>\n<li>an array of class names</li>\n<li>a map/object of class names to boolean values.  </li>\n</ol>\n\n<p>An example of 1) was given above.  Here is an example of 3, which I think reads much better:</p>\n\n<pre><code> &lt;li ng-class=\"{myClass: $first, anotherClass: $index == 2}\"&gt;...&lt;/li&gt;\n</code></pre>\n\n<p>The first time through an ng-repeat loop, class myClass is added.  The 3rd time through ($index starts at 0), class anotherClass is added.</p>\n\n<p><strong>ng-style</strong> takes an expression that must evaluate to a map/object of CSS style names to CSS values.  E.g.,</p>\n\n<pre><code> &lt;li ng-style=\"{true: {color: 'red'}, false: {}}[$first]\"&gt;...&lt;/li&gt;\n</code></pre>\n    "
}, {
    "t": "what is the difference between ng-if and ng-show/ng-hide",
    "l": "http://stackoverflow.com/questions/19177732/what-is-the-difference-between-ng-if-and-ng-show-ng-hide",
    "q": "\n\n<p>I'm trying to understand the difference between <code>ng-if</code> and <code>ng-show</code>/<code>ng-hide</code>, but they look the same to me.</p>\n\n<p>Is there a difference that I should keep in mind choosing to use one or the other ?</p>\n    ",
    "a": "\n<h2>ngIf</h2>\n\n<p>The <code>ngIf</code> directive <strong>removes or recreates</strong> a portion of the DOM tree based on an expression. If the expression assigned to <code>ngIf</code> evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.</p>\n\n<pre><code>&lt;!-- when $scope.myValue is truthy (element is restored) --&gt;\n&lt;div ng-if=\"1\"&gt;&lt;/div&gt;\n\n&lt;!-- when $scope.myValue is falsy (element is removed) --&gt;\n&lt;div ng-if=\"0\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>When an element is removed using <code>ngIf</code> its scope is destroyed and a new scope is created when the element is restored. The scope created within <code>ngIf</code> inherits from its parent scope using prototypal inheritance.</p>\n\n<p>If <code>ngModel</code> is used within <code>ngIf</code> to bind to a JavaScript primitive defined in the parent scope, any modifications made to the variable within the child scope will not affect the value in the parent scope, e.g.</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"data\"&gt;\n&lt;div ng-if=\"true\"&gt;\n    &lt;input type=\"text\" ng-model=\"data\"&gt;\n&lt;/div&gt;        \n</code></pre>\n\n<p>To get around this situation and update the model in the parent scope from inside the child scope, use an object:</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"data.input\"&gt;\n&lt;div ng-if=\"true\"&gt;\n    &lt;input type=\"text\" ng-model=\"data.input\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Or, <code>$parent</code> variable to reference the parent scope object:</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"data\"&gt;\n&lt;div ng-if=\"true\"&gt;\n    &lt;input type=\"text\" ng-model=\"$parent.data\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<h2>ngShow</h2>\n\n<p>The <code>ngShow</code> directive <strong>shows or hides</strong> the given HTML element based on the expression provided to the <code>ngShow</code> attribute. The element is shown or hidden by removing or adding the <code>ng-hide</code> CSS class onto the element. The <code>.ng-hide</code> CSS class is predefined in AngularJS and sets the display style to none (using an <code>!important</code> flag).</p>\n\n<pre><code>&lt;!-- when $scope.myValue is truthy (element is visible) --&gt;\n&lt;div ng-show=\"1\"&gt;&lt;/div&gt;\n\n&lt;!-- when $scope.myValue is falsy (element is hidden) --&gt;\n&lt;div ng-show=\"0\" class=\"ng-hide\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>When the <code>ngShow</code> expression evaluates to <code>false</code> then the <code>ng-hide</code> CSS class is added to the <code>class</code> attribute on the element causing it to become hidden. When <code>true</code>, the <code>ng-hide</code> CSS class is removed from the element causing the element not to appear hidden.</p>\n    "
}, {
    "t": "With ng-bind-html-unsafe removed, how do I inject HTML?",
    "l": "http://stackoverflow.com/questions/19415394/with-ng-bind-html-unsafe-removed-how-do-i-inject-html",
    "q": "\n\n<p>I'm trying to use <code>$sanitize</code> provider and the <code>ng-bind-htm-unsafe</code> directive to allow my controller to inject HTML into a DIV.</p>\n\n<p>However, I can't get it to work.</p>\n\n<pre><code>&lt;div ng-bind-html-unsafe=\"{{preview_data.preview.embed.html}}\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>I discovered that it is because it was removed from AngularJS (thanks).</p>\n\n<p>But without <code>ng-bind-html-unsafe</code>, I get this error:<br></p>\n\n<p><a href=\"http://errors.angularjs.org/undefined/$sce/unsafe\">http://errors.angularjs.org/undefined/$sce/unsafe</a></p>\n    ",
    "a": "\n<p>You indicated that you're using Angular 1.2.0... as one of the other comments indicated, <code>ng-bind-html-unsafe</code> has been deprecated.</p>\n\n<p>Instead, you'll want to do something like this:</p>\n\n<pre><code>&lt;div ng-bind-html=\"preview_data.preview.embed.htmlSafe\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>In your controller, inject the <code>$sce</code> service, and mark the HTML as \"trusted\":</p>\n\n<pre><code>myApp.controller('myCtrl', ['$scope', '$sce', function($scope, $sce) {\n  // ...\n  $scope.preview_data.preview.embed.htmlSafe = \n     $sce.trustAsHtml(preview_data.preview.embed.html);\n}\n</code></pre>\n\n<p>Note that you'll want to be using 1.2.0-rc3 or newer.  (They fixed <a href=\"https://github.com/angular/angular.js/issues/3932\">a bug</a> in rc3 that prevented \"watchers\" from working properly on trusted HTML.)<br></p>\n    "
}, {
    "t": "Way to ng-repeat defined number of times instead of repeating over array?",
    "l": "http://stackoverflow.com/questions/16824853/way-to-ng-repeat-defined-number-of-times-instead-of-repeating-over-array",
    "q": "\n\n<p>Is there a way to ng-repeat a defined number of times instead of always having to iterate over an array?</p>\n\n<p>For example, below I want the list item to show up 5 times assuming <code>$scope.number</code> equal to 5 in addition incrementing the number so each list item increments like 1, 2, 3, 4, 5</p>\n\n<p>Desired result:</p>\n\n<pre><code>&lt;ul&gt;\n   &lt;li&gt;&lt;span&gt;1&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;&lt;span&gt;2&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;&lt;span&gt;3&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;&lt;span&gt;4&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;&lt;span&gt;5&lt;/span&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n    ",
    "a": "\n<p>At the moment, <code>ng-repeat</code> only accepts a collection as a parameter, but you could do this:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"i in getNumber(number)\"&gt;&lt;span&gt;{{$index+1}}&lt;/span&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>And somewhere in your controller:</p>\n\n<pre><code>$scope.number = 5;\n$scope.getNumber = function(num) {\n    return new Array(num);   \n}\n</code></pre>\n\n<p>This would allow you to change <code>$scope.number</code> to any number as you please and still maintain the binding you're looking for.</p>\n\n<p><a href=\"http://jsfiddle.net/sh0ber/cHQLH/\">Here is a fiddle</a> with a couple of lists using the same <code>getNumber</code> function.</p>\n\n<p><strong>EDIT 1/6/2014</strong>:  Newer versions of Angular make use of the following syntax:</p>\n\n<pre><code>&lt;li ng-repeat=\"i in getNumber(number) track by $index\"&gt;\n</code></pre>\n    "
}, {
    "t": "Call Angular JS from legacy code",
    "l": "http://stackoverflow.com/questions/10490570/call-angular-js-from-legacy-code",
    "q": "\n\n<p>I'm using angular to build HTML controls that interact with a legacy Flex application. All callbacks from the Flex app must be attached to the DOM window.</p>\n\n<p>For example (in AS3)</p>\n\n<pre><code>ExternalInterface.call(\"save\", data);\n</code></pre>\n\n<p>Will call</p>\n\n<pre><code>window.save = function(data){\n    // want to update a service \n    // or dispatch an event here...\n}\n</code></pre>\n\n<p>From within the JS resize function I'd like to dispatch an event that a controller can hear. It seems that creating a service is the way to go. Can you update a service from outside of Angular? Can a controller listen for events from a service? In one <a href=\"http://jsfiddle.net/6JvRV/\">experiment (click for fiddle)</a> I did it seems like I can access a service but updating the service's data doesn't get reflected in the view (in the example an <code>&lt;option&gt;</code> should be added to the <code>&lt;select&gt;</code>).</p>\n\n<p>thanks!</p>\n    ",
    "a": "\n<p>Interop from outside of angular to angular is same as debugging angular application or integrating with third party library.</p>\n\n<p>For any DOM element you can do this:</p>\n\n<ul>\n<li><code>angular.element(domElement).scope()</code> to get the current scope for the element</li>\n<li><code>angular.element(domElement).injector()</code> to get the current app injector</li>\n<li><code>angular.element(domElement).controller()</code> to get a hold of the <code>ng-controller</code> instance.</li>\n</ul>\n\n<p>From the injector you can get a hold of any service in angular application. Similarly from the scope you can invoke any methods which have been published to it.</p>\n\n<p>Keep in mind that any changes to the angular model or any method invocations on the scope need to be wrapped in <code>$apply()</code> like this:</p>\n\n<pre><code>$scope.$apply(function(){\n  // perform any model changes or method invocations here on angular app.\n});\n</code></pre>\n    "
}, {
    "t": "How do I configure different environments in Angular.js?",
    "l": "http://stackoverflow.com/questions/16339595/how-do-i-configure-different-environments-in-angular-js",
    "q": "\n\n<p>How do you manage configuration variables/constants for different environments?</p>\n\n<p>This could be an example:  </p>\n\n<p>My rest API is reachable on <code>localhost:7080/myapi/</code>, but my friend that works on the same code under Git version control has the API deployed on his Tomcat on <code>localhost:8099/hisapi/</code>.</p>\n\n<p>Supposing that we have something like this : </p>\n\n<pre><code>angular\n    .module('app', ['ngResource'])\n\n    .constant('API_END_POINT','&lt;local_end_point&gt;')\n\n    .factory('User', function($resource, API_END_POINT) {\n        return $resource(API_END_POINT + 'user');\n    });\n</code></pre>\n\n<p>How do I dynamically inject the correct value of the API endpoint, depending on the environment?</p>\n\n<p>In PHP I usually do this kind of stuff with a <code>config.username.xml</code> file, merging the basic configuration file (config.xml) with the local environment configuration file recognised by the name of the user. But I don't know how to manage this kind of thing in JavaScript?</p>\n    ",
    "a": "\n<p>I'm a little late to the thread, but if you're using <a href=\"http://gruntjs.com/\">Grunt</a> I've had great success with <a href=\"https://npmjs.org/package/grunt-ng-constant\"><code>grunt-ng-constant</code></a>.</p>\n\n<p>The config section for <code>ngconstant</code> in my <code>Gruntfile.js</code> looks like</p>\n\n<pre><code>ngconstant: {\n  options: {\n    name: 'config',\n    wrap: '\"use strict\";\\n\\n{%= __ngModule %}',\n    space: '  '\n  },\n  development: {\n    options: {\n      dest: '&lt;%= yeoman.app %&gt;/scripts/config.js',\n    },\n    constants: {\n      ENV: 'development'\n    }\n  },\n  production: {\n    options: {\n      dest: '&lt;%= yeoman.dist %&gt;/scripts/config.js',\n    },\n    constants: {\n      ENV: 'production'\n    }\n  }\n}\n</code></pre>\n\n<p>The tasks that use <code>ngconstant</code> look like</p>\n\n<pre><code>grunt.registerTask('server', function (target) {\n  if (target === 'dist') {\n    return grunt.task.run([\n      'build',\n      'open',\n      'connect:dist:keepalive'\n    ]);\n  }\n\n  grunt.task.run([\n    'clean:server',\n    'ngconstant:development',\n    'concurrent:server',\n    'connect:livereload',\n    'open',\n    'watch'\n  ]);\n});\n\ngrunt.registerTask('build', [\n  'clean:dist',\n  'ngconstant:production',\n  'useminPrepare',\n  'concurrent:dist',\n  'concat',\n  'copy',\n  'cdnify',\n  'ngmin',\n  'cssmin',\n  'uglify',\n  'rev',\n  'usemin'\n]);\n</code></pre>\n\n<p>So running <code>grunt server</code> will generate a <code>config.js</code> file in <code>app/scripts/</code> that looks like</p>\n\n<pre><code>\"use strict\";\nangular.module(\"config\", []).constant(\"ENV\", \"development\");\n</code></pre>\n\n<p>Finally, I declare the dependency on whatever modules need it:</p>\n\n<pre><code>// the 'config' dependency is generated via grunt\nvar app = angular.module('myApp', [ 'config' ]);\n</code></pre>\n\n<p>Now my constants can be dependency injected where needed. E.g.,</p>\n\n<pre><code>app.controller('MyController', ['ENV', function( ENV ) {\n  if( ENV === 'production' ) {\n    ...\n  }\n}]);\n</code></pre>\n    "
}, {
    "t": "AngularJs: ng-show / ng-hide",
    "l": "http://stackoverflow.com/questions/12599637/angularjs-ng-show-ng-hide",
    "q": "\n\n<p>I am trying to show / hide some HTML using the <code>ng-show</code> and <code>ng-hide</code> functions provided by <a href=\"http://docs.angularjs.org/api\"><strong>AngularJS</strong></a>.</p>\n\n<p>According to the documentation, the respective usage for these functions are as follows:</p>\n\n<blockquote>\n  <p>ngHide – {expression} - If the expression truthy then the element is shown or hidden respectively.\n  ngShow – {expression} - If the expression is truthy then the element is shown or hidden respectively.</p>\n</blockquote>\n\n<p>This works for the following usecase:</p>\n\n<pre><code>&lt;p ng-hide=\"true\"&gt;I'm hidden&lt;/p&gt;\n&lt;p ng-show=\"true\"&gt;I'm shown&lt;/p&gt;\n</code></pre>\n\n<p>However, should we use a parameter from an object as the expression then the <code>ng-hide</code> and <code>ng-show</code> are given the correct <code>true</code>/<code>false</code> value but the values are not treated as a boolean so always return <code>false</code>:</p>\n\n<p><b>Source</b></p>\n\n<pre><code>&lt;p ng-hide=\"{{foo.bar}}\"&gt;I could be shown, or I could be hidden&lt;/p&gt;\n&lt;p ng-show=\"{{foo.bar}}\"&gt;I could be shown, or I could be hidden&lt;/p&gt;\n</code></pre>\n\n<p><b>Result</b></p>\n\n<pre><code>&lt;p ng-hide=\"true\"&gt;I should be hidden but I'm actually shown&lt;/p&gt;\n&lt;p ng-show=\"true\"&gt;I should be shown but I'm actually hidden&lt;/p&gt;\n</code></pre>\n\n<p>This is either a bug or I am not doing this correctly.</p>\n\n<p>I cannot find any relative information on referencing object parameters as expressions so I was hoping anyone with a better understanding of AngularJs might be able to help me out?</p>\n    ",
    "a": "\n<p>The <code>foo.bar</code> reference should not contain the braces:</p>\n\n<pre><code>&lt;p ng-hide=\"foo.bar\"&gt;I could be shown, or I could be hidden&lt;/p&gt;\n&lt;p ng-show=\"foo.bar\"&gt;I could be shown, or I could be hidden&lt;/p&gt;\n</code></pre>\n\n<p>Angular <a href=\"http://docs.angularjs.org/guide/expression\">expressions</a> need to be within the curly-brace bindings, where as Angular <a href=\"http://docs.angularjs.org/guide/directive\">directives</a> do not.</p>\n\n<p>See also <a href=\"http://docs.angularjs.org/guide/templates\">Understanding Angular Templates</a>.</p>\n    "
}, {
    "t": "execute function on page load?",
    "l": "http://stackoverflow.com/questions/15458609/execute-function-on-page-load",
    "q": "\n\n<p>Currently I have an Angular.js page that allows searching and displays results. User clicks on a search result, then clicks back button. I want the search results to be displayed again but I can't work out how to trigger the search to execute.  Here's the detail:</p>\n\n<ul>\n<li>My Angular.js page is a search page, with a search field and a search\nbutton. The user can manually type in a query and press a button and\nand ajax query is fired and the results are displayed.  I update the URL with the search term. That all works fine.</li>\n<li>User clicks on a result of the search and is taken to a different page - that works fine too. </li>\n<li>User clicks back button, and goes back to my angular search page, and the correct URL is displayed, including the search term. All works fine.</li>\n<li>I have bound the search field value to the search term in the URL, so it contains the expected search term. All works fine.</li>\n</ul>\n\n<p>How do I get the search function to execute again without the user having to press the \"search button\"? If it was jquery then I would execute a function in the documentready function. I can't see the Angular.js equivalent.</p>\n    ",
    "a": "\n<p>On the one hand as @Mark-Rajcok said you can just get away with private inner function:</p>\n\n<pre><code>// at the bottom of your controller\nvar init = function () {\n   // check if there is query in url\n   // and fire search in case its value is not empty\n};\n// and fire it after definition\ninit();\n</code></pre>\n\n<p>Also you can take a look at <a href=\"http://docs.angularjs.org/api/ng.directive%3angInit\">ng-init</a> directive. Implementation will be much like:</p>\n\n<pre><code>// register controller in html\n&lt;div data-ng-controller=\"myCtrl\" data-ng-init=\"init()\"&gt;&lt;/div&gt;\n\n// in controller\n$scope.init = function () {\n    // check if there is query in url\n    // and fire search in case its value is not empty\n};\n</code></pre>\n\n<p>But take care about it as <a href=\"http://docs.angularjs.org/api/ng.directive%3angInit\">angular documentation implies (since v1.2)</a> to NOT use <code>ng-init</code> for that. However imo it depends on architecture of your app.</p>\n\n<p>I used <code>ng-init</code> when I wanted to pass a value from back-end into angular app:</p>\n\n<pre><code>&lt;div data-ng-controller=\"myCtrl\" data-ng-init=\"init('%some_backend_value%')\"&gt;&lt;/div&gt;\n</code></pre>\n    "
}, {
    "t": "Processing $http response in service",
    "l": "http://stackoverflow.com/questions/12505760/processing-http-response-in-service",
    "q": "\n\n<p>I recently posted a detailed description of the issue I am facing <a href=\"http://stackoverflow.com/questions/12504747/angularjs-processing-asynchronous-data-in-service\">here</a> at SO. As I couldn't send an actual <code>$http</code> request, I used timeout to simulate asynchronous behavior. Data binding from my model to view is working correct, with the help of @Gloopy</p>\n\n<p>Now, when I use <code>$http</code> instead of <code>$timeout</code> (tested locally), I could see the asynchronous request was successful and <code>data</code> is filled with json response in my service. But, my view is not updating.</p>\n\n<p>updated Plunkr <a href=\"http://plnkr.co/edit/RbzODj?p=preview\">here</a></p>\n    ",
    "a": "\n<p>Here is a Plunk that does what you want: <a href=\"http://plnkr.co/edit/TTlbSv?p=preview\">http://plnkr.co/edit/TTlbSv?p=preview</a></p>\n\n<p>The idea is that you work with promises directly and their \"then\" functions to manipulate and access the asynchronously returned responses.</p>\n\n<pre><code>app.factory('myService', function($http) {\n  var myService = {\n    async: function() {\n      // $http returns a promise, which has a then function, which also returns a promise\n      var promise = $http.get('test.json').then(function (response) {\n        // The then function here is an opportunity to modify the response\n        console.log(response);\n        // The return value gets picked up by the then in the controller.\n        return response.data;\n      });\n      // Return the promise to the controller\n      return promise;\n    }\n  };\n  return myService;\n});\n\napp.controller('MainCtrl', function( myService,$scope) {\n  // Call the async method and then do stuff with what is returned inside our own then function\n  myService.async().then(function(d) {\n    $scope.data = d;\n  });\n});\n</code></pre>\n\n<p>Here is a slightly more complicated version that caches the request so you only make it first time (<a href=\"http://plnkr.co/edit/2yH1F4IMZlMS8QsV9rHv?p=preview\">http://plnkr.co/edit/2yH1F4IMZlMS8QsV9rHv?p=preview</a>):</p>\n\n<pre><code>app.factory('myService', function($http) {\n  var promise;\n  var myService = {\n    async: function() {\n      if ( !promise ) {\n        // $http returns a promise, which has a then function, which also returns a promise\n        promise = $http.get('test.json').then(function (response) {\n          // The then function here is an opportunity to modify the response\n          console.log(response);\n          // The return value gets picked up by the then in the controller.\n          return response.data;\n        });\n      }\n      // Return the promise to the controller\n      return promise;\n    }\n  };\n  return myService;\n});\n\napp.controller('MainCtrl', function( myService,$scope) {\n  $scope.clearData = function() {\n    $scope.data = {};\n  };\n  $scope.getData = function() {\n    // Call the async method and then do stuff with what is returned inside our own then function\n    myService.async().then(function(d) {\n      $scope.data = d;\n    });\n  };\n});\n</code></pre>\n    "
}, {
    "t": "Angular JS: How/when to use ng-click to call a route?",
    "l": "http://stackoverflow.com/questions/14201753/angular-js-how-when-to-use-ng-click-to-call-a-route",
    "q": "\n\n<p>Suppose you are using routes:</p>\n\n<pre><code>// bootstrap\nmyApp.config(['$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider) {\n\n    $routeProvider.when('/home', {\n        templateUrl: 'partials/home.html',\n        controller: 'HomeCtrl'\n    });\n    $routeProvider.when('/about', {\n        templateUrl: 'partials/about.html',\n        controller: 'AboutCtrl'\n    });\n...\n</code></pre>\n\n<p>And in your html, you want to navigate to the about page when a button is clicked.  One way would be </p>\n\n<pre><code>&lt;a href=\"#/about\"&gt;\n</code></pre>\n\n<p>... but it seems ng-click would be useful here too.</p>\n\n<ol>\n<li>Is that assumption correct?  That ng-click be used instead of anchor?</li>\n<li>If so, how would that work?  IE: \n</li>\n</ol>\n    ",
    "a": "\n<p>Routes monitor the <code>$location</code> service and respond to changes in URL (typically through the hash). To \"activate\" a route, you simply change the URL. The easiest way to do that is with anchor tags.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"#/home\"&gt;Go Home&lt;/a&gt;\n&lt;a href=\"#/about\"&gt;Go to About&lt;/a&gt;\n</code></pre>\n\n<p>Nothing more complicated is needed. If, however, you must do this from code, the proper way is by using the <code>$location</code> service:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$scope.go = function ( path ) {\n  $location.path( path );\n};\n</code></pre>\n\n<p>Which, for example, a button could trigger:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;button ng-click=\"go('/home')\"&gt;&lt;/button&gt;\n</code></pre>\n    "
}, {
    "t": "How to access parent scope from within a custom directive *with own scope* in AngularJS?",
    "l": "http://stackoverflow.com/questions/17900201/how-to-access-parent-scope-from-within-a-custom-directive-with-own-scope-in-an",
    "q": "\n\n<p>I'm looking for any manner of accessing the \"parent\" scope within a directive.  Any combination of scope, transclude, require, passing in variables (or the scope itself) from above, etc.  I'm totally willing to bend over backwards, but I want to avoid something totally hacky or unmaintainable.  For example, I know I could do it right now by taking the <code>$scope</code> from the preLink parameters and iterating over it's <code>$sibling</code> scopes to find the conceptual \"parent\".</p>\n\n<p>What I really want is to be able to <code>$watch</code> an expression in the parent scope.  If I can do that, then I can accomplish what I'm trying to do over here: \n<a href=\"http://stackoverflow.com/questions/17863732/angularjs-how-to-render-a-partial-with-variables\">AngularJS - How to render a partial with variables?</a></p>\n\n<p><strong>An important note</strong> is that the directive must be re-usable within the same parent scope.  Therefore the default behavior (scope: false) doesn't work for me.  I need an individual scope per instance of the directive, and then I need to <code>$watch</code> a variable that lives in the parent scope.</p>\n\n<p>A code sample is worth 1000 words, so:</p>\n\n<pre><code>app.directive('watchingMyParentScope', function() {\n    return {\n        require: /* ? */,\n        scope: /* ? */,\n        transclude: /* ? */,\n        controller: /* ? */,\n        compile: function(el,attr,trans) {\n            // Can I get the $parent from the transclusion function somehow?\n            return {\n                pre: function($s, $e, $a, parentControl) {\n                    // Can I get the $parent from the parent controller?\n                    // By setting this.$scope = $scope from within that controller?\n\n                    // Can I get the $parent from the current $scope?\n\n                    // Can I pass the $parent scope in as an attribute and define\n                    // it as part of this directive's scope definition?\n\n                    // What don't I understand about how directives work and\n                    // how their scope is related to their parent?\n                },\n                post: function($s, $e, $a, parentControl) {\n                    // Has my situation improved by the time the postLink is called?\n                }\n            }\n        }\n    };\n});\n</code></pre>\n    ",
    "a": "\n<p>See <a href=\"http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs\">What are the nuances of scope prototypal / prototypical inheritance in AngularJS?</a></p>\n\n<p>To summarize: the way a directive accesses its parent (<code>$parent</code>) scope depends on the type of scope the directive creates:</p>\n\n<ol>\n<li><p>default (<code>scope: false</code>) - the directive does not create a new scope, so there is no inheritance here.  The directive's scope is the same scope as the parent/container.  In the link function, use the first parameter (typically <code>scope</code>).</p></li>\n<li><p><code>scope: true</code> - the directive creates a new child scope that prototypically inherits from the parent scope.  Properties that are defined on the parent scope are available to the directive <code>scope</code> (because of prototypal inheritance).  Just beware of writing to a primitive scope property -- that will create a new property on the directive scope (that hides/shadows the parent scope property of the same name).</p></li>\n<li><p><code>scope: { ... }</code> - the directive creates a new isolate/isolated scope.  It does not prototypically inherit the parent scope.  You can still access the parent scope using <code>$parent</code>, but this is not normally recommended.  Instead, you should specify which parent scope properties (and/or function) the directive needs via additional attributes on the same element where the directive is used, using the <code>=</code>, <code>@</code>, and <code>&amp;</code> notation.</p></li>\n<li><p><code>transclude: true</code> - the directive creates a new \"transcluded\" child scope, which prototypically inherits from the parent scope.  If the directive also creates an isolate scope, the transcluded and the isolate scopes are siblings.  The <code>$parent</code> property of each scope references the same parent scope.<br><strong>Angular v1.3 update</strong>: If the directive also creates an isolate scope, the transcluded scope is now a child of the isolate scope.  The transcluded and isolate scopes are no longer siblings.  The <code>$parent</code> property of the transcluded scope now references the isolate scope.</p></li>\n</ol>\n\n<p>The above link has examples and pictures of all 4 types.</p>\n\n<p>You cannot access the scope in the directive's compile function (as mentioned here: <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Directives\">https://github.com/angular/angular.js/wiki/Understanding-Directives</a>).  You can access the directive's scope in the link function.</p>\n\n<p><strong>Watching:</strong></p>\n\n<p>For 1. and 2. above: normally you specify which parent property the directive needs via an attribute, then $watch it:</p>\n\n<p></p>\n\n<pre><code>&lt;div my-dir attr1=\"prop1\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>scope.$watch(attrs.attr1, function() { ... });\n</code></pre>\n\n<p>If you are watching an object property, you'll need to use $parse:</p>\n\n<pre><code>&lt;div my-dir attr2=\"obj.prop2\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>var model = $parse(attrs.attr2);\nscope.$watch(model, function() { ... });\n</code></pre>\n\n<p>For 3. above (isolate scope), watch the name you give the directive property using the <code>@</code> or <code>=</code> notation:</p>\n\n<pre><code>&lt;div my-dir attr3=\"{{prop3}}\" attr4=\"obj.prop4\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>scope: {\n  localName3: '@attr3',\n  attr4:      '='  // here, using the same name as the attribute\n},\nlink: function(scope, element, attrs) {\n   scope.$watch('localName3', function() { ... });\n   scope.$watch('attr4',      function() { ... });\n</code></pre>\n    "
}, {
    "t": "AngularJS ngClass conditional",
    "l": "http://stackoverflow.com/questions/16529825/angularjs-ngclass-conditional",
    "q": "\n\n<p>Is there any way to make an expression for something like ngClass to be a conditional. For example, I have tried the following:</p>\n\n<pre><code>&lt;span ng-class=\"{test: 'obj.value1 == \\'someothervalue\\''}\"&gt;test&lt;/span&gt;\n</code></pre>\n\n<p>The issue with this code is that no matter what obj.value1 is, the class test is always applied to the element. Doing this:</p>\n\n<pre><code>&lt;span ng-class=\"{test: obj.value2}\"&gt;test&lt;/span&gt;\n</code></pre>\n\n<p>As long as obj.value2 does not equal a truthy value, the class in not applied.  Now I can work around the issue in the first example by doing this:</p>\n\n<pre><code>&lt;span ng-class=\"{test: checkValue1()}\"&gt;test&lt;/span&gt;\n</code></pre>\n\n<p>where the checkValue1 function looks like this:</p>\n\n<pre><code>$scope.checkValue1 = function() {\n  return $scope.obj.value === 'somevalue';\n}\n</code></pre>\n\n<p>I am just wondering if this is how ngClass is supposed to work.  I am also building a custom directive where I would like to do something similar to this. However I can't find a way to watch an expression (and maybe that is impossible and the reason why it works like this).</p>\n\n<p>Here is a plnkr to show what I mean:</p>\n\n<p><a href=\"http://plnkr.co/edit/iSh0t8swDEyGbh7ylZg2?p=preview\">http://plnkr.co/edit/iSh0t8swDEyGbh7ylZg2?p=preview</a></p>\n    ",
    "a": "\n<p>Your first attempt was almost right, It should work without the quotes.</p>\n\n<pre><code>{test: obj.value1 == 'someothervalue'}\n</code></pre>\n\n<p>Here is a <a href=\"http://plnkr.co/edit/j4r8MDt3Q77NFJlhv7oQ?p=preview\" rel=\"nofollow\">plnkr</a>.</p>\n\n<p>The ngClass directive will work with any expression that evaluates truthy or falsey, a bit similar to Javascript expressions but with some differences, you can read about <a href=\"http://docs.angularjs.org/guide/expression\" rel=\"nofollow\">here</a>.\nIf your conditional is too complex, then you can use a function that returns truthy or falsey, as you did in your third attempt.</p>\n\n<p>Just to complement: You can also use logical operators to form logical expressions like </p>\n\n<pre><code>ng-class=\"{'test': obj.value1 == 'someothervalue' || obj.value2 == 'somethingelse'}\"\n</code></pre>\n    "
}, {
    "t": "AngularJS performs an OPTIONS HTTP request for a cross-origin resource",
    "l": "http://stackoverflow.com/questions/12111936/angularjs-performs-an-options-http-request-for-a-cross-origin-resource",
    "q": "\n\n<p>I'm trying to setup AngularJS to communicate with a cross-origin resource where the asset host which delivers my template files is on a different domain and therefore the XHR request that angular performs must be cross-domain. I've added the appropriate CORS header to my server for the HTTP request to make this work, but it doesn't seem to work. The problem is that when I inspect the HTTP requests in my browser (chrome) the request sent to the asset file is an OPTIONS request (it should be a GET request).</p>\n\n<p>I'm not sure whether this is a bug in AngularJS or if I need to configure something. From what I understand the XHR wrapper can't make an OPTIONS HTTP request so it looks like the browser is trying to figure out if is \"allowed\" to download the asset first before it performs the GET request. If this is the case, then do I need to set the CORS header (Access-Control-Allow-Origin: <a href=\"http://asset.host\">http://asset.host</a>...) with the asset host as well?</p>\n    ",
    "a": "\n<p>OPTION request are by no means AngularJS bug, this is how Cross-Origin Resource Sharing standard mandates browsers to behave. Please refer to this document: <a href=\"https://developer.mozilla.org/en-US/docs/HTTP_access_control\">https://developer.mozilla.org/en-US/docs/HTTP_access_control</a>, where in the \"Overview\" section it says:</p>\n\n<blockquote>\n  <p>The Cross-Origin Resource Sharing standard works by adding new HTTP\n  headers that allow servers to describe the set of origins that are\n  permitted to read that information using a web browser.  Additionally,\n  for HTTP request methods that can cause side-effects on user data (in\n  particular, for HTTP methods other than GET, or for POST usage with\n  certain MIME types), the specification mandates that browsers\n  \"preflight\" the request, soliciting supported methods from the server\n  with an HTTP OPTIONS request header, and then, upon \"approval\" from\n  the server, sending the actual request with the actual HTTP request\n  method.  Servers can also notify clients whether \"credentials\"\n  (including Cookies and HTTP Authentication data) should be sent with\n  requests.</p>\n</blockquote>\n\n<p>It is very hard to provide a generic solution that would work for all the WWW servers as setup will vary depending on the server itself and HTTP verbs that you intend to support. I would encourage you to get over this excellent article (<a href=\"http://www.html5rocks.com/en/tutorials/cors/\">http://www.html5rocks.com/en/tutorials/cors/</a>) that has much more details on the exact headers that needs to be sent by a server.</p>\n    "
}, {
    "t": "angularjs Access parent scope from child controller",
    "l": "http://stackoverflow.com/questions/21453697/angularjs-access-parent-scope-from-child-controller",
    "q": "\n\n<p>I've set up my controllers using <code>data-ng-controller=\"xyzController as vm\"</code></p>\n\n<p>I have a scenario with parent / child nested controllers. I have no problem accessing parent properties in the nested html by using <code>$parent.vm.property</code>, but I cannot figure out how to access the parent property from within my child controller.</p>\n\n<p>I've tried injecting $scope and then using <code>$scope.$parent.vm.property</code>, but this isn't working?</p>\n\n<p>Can anyone offer advice?</p>\n    ",
    "a": "\n<p>If your HTML is like below you could do something like this:</p>\n\n<pre><code>&lt;div ng-controller=\"ParentCtrl\"&gt;\n    &lt;div ng-controller=\"ChildCtrl\"&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Then you can access the parent scope as follows</p>\n\n<pre><code>function ParentCtrl($scope) {\n    $scope.cities = [\"NY\", \"Amsterdam\", \"Barcelona\"];\n}\n\nfunction ChildCtrl($scope) {\n    $scope.parentcities = $scope.$parent.cities;\n}\n</code></pre>\n\n<p>If you want to access a parent controller from your view you have to do something like this:</p>\n\n<pre><code>&lt;div ng-controller=\"xyzController as vm\"&gt;\n   {{$parent.property}}\n&lt;/div&gt;\n</code></pre>\n\n<p>See jsFiddle: <a href=\"http://jsfiddle.net/2r728/\">http://jsfiddle.net/2r728/</a></p>\n\n<p><strong>Update</strong></p>\n\n<p>Actually since you defined <code>cities</code> in the parent controller your child controller will inherit all scope variables. So theoritically you don't have to call <code>$parent</code>. The above example can also be written as follows:</p>\n\n<pre><code>function ParentCtrl($scope) {\n    $scope.cities = [\"NY\",\"Amsterdam\",\"Barcelona\"];\n}\n\nfunction ChildCtrl($scope) {\n    $scope.parentCities = $scope.cities;\n}\n</code></pre>\n\n<p>The AngularJS docs use this approach, <a href=\"http://docs.angularjs.org/guide/scope\">here</a> you can read more about the <code>$scope</code>.</p>\n\n<p><strong>Another update</strong></p>\n\n<p>I think this is a better answer to the original poster. </p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;div ng-app ng-controller=\"ParentCtrl as pc\"&gt;\n    &lt;div ng-controller=\"ChildCtrl as cc\"&gt;\n        &lt;pre&gt;{{cc.parentCities | json}}&lt;/pre&gt;\n        &lt;pre&gt;{{pc.cities | json}}&lt;/pre&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>JS</strong></p>\n\n<pre><code>function ParentCtrl() {\n    var vm = this;\n    vm.cities = [\"NY\", \"Amsterdam\", \"Barcelona\"];\n}\n\nfunction ChildCtrl() {\n    var vm = this;\n    ParentCtrl.apply(vm, arguments); // Inherit parent control\n\n    vm.parentCities = vm.cities;\n}\n</code></pre>\n\n<p>If you use the <code>controller as</code> method you can also access the parent scope as follows</p>\n\n<pre><code>function ChildCtrl($scope) {\n    var vm = this;\n    vm.parentCities = $scope.pc.cities; // note pc is a reference to the \"ParentCtrl as pc\"\n}\n</code></pre>\n\n<p>As you can see there are many different ways in accessing <code>$scopes</code>.</p>\n\n<p><a href=\"http://jsfiddle.net/2r728/10/\"></a></p><h3><a href=\"http://jsfiddle.net/2r728/10/\">Updated fiddle</a></h3>\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function ParentCtrl() {\n    var vm = this;\n    vm.cities = [\"NY\", \"Amsterdam\", \"Barcelona\"];\n}\n    \nfunction ChildCtrl($scope) {\n    var vm = this;\n    ParentCtrl.apply(vm, arguments);\n    \n    vm.parentCitiesByScope = $scope.pc.cities;\n    vm.parentCities = vm.cities;\n}\n    </code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.20/angular.min.js\"&gt;&lt;/script&gt;\n&lt;div ng-app ng-controller=\"ParentCtrl as pc\"&gt;\n  &lt;div ng-controller=\"ChildCtrl as cc\"&gt;\n    &lt;pre&gt;{{cc.parentCities | json}}&lt;/pre&gt;\n    &lt;pre&gt;{{cc.parentCitiesByScope | json }}&lt;/pre&gt;\n    &lt;pre&gt;{{pc.cities | json}}&lt;/pre&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n</div>\n</div>\n<p></p>\n    "
}, {
    "t": "AngularJS $http and $resource",
    "l": "http://stackoverflow.com/questions/13181406/angularjs-http-and-resource",
    "q": "\n\n<p>I am newly exposed to AngularJS, so please forgive my ignorance.</p>\n\n<p>I have some web services that I want to call. <code>$resource</code> or <code>$http</code>, which one should I use?</p>\n\n<p><code>$resource</code>: <a href=\"https://docs.angularjs.org/api/ngResource/service/%24resource\">https://docs.angularjs.org/api/ngResource/service/$resource</a></p>\n\n<p><code>$http</code>: <a href=\"https://docs.angularjs.org/api/ng/service/%24http\">https://docs.angularjs.org/api/ng/service/$http</a></p>\n\n<p>After I read the two above API pages I am lost.</p>\n\n<p>Could you please explain to me in plain English what is the difference and in what situation should I use them? How do I structure these calls and read the results into js objects correctly? </p>\n    ",
    "a": "\n<p><code>$http</code> is for general purpose AJAX. In most cases this is what you'll be using. With <code>$http</code> you're going to be making <code>GET</code>, <code>POST</code>, <code>DELETE</code> type calls manually and processing the objects they return on your own.</p>\n\n<p><code>$resource</code> wraps <code>$http</code> for use in RESTful web API scenarios. </p>\n\n<hr>\n\n<p>Speaking VERY generally: A RESTful web service will be a service with one endpoint for a data type that does different things with that data type based on HTTP methods like <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, etc. So with a <code>$resource</code>, you can call a <code>GET</code> to get the resource as a JavaScript object, then alter it and send it back with a <code>POST</code>, or even delete it with <code>DELETE</code>.</p>\n\n<p>... if that makes sense.</p>\n    "
}, {
    "t": "Tracking Google Analytics Page Views with Angular.js",
    "l": "http://stackoverflow.com/questions/10713708/tracking-google-analytics-page-views-with-angular-js",
    "q": "\n\n<p>I'm setting up a new app using Angular.JS as the frontend. Everything on the client side is done with HTML5 pushstate and I'd like to be able to track my page views in Google Analytics.</p>\n    ",
    "a": "\n<p>If you're using <code>ng-view</code> in your Angular app you can listen for the <code>$viewContentLoaded</code> event and push a tracking event to Google Analytics.</p>\n\n<p>Assuming you've setup your tracking code in your main index.html file with a name of <code>var _gaq</code> and MyCtrl is what you've defined in the <code>ng-controller</code> directive.</p>\n\n<pre><code>function MyCtrl($scope, $location, $window) {\n  $scope.$on('$viewContentLoaded', function(event) {\n    $window._gaq.push(['_trackPageview', $location.url()]);\n  });\n}\n</code></pre>\n\n<p><strong>UPDATE:</strong> \nfor new version of google-analytics use this one</p>\n\n<pre><code>$window.ga('send', 'pageview', { page: $location.url() });\n</code></pre>\n    "
}]